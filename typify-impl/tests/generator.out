mod types {
    #[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
    pub struct CompoundType {
        pub value1: String,
        pub value2: u64,
    }
    #[derive(
        Serialize, Deserialize, Debug, Clone, JsonSchema, Copy, PartialOrd, Ord, PartialEq, Eq, Hash,
    )]
    pub enum StringEnum {
        One,
        Two,
        BuckleMyShoe,
    }
    impl ToString for StringEnum {
        fn to_string(&self) -> String {
            match *self {
                StringEnum::One => "One".to_string(),
                StringEnum::Two => "Two".to_string(),
                StringEnum::BuckleMyShoe => "BuckleMyShoe".to_string(),
            }
        }
    }
}
pub fn do_stuff(
    body: &types::CompoundType,
    string: &str,
    opt_int: Option<u32>,
    strenum: types::StringEnum,
) -> types::CompoundType {
    todo!()
}
