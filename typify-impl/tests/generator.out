mod types {
    #[doc = "AllTheTraits"]
    #[doc = r""]
    #[doc = r" <details><summary>JSON schema</summary>"]
    #[doc = r""]
    #[doc = r" ```json"]
    #[doc = "{\n  \"title\": \"AllTheTraits\",\n  \"type\": \"object\",\n  \"required\": [\n    \"ok\"\n  ],\n  \"properties\": {\n    \"ok\": {\n      \"type\": \"string\"\n    }\n  }\n}"]
    #[doc = r" ```"]
    #[doc = r" </details>"]
    #[derive(
        Clone, Debug, Deserialize, Eq, Hash, JsonSchema, Ord, PartialEq, PartialOrd, Serialize,
    )]
    pub struct AllTheTraits {
        pub ok: String,
    }
    impl From<&AllTheTraits> for AllTheTraits {
        fn from(value: &AllTheTraits) -> Self {
            value.clone()
        }
    }
    impl AllTheTraits {
        pub fn builder() -> builder::AllTheTraits {
            Default::default()
        }
    }
    #[doc = "CompoundType"]
    #[doc = r""]
    #[doc = r" <details><summary>JSON schema</summary>"]
    #[doc = r""]
    #[doc = r" ```json"]
    #[doc = "{\n  \"title\": \"CompoundType\",\n  \"type\": \"object\",\n  \"required\": [\n    \"value1\",\n    \"value2\"\n  ],\n  \"properties\": {\n    \"value1\": {\n      \"type\": \"string\"\n    },\n    \"value2\": {\n      \"type\": \"integer\",\n      \"format\": \"uint64\",\n      \"minimum\": 0.0\n    }\n  }\n}"]
    #[doc = r" ```"]
    #[doc = r" </details>"]
    #[derive(Clone, Debug, Deserialize, JsonSchema, Serialize)]
    pub struct CompoundType {
        pub value1: String,
        pub value2: u64,
    }
    impl From<&CompoundType> for CompoundType {
        fn from(value: &CompoundType) -> Self {
            value.clone()
        }
    }
    impl CompoundType {
        pub fn builder() -> builder::CompoundType {
            Default::default()
        }
    }
    #[doc = "Pair"]
    #[doc = r""]
    #[doc = r" <details><summary>JSON schema</summary>"]
    #[doc = r""]
    #[doc = r" ```json"]
    #[doc = "{\n  \"title\": \"Pair\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"a\": {\n      \"default\": \"One\",\n      \"$ref\": \"#/definitions/StringEnum\"\n    },\n    \"b\": {\n      \"default\": \"Two\",\n      \"$ref\": \"#/definitions/StringEnum\"\n    }\n  }\n}"]
    #[doc = r" ```"]
    #[doc = r" </details>"]
    #[derive(Clone, Debug, Deserialize, JsonSchema, Serialize)]
    pub struct Pair {
        #[serde(default = "defaults::pair_a")]
        pub a: StringEnum,
        #[serde(default = "defaults::pair_b")]
        pub b: StringEnum,
    }
    impl From<&Pair> for Pair {
        fn from(value: &Pair) -> Self {
            value.clone()
        }
    }
    impl Pair {
        pub fn builder() -> builder::Pair {
            Default::default()
        }
    }
    #[doc = "StringEnum"]
    #[doc = r""]
    #[doc = r" <details><summary>JSON schema</summary>"]
    #[doc = r""]
    #[doc = r" ```json"]
    #[doc = "{\n  \"type\": \"string\",\n  \"enum\": [\n    \"One\",\n    \"Two\",\n    \"BuckleMyShoe\"\n  ]\n}"]
    #[doc = r" ```"]
    #[doc = r" </details>"]
    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, JsonSchema, Ord, PartialEq, PartialOrd, Serialize,
    )]
    pub enum StringEnum {
        One,
        Two,
        BuckleMyShoe,
    }
    impl From<&StringEnum> for StringEnum {
        fn from(value: &StringEnum) -> Self {
            value.clone()
        }
    }
    impl ToString for StringEnum {
        fn to_string(&self) -> String {
            match *self {
                Self::One => "One".to_string(),
                Self::Two => "Two".to_string(),
                Self::BuckleMyShoe => "BuckleMyShoe".to_string(),
            }
        }
    }
    impl std::str::FromStr for StringEnum {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "One" => Ok(Self::One),
                "Two" => Ok(Self::Two),
                "BuckleMyShoe" => Ok(Self::BuckleMyShoe),
                _ => Err("invalid value"),
            }
        }
    }
    impl std::convert::TryFrom<&str> for StringEnum {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }
    impl std::convert::TryFrom<&String> for StringEnum {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }
    impl std::convert::TryFrom<String> for StringEnum {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }
    pub mod builder {
        #[derive(Clone, Debug)]
        pub struct AllTheTraits {
            ok: Result<String, String>,
        }
        impl Default for AllTheTraits {
            fn default() -> Self {
                Self {
                    ok: Err("no value supplied for ok".to_string()),
                }
            }
        }
        impl AllTheTraits {
            pub fn ok<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.ok = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for ok: {}", e));
                self
            }
        }
        impl std::convert::TryFrom<AllTheTraits> for super::AllTheTraits {
            type Error = String;
            fn try_from(value: AllTheTraits) -> Result<Self, String> {
                Ok(Self { ok: value.ok? })
            }
        }
        impl From<super::AllTheTraits> for AllTheTraits {
            fn from(value: super::AllTheTraits) -> Self {
                Self { ok: Ok(value.ok) }
            }
        }
        #[derive(Clone, Debug)]
        pub struct CompoundType {
            value1: Result<String, String>,
            value2: Result<u64, String>,
        }
        impl Default for CompoundType {
            fn default() -> Self {
                Self {
                    value1: Err("no value supplied for value1".to_string()),
                    value2: Err("no value supplied for value2".to_string()),
                }
            }
        }
        impl CompoundType {
            pub fn value1<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.value1 = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for value1: {}", e));
                self
            }
            pub fn value2<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.value2 = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for value2: {}", e));
                self
            }
        }
        impl std::convert::TryFrom<CompoundType> for super::CompoundType {
            type Error = String;
            fn try_from(value: CompoundType) -> Result<Self, String> {
                Ok(Self {
                    value1: value.value1?,
                    value2: value.value2?,
                })
            }
        }
        impl From<super::CompoundType> for CompoundType {
            fn from(value: super::CompoundType) -> Self {
                Self {
                    value1: Ok(value.value1),
                    value2: Ok(value.value2),
                }
            }
        }
        #[derive(Clone, Debug)]
        pub struct Pair {
            a: Result<super::StringEnum, String>,
            b: Result<super::StringEnum, String>,
        }
        impl Default for Pair {
            fn default() -> Self {
                Self {
                    a: Ok(super::defaults::pair_a()),
                    b: Ok(super::defaults::pair_b()),
                }
            }
        }
        impl Pair {
            pub fn a<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::StringEnum>,
                T::Error: std::fmt::Display,
            {
                self.a = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for a: {}", e));
                self
            }
            pub fn b<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::StringEnum>,
                T::Error: std::fmt::Display,
            {
                self.b = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for b: {}", e));
                self
            }
        }
        impl std::convert::TryFrom<Pair> for super::Pair {
            type Error = String;
            fn try_from(value: Pair) -> Result<Self, String> {
                Ok(Self {
                    a: value.a?,
                    b: value.b?,
                })
            }
        }
        impl From<super::Pair> for Pair {
            fn from(value: super::Pair) -> Self {
                Self {
                    a: Ok(value.a),
                    b: Ok(value.b),
                }
            }
        }
    }
    pub mod defaults {
        pub(super) fn pair_a() -> super::StringEnum {
            super::StringEnum::One
        }
        pub(super) fn pair_b() -> super::StringEnum {
            super::StringEnum::Two
        }
    }
}
pub fn do_stuff(
    body: &types::CompoundType,
    string: &str,
    opt_int: Option<u32>,
    strenum: types::StringEnum,
) -> types::CompoundType {
    todo!()
}
