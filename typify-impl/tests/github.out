#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AlertInstance {
    #[doc = "Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name."]
    pub analysis_key: String,
    pub classifications: Option<Vec<String>>,
    pub commit_sha: Option<String>,
    #[doc = "Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed."]
    pub environment: String,
    pub location: Option<AlertInstanceLocation>,
    pub message: Option<AlertInstanceMessage>,
    #[doc = "The full Git reference, formatted as `refs/heads/<branch name>`."]
    #[serde(rename = "ref")]
    pub rref: String,
    #[doc = "State of a code scanning alert."]
    pub state: AlertInstanceState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct App {
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub description: Option<String>,
    #[doc = "The list of events for the GitHub app"]
    pub events: Option<Vec<AppEventsItem>>,
    pub external_url: String,
    pub html_url: String,
    #[doc = "Unique identifier of the GitHub app"]
    pub id: u64,
    #[doc = "The name of the GitHub app"]
    pub name: String,
    pub node_id: String,
    pub owner: User,
    pub permissions: Option<AppPermissions>,
    #[doc = "The slug name of the GitHub app"]
    pub slug: Option<String>,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AuthorAssociation {
    #[serde(rename = "COLLABORATOR")]
    Collaborator,
    #[serde(rename = "CONTRIBUTOR")]
    Contributor,
    #[serde(rename = "FIRST_TIMER")]
    FirstTimer,
    #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
    FirstTimeContributor,
    #[serde(rename = "MANNEQUIN")]
    Mannequin,
    #[serde(rename = "MEMBER")]
    Member,
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "OWNER")]
    Owner,
}
impl ToString for AuthorAssociation {
    fn to_string(&self) -> String {
        match self {
            AuthorAssociation::Collaborator => "COLLABORATOR".to_string(),
            AuthorAssociation::Contributor => "CONTRIBUTOR".to_string(),
            AuthorAssociation::FirstTimer => "FIRST_TIMER".to_string(),
            AuthorAssociation::FirstTimeContributor => "FIRST_TIME_CONTRIBUTOR".to_string(),
            AuthorAssociation::Mannequin => "MANNEQUIN".to_string(),
            AuthorAssociation::Member => "MEMBER".to_string(),
            AuthorAssociation::None => "NONE".to_string(),
            AuthorAssociation::Owner => "OWNER".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BranchProtectionRule {
    pub admin_enforced: bool,
    pub allow_deletions_enforcement_level: BranchProtectionRuleAllowDeletionsEnforcementLevel,
    pub allow_force_pushes_enforcement_level: BranchProtectionRuleAllowForcePushesEnforcementLevel,
    pub authorized_actor_names: Vec<String>,
    pub authorized_actors_only: bool,
    pub authorized_dismissal_actors_only: bool,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub dismiss_stale_reviews_on_push: bool,
    pub id: u64,
    pub ignore_approvals_from_contributors: bool,
    pub linear_history_requirement_enforcement_level:
        BranchProtectionRuleLinearHistoryRequirementEnforcementLevel,
    pub merge_queue_enforcement_level: BranchProtectionRuleMergeQueueEnforcementLevel,
    pub name: String,
    pub pull_request_reviews_enforcement_level:
        BranchProtectionRulePullRequestReviewsEnforcementLevel,
    pub repository_id: u64,
    pub require_code_owner_review: bool,
    pub required_approving_review_count: u64,
    pub required_conversation_resolution_level:
        BranchProtectionRuleRequiredConversationResolutionLevel,
    pub required_deployments_enforcement_level:
        BranchProtectionRuleRequiredDeploymentsEnforcementLevel,
    pub required_status_checks: Vec<String>,
    pub required_status_checks_enforcement_level:
        BranchProtectionRuleRequiredStatusChecksEnforcementLevel,
    pub signature_requirement_enforcement_level:
        BranchProtectionRuleSignatureRequirementEnforcementLevel,
    pub strict_required_status_checks_policy: bool,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BranchProtectionRulecreated {
    pub action: BranchProtectionRulecreatedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub rule: BranchProtectionRule,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BranchProtectionRuledeleted {
    pub action: BranchProtectionRuledeletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub rule: BranchProtectionRule,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BranchProtectionRuleedited {
    pub action: BranchProtectionRuleeditedAction,
    pub changes: BranchProtectionRuleeditedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub rule: BranchProtectionRule,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum BranchProtectionRuleEvent {
    Variant0(BranchProtectionRulecreated),
    Variant1(BranchProtectionRuledeleted),
    Variant2(BranchProtectionRuleedited),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunDeployment {
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub description: Option<String>,
    pub environment: String,
    pub id: u64,
    pub node_id: String,
    pub original_environment: String,
    pub repository_url: String,
    pub statuses_url: String,
    pub task: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunPullRequest {
    pub base: CheckRunPullRequestBase,
    pub head: CheckRunPullRequestHead,
    pub id: u64,
    pub number: u64,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRuncompleted {
    pub action: CheckRuncompletedAction,
    pub check_run: CheckRuncompletedCheckRun,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[doc = "The action requested by the user."]
    pub requested_action: Option<CheckRuncompletedRequestedAction>,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRuncreated {
    pub action: CheckRuncreatedAction,
    pub check_run: CheckRuncreatedCheckRun,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[doc = "The action requested by the user."]
    pub requested_action: Option<CheckRuncreatedRequestedAction>,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunrequestedAction {
    pub action: CheckRunrequestedActionAction,
    pub check_run: CheckRunrequestedActionCheckRun,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub requested_action: CheckRunrequestedActionRequestedAction,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunrerequested {
    pub action: CheckRunrerequestedAction,
    pub check_run: CheckRunrerequestedCheckRun,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[doc = "The action requested by the user."]
    pub requested_action: Option<CheckRunrerequestedRequestedAction>,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum CheckRunEvent {
    Variant0(CheckRuncompleted),
    Variant1(CheckRuncreated),
    Variant2(CheckRunrequestedAction),
    Variant3(CheckRunrerequested),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckSuitecompleted {
    pub action: CheckSuitecompletedAction,
    pub check_suite: CheckSuitecompletedCheckSuite,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckSuiterequested {
    pub action: CheckSuiterequestedAction,
    pub check_suite: CheckSuiterequestedCheckSuite,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckSuitererequested {
    pub action: CheckSuitererequestedAction,
    pub check_suite: CheckSuitererequestedCheckSuite,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum CheckSuiteEvent {
    Variant0(CheckSuitecompleted),
    Variant1(CheckSuiterequested),
    Variant2(CheckSuitererequested),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertappearedInBranch {
    pub action: CodeScanningAlertappearedInBranchAction,
    pub alert: CodeScanningAlertappearedInBranchAlert,
    #[doc = "The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    pub commit_oid: String,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[doc = "The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: GithubOrg,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertclosedByUser {
    pub action: CodeScanningAlertclosedByUserAction,
    pub alert: CodeScanningAlertclosedByUserAlert,
    #[doc = "The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    pub commit_oid: String,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[doc = "The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertcreated {
    pub action: CodeScanningAlertcreatedAction,
    pub alert: CodeScanningAlertcreatedAlert,
    #[doc = "The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    pub commit_oid: String,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[doc = "The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: GithubOrg,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertfixed {
    pub action: CodeScanningAlertfixedAction,
    pub alert: CodeScanningAlertfixedAlert,
    #[doc = "The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    pub commit_oid: String,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[doc = "The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: GithubOrg,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertreopened {
    pub action: CodeScanningAlertreopenedAction,
    pub alert: CodeScanningAlertreopenedAlert,
    #[doc = "The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    pub commit_oid: String,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[doc = "The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: GithubOrg,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertreopenedByUser {
    pub action: CodeScanningAlertreopenedByUserAction,
    pub alert: CodeScanningAlertreopenedByUserAlert,
    #[doc = "The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    pub commit_oid: String,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[doc = "The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum CodeScanningAlertEvent {
    Variant0(CodeScanningAlertappearedInBranch),
    Variant1(CodeScanningAlertclosedByUser),
    Variant2(CodeScanningAlertcreated),
    Variant3(CodeScanningAlertfixed),
    Variant4(CodeScanningAlertreopened),
    Variant5(CodeScanningAlertreopenedByUser),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Commit {
    #[doc = "An array of files added in the commit."]
    pub added: Vec<String>,
    pub author: Committer,
    pub committer: Committer,
    #[doc = "Whether this commit is distinct from any that have been pushed before."]
    pub distinct: bool,
    pub id: String,
    #[doc = "The commit message."]
    pub message: String,
    #[doc = "An array of files modified by the commit."]
    pub modified: Vec<String>,
    #[doc = "An array of files removed in the commit."]
    pub removed: Vec<String>,
    #[doc = "The ISO 8601 timestamp of the commit."]
    pub timestamp: String,
    pub tree_id: String,
    #[doc = "URL that points to the commit API resource."]
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CommitSimple {
    pub author: Committer,
    pub committer: Committer,
    pub id: String,
    pub message: String,
    pub timestamp: String,
    pub tree_id: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CommitCommentcreated {
    #[doc = "The action performed. Can be `created`."]
    pub action: CommitCommentcreatedAction,
    pub comment: CommitCommentcreatedComment,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
struct CommitCommentEvent(CommitCommentcreated);
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Committer {
    pub date: Option<chrono::DateTime<chrono::offset::Utc>>,
    pub email: CommitterEmail,
    #[doc = "The git author's name."]
    pub name: String,
    pub username: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ContentReferencecreated {
    pub action: ContentReferencecreatedAction,
    pub content_reference: ContentReferencecreatedContentReference,
    pub installation: InstallationLite,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
struct ContentReferenceEvent(ContentReferencecreated);
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Createevent {
    #[doc = "The repository's current description."]
    pub description: Option<String>,
    pub installation: Option<InstallationLite>,
    #[doc = "The name of the repository's default branch (usually `main`)."]
    pub master_branch: String,
    pub organization: Option<Organization>,
    #[doc = "The pusher type for the event. Can be either `user` or a deploy key."]
    pub pusher_type: String,
    #[doc = "The type of Git ref object created in the repository. Can be either `branch` or `tag`."]
    pub ref_type: CreateeventRefType,
    pub repository: Repository,
    #[doc = "The [`git ref`](https://docs.github.com/en/rest/reference/git#get-a-reference) resource."]
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Deleteevent {
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    #[doc = "The pusher type for the event. Can be either `user` or a deploy key."]
    pub pusher_type: String,
    #[doc = "The type of Git ref object deleted in the repository. Can be either `branch` or `tag`."]
    pub ref_type: DeleteeventRefType,
    pub repository: Repository,
    #[doc = "The [`git ref`](https://docs.github.com/en/rest/reference/git#get-a-reference) resource."]
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeployKeycreated {
    pub action: DeployKeycreatedAction,
    pub installation: Option<InstallationLite>,
    pub key: DeployKeycreatedKey,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeployKeydeleted {
    pub action: DeployKeydeletedAction,
    pub installation: Option<InstallationLite>,
    pub key: DeployKeydeletedKey,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum DeployKeyEvent {
    Variant0(DeployKeycreated),
    Variant1(DeployKeydeleted),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Deploymentcreated {
    pub action: DeploymentcreatedAction,
    pub deployment: DeploymentcreatedDeployment,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    pub workflow: (),
    pub workflow_run: (),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
struct DeploymentEvent(Deploymentcreated);
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeploymentStatuscreated {
    pub action: DeploymentStatuscreatedAction,
    pub deployment: DeploymentStatuscreatedDeployment,
    pub deployment_status: DeploymentStatuscreatedDeploymentStatus,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
struct DeploymentStatusEvent(DeploymentStatuscreated);
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Discussion {
    pub active_lock_reason: Option<String>,
    pub answer_chosen_at: Option<String>,
    pub answer_chosen_by: DiscussionAnswerChosenBy,
    pub answer_html_url: Option<String>,
    pub author_association: AuthorAssociation,
    pub body: String,
    pub category: DiscussionCategory,
    pub comments: u64,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub html_url: String,
    pub id: u64,
    pub locked: bool,
    pub node_id: String,
    pub number: u64,
    pub repository_url: String,
    pub state: DiscussionState,
    pub title: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Discussionanswered {
    pub action: DiscussionansweredAction,
    pub answer: DiscussionansweredAnswer,
    pub discussion: DiscussionansweredDiscussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussioncategoryChanged {
    pub action: DiscussioncategoryChangedAction,
    pub changes: DiscussioncategoryChangedChanges,
    pub discussion: Discussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Discussioncreated {
    pub action: DiscussioncreatedAction,
    pub discussion: DiscussioncreatedDiscussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Discussiondeleted {
    pub action: DiscussiondeletedAction,
    pub discussion: Discussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Discussionedited {
    pub action: DiscussioneditedAction,
    pub changes: Option<DiscussioneditedChanges>,
    pub discussion: Discussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Discussionlabeled {
    pub action: DiscussionlabeledAction,
    pub discussion: Discussion,
    pub installation: Option<InstallationLite>,
    pub label: Label,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Discussionlocked {
    pub action: DiscussionlockedAction,
    pub discussion: DiscussionlockedDiscussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Discussionpinned {
    pub action: DiscussionpinnedAction,
    pub discussion: Discussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Discussiontransferred {
    pub action: DiscussiontransferredAction,
    pub changes: DiscussiontransferredChanges,
    pub discussion: Discussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Discussionunanswered {
    pub action: DiscussionunansweredAction,
    pub discussion: DiscussionunansweredDiscussion,
    pub installation: Option<InstallationLite>,
    pub old_answer: DiscussionunansweredOldAnswer,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Discussionunlabeled {
    pub action: DiscussionunlabeledAction,
    pub discussion: Discussion,
    pub installation: Option<InstallationLite>,
    pub label: Label,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Discussionunlocked {
    pub action: DiscussionunlockedAction,
    pub discussion: DiscussionunlockedDiscussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Discussionunpinned {
    pub action: DiscussionunpinnedAction,
    pub discussion: Discussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCommentcreated {
    pub action: DiscussionCommentcreatedAction,
    pub comment: DiscussionCommentcreatedComment,
    pub discussion: Discussion,
    pub installation: InstallationLite,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCommentdeleted {
    pub action: DiscussionCommentdeletedAction,
    pub comment: DiscussionCommentdeletedComment,
    pub discussion: Discussion,
    pub installation: InstallationLite,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCommentedited {
    pub action: DiscussionCommenteditedAction,
    pub changes: DiscussionCommenteditedChanges,
    pub comment: DiscussionCommenteditedComment,
    pub discussion: Discussion,
    pub installation: InstallationLite,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum DiscussionCommentEvent {
    Variant0(DiscussionCommentcreated),
    Variant1(DiscussionCommentdeleted),
    Variant2(DiscussionCommentedited),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum DiscussionEvent {
    Variant0(Discussionanswered),
    Variant1(DiscussioncategoryChanged),
    Variant2(Discussioncreated),
    Variant3(Discussiondeleted),
    Variant4(Discussionedited),
    Variant5(Discussionlabeled),
    Variant6(Discussionlocked),
    Variant7(Discussionpinned),
    Variant8(Discussiontransferred),
    Variant9(Discussionunanswered),
    Variant10(Discussionunlabeled),
    Variant11(Discussionunlocked),
    Variant12(Discussionunpinned),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Forkevent {
    #[doc = "The created [`repository`](https://docs.github.com/en/rest/reference/repos#get-a-repository) resource."]
    pub forkee: ForkeventForkee,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GithubOrg {
    pub avatar_url: String,
    pub email: Option<()>,
    pub events_url: String,
    pub followers_url: String,
    pub following_url: String,
    pub gists_url: String,
    pub gravatar_id: String,
    pub html_url: String,
    pub id: u64,
    pub login: String,
    pub name: Option<String>,
    pub node_id: String,
    pub organizations_url: String,
    pub received_events_url: String,
    pub repos_url: String,
    pub site_admin: bool,
    pub starred_url: String,
    pub subscriptions_url: String,
    #[serde(rename = "type")]
    pub ttype: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GithubAppAuthorizationrevoked {
    pub action: GithubAppAuthorizationrevokedAction,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
struct GithubAppAuthorizationEvent(GithubAppAuthorizationrevoked);
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Gollumevent {
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    #[doc = "The pages that were updated."]
    pub pages: Vec<GollumeventPagesItem>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Installation {
    pub access_tokens_url: String,
    pub account: User,
    pub app_id: u64,
    pub app_slug: Option<String>,
    pub created_at: InstallationCreatedAt,
    pub events: Vec<InstallationEventsItem>,
    pub has_multiple_single_files: Option<bool>,
    pub html_url: String,
    #[doc = "The ID of the installation."]
    pub id: u64,
    pub permissions: InstallationPermissions,
    pub repositories_url: String,
    #[doc = "Describe whether all repositories have been selected or there's a selection involved"]
    pub repository_selection: InstallationRepositorySelection,
    pub single_file_name: Option<String>,
    pub single_file_paths: Option<Vec<String>>,
    pub suspended_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    pub suspended_by: InstallationSuspendedBy,
    #[doc = "The ID of the user or organization this token is being scoped to."]
    pub target_id: u64,
    pub target_type: InstallationTargetType,
    pub updated_at: InstallationUpdatedAt,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Installationcreated {
    pub action: InstallationcreatedAction,
    pub installation: Installation,
    #[doc = "An array of repository objects that the installation can access."]
    pub repositories: Option<Vec<InstallationcreatedRepositoriesItem>>,
    pub requester: Option<User>,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Installationdeleted {
    pub action: InstallationdeletedAction,
    pub installation: Installation,
    #[doc = "An array of repository objects that the installation can access."]
    pub repositories: Option<Vec<InstallationdeletedRepositoriesItem>>,
    pub requester: Option<()>,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationnewPermissionsAccepted {
    pub action: InstallationnewPermissionsAcceptedAction,
    pub installation: Installation,
    #[doc = "An array of repository objects that the installation can access."]
    pub repositories: Option<Vec<InstallationnewPermissionsAcceptedRepositoriesItem>>,
    pub requester: Option<()>,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Installationsuspend {
    pub action: InstallationsuspendAction,
    pub installation: InstallationsuspendInstallation,
    #[doc = "An array of repository objects that the installation can access."]
    pub repositories: Option<Vec<InstallationsuspendRepositoriesItem>>,
    pub requester: Option<()>,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Installationunsuspend {
    pub action: InstallationunsuspendAction,
    pub installation: InstallationunsuspendInstallation,
    #[doc = "An array of repository objects that the installation can access."]
    pub repositories: Option<Vec<InstallationunsuspendRepositoriesItem>>,
    pub requester: Option<()>,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationLite {
    #[doc = "The ID of the installation."]
    pub id: u64,
    pub node_id: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum InstallationEvent {
    Variant0(Installationcreated),
    Variant1(Installationdeleted),
    Variant2(InstallationnewPermissionsAccepted),
    Variant3(Installationsuspend),
    Variant4(Installationunsuspend),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationRepositoriesadded {
    pub action: InstallationRepositoriesaddedAction,
    pub installation: Installation,
    #[doc = "An array of repository objects, which were added to the installation."]
    pub repositories_added: Vec<InstallationRepositoriesaddedRepositoriesAddedItem>,
    #[doc = "An array of repository objects, which were removed from the installation."]
    pub repositories_removed: Vec<InstallationRepositoriesaddedRepositoriesRemovedItem>,
    #[doc = "Describe whether all repositories have been selected or there's a selection involved"]
    pub repository_selection: InstallationRepositoriesaddedRepositorySelection,
    pub requester: InstallationRepositoriesaddedRequester,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationRepositoriesremoved {
    pub action: InstallationRepositoriesremovedAction,
    pub installation: Installation,
    #[doc = "An array of repository objects, which were added to the installation."]
    pub repositories_added: Vec<InstallationRepositoriesremovedRepositoriesAddedItem>,
    #[doc = "An array of repository objects, which were removed from the installation."]
    pub repositories_removed: Vec<InstallationRepositoriesremovedRepositoriesRemovedItem>,
    #[doc = "Describe whether all repositories have been selected or there's a selection involved"]
    pub repository_selection: InstallationRepositoriesremovedRepositorySelection,
    pub requester: InstallationRepositoriesremovedRequester,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum InstallationRepositoriesEvent {
    Variant0(InstallationRepositoriesadded),
    Variant1(InstallationRepositoriesremoved),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Issue {
    pub active_lock_reason: Option<IssueActiveLockReason>,
    pub assignee: Option<IssueAssignee>,
    pub assignees: Vec<User>,
    pub author_association: AuthorAssociation,
    #[doc = "Contents of the issue"]
    pub body: Option<String>,
    pub closed_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    pub comments: u64,
    pub comments_url: String,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub events_url: String,
    pub html_url: String,
    pub id: u64,
    pub labels: Option<Vec<Label>>,
    pub labels_url: String,
    pub locked: Option<bool>,
    pub milestone: IssueMilestone,
    pub node_id: String,
    pub number: u64,
    pub performed_via_github_app: Option<IssuePerformedViaGithubApp>,
    pub pull_request: Option<IssuePullRequest>,
    pub repository_url: String,
    #[doc = "State of the issue; either 'open' or 'closed'"]
    pub state: Option<IssueState>,
    #[doc = "Title of the issue"]
    pub title: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "URL for the issue"]
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueComment {
    pub author_association: AuthorAssociation,
    #[doc = "Contents of the issue comment"]
    pub body: String,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub html_url: String,
    #[doc = "Unique identifier of the issue comment"]
    pub id: u64,
    pub issue_url: String,
    pub node_id: String,
    pub performed_via_github_app: IssueCommentPerformedViaGithubApp,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "URL for the issue comment"]
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentcreated {
    pub action: IssueCommentcreatedAction,
    pub comment: IssueComment,
    pub installation: Option<InstallationLite>,
    #[doc = "The [issue](https://docs.github.com/en/rest/reference/issues) the comment belongs to."]
    pub issue: IssueCommentcreatedIssue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentdeleted {
    pub action: IssueCommentdeletedAction,
    pub comment: IssueComment,
    pub installation: Option<InstallationLite>,
    #[doc = "The [issue](https://docs.github.com/en/rest/reference/issues) the comment belongs to."]
    pub issue: IssueCommentdeletedIssue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentedited {
    pub action: IssueCommenteditedAction,
    pub changes: IssueCommenteditedChanges,
    pub comment: IssueComment,
    pub installation: Option<InstallationLite>,
    #[doc = "The [issue](https://docs.github.com/en/rest/reference/issues) the comment belongs to."]
    pub issue: IssueCommenteditedIssue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum IssueCommentEvent {
    Variant0(IssueCommentcreated),
    Variant1(IssueCommentdeleted),
    Variant2(IssueCommentedited),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Issuesassigned {
    #[doc = "The action that was performed."]
    pub action: IssuesassignedAction,
    pub assignee: Option<IssuesassignedAssignee>,
    pub installation: Option<InstallationLite>,
    pub issue: Issue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Issuesclosed {
    #[doc = "The action that was performed."]
    pub action: IssuesclosedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The [issue](https://docs.github.com/en/rest/reference/issues) itself."]
    pub issue: IssuesclosedIssue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Issuesdeleted {
    pub action: IssuesdeletedAction,
    pub installation: Option<InstallationLite>,
    pub issue: Issue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Issuesdemilestoned {
    pub action: IssuesdemilestonedAction,
    pub installation: Option<InstallationLite>,
    pub issue: IssuesdemilestonedIssue,
    pub milestone: Milestone,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Issuesedited {
    pub action: IssueseditedAction,
    pub changes: IssueseditedChanges,
    pub installation: Option<InstallationLite>,
    pub issue: Issue,
    pub label: Option<Label>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Issueslabeled {
    pub action: IssueslabeledAction,
    pub installation: Option<InstallationLite>,
    pub issue: Issue,
    #[doc = "The label that was added to the issue."]
    pub label: Option<Label>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Issueslocked {
    pub action: IssueslockedAction,
    pub installation: Option<InstallationLite>,
    pub issue: IssueslockedIssue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Issuesmilestoned {
    pub action: IssuesmilestonedAction,
    pub installation: Option<InstallationLite>,
    pub issue: IssuesmilestonedIssue,
    pub milestone: Milestone,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Issuesopened {
    pub action: IssuesopenedAction,
    pub changes: Option<IssuesopenedChanges>,
    pub installation: Option<InstallationLite>,
    pub issue: IssuesopenedIssue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Issuespinned {
    pub action: IssuespinnedAction,
    pub installation: Option<InstallationLite>,
    pub issue: Issue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Issuesreopened {
    pub action: IssuesreopenedAction,
    pub installation: Option<InstallationLite>,
    pub issue: IssuesreopenedIssue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Issuestransferred {
    pub action: IssuestransferredAction,
    pub changes: IssuestransferredChanges,
    pub installation: Option<InstallationLite>,
    pub issue: Issue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Issuesunassigned {
    #[doc = "The action that was performed."]
    pub action: IssuesunassignedAction,
    pub assignee: Option<IssuesunassignedAssignee>,
    pub installation: Option<InstallationLite>,
    pub issue: Issue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Issuesunlabeled {
    pub action: IssuesunlabeledAction,
    pub installation: Option<InstallationLite>,
    pub issue: Issue,
    #[doc = "The label that was removed from the issue."]
    pub label: Option<Label>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Issuesunlocked {
    pub action: IssuesunlockedAction,
    pub installation: Option<InstallationLite>,
    pub issue: IssuesunlockedIssue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Issuesunpinned {
    pub action: IssuesunpinnedAction,
    pub installation: Option<InstallationLite>,
    pub issue: Issue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum IssuesEvent {
    Variant0(Issuesassigned),
    Variant1(Issuesclosed),
    Variant2(Issuesdeleted),
    Variant3(Issuesdemilestoned),
    Variant4(Issuesedited),
    Variant5(Issueslabeled),
    Variant6(Issueslocked),
    Variant7(Issuesmilestoned),
    Variant8(Issuesopened),
    Variant9(Issuespinned),
    Variant10(Issuesreopened),
    Variant11(Issuestransferred),
    Variant12(Issuesunassigned),
    Variant13(Issuesunlabeled),
    Variant14(Issuesunlocked),
    Variant15(Issuesunpinned),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Label {
    #[doc = "6-character hex code, without the leading #, identifying the color"]
    pub color: String,
    pub default: bool,
    pub description: Option<String>,
    pub id: u64,
    #[doc = "The name of the label."]
    pub name: String,
    pub node_id: String,
    #[doc = "URL for the label"]
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Labelcreated {
    pub action: LabelcreatedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The label that was added."]
    pub label: Label,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Labeldeleted {
    pub action: LabeldeletedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The label that was removed."]
    pub label: Label,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Labeledited {
    pub action: LabeleditedAction,
    pub changes: Option<LabeleditedChanges>,
    pub installation: Option<InstallationLite>,
    #[doc = "The label that was edited."]
    pub label: Label,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum LabelEvent {
    Variant0(Labelcreated),
    Variant1(Labeldeleted),
    Variant2(Labeledited),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct License {
    pub key: String,
    pub name: String,
    pub node_id: String,
    pub spdx_id: String,
    pub url: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Link {
    pub href: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchase {
    pub account: MarketplacePurchaseAccount,
    pub billing_cycle: String,
    pub free_trial_ends_on: (),
    pub next_billing_date: Option<String>,
    pub on_free_trial: bool,
    pub plan: MarketplacePurchasePlan,
    pub unit_count: u64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasecancelled {
    pub action: MarketplacePurchasecancelledAction,
    pub effective_date: String,
    pub marketplace_purchase: MarketplacePurchasecancelledMarketplacePurchase,
    pub previous_marketplace_purchase: Option<MarketplacePurchase>,
    pub sender: MarketplacePurchasecancelledSender,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasechanged {
    pub action: MarketplacePurchasechangedAction,
    pub effective_date: String,
    pub marketplace_purchase: MarketplacePurchasechangedMarketplacePurchase,
    pub previous_marketplace_purchase: Option<MarketplacePurchase>,
    pub sender: MarketplacePurchasechangedSender,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasependingChange {
    pub action: MarketplacePurchasependingChangeAction,
    pub effective_date: String,
    pub marketplace_purchase: MarketplacePurchasependingChangeMarketplacePurchase,
    pub previous_marketplace_purchase: Option<MarketplacePurchase>,
    pub sender: MarketplacePurchasependingChangeSender,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasependingChangeCancelled {
    pub action: MarketplacePurchasependingChangeCancelledAction,
    pub effective_date: String,
    pub marketplace_purchase: MarketplacePurchasependingChangeCancelledMarketplacePurchase,
    pub previous_marketplace_purchase: Option<MarketplacePurchase>,
    pub sender: MarketplacePurchasependingChangeCancelledSender,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasepurchased {
    pub action: MarketplacePurchasepurchasedAction,
    pub effective_date: String,
    pub marketplace_purchase: MarketplacePurchasepurchasedMarketplacePurchase,
    pub previous_marketplace_purchase: Option<MarketplacePurchase>,
    pub sender: MarketplacePurchasepurchasedSender,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum MarketplacePurchaseEvent {
    Variant0(MarketplacePurchasecancelled),
    Variant1(MarketplacePurchasechanged),
    Variant2(MarketplacePurchasependingChange),
    Variant3(MarketplacePurchasependingChangeCancelled),
    Variant4(MarketplacePurchasepurchased),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Memberadded {
    pub action: MemberaddedAction,
    pub changes: Option<MemberaddedChanges>,
    pub installation: Option<InstallationLite>,
    #[doc = "The user that was added."]
    pub member: User,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Memberedited {
    pub action: MembereditedAction,
    pub changes: MembereditedChanges,
    pub installation: Option<InstallationLite>,
    #[doc = "The user who's permissions are changed."]
    pub member: User,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Memberremoved {
    pub action: MemberremovedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The user that was removed."]
    pub member: User,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum MemberEvent {
    Variant0(Memberadded),
    Variant1(Memberedited),
    Variant2(Memberremoved),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Membership {
    pub organization_url: String,
    pub role: String,
    pub state: String,
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Membershipadded {
    pub action: MembershipaddedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The [user](https://docs.github.com/en/rest/reference/users) that was added or removed."]
    pub member: User,
    pub organization: Organization,
    #[doc = "The scope of the membership. Currently, can only be `team`."]
    pub scope: MembershipaddedScope,
    pub sender: User,
    #[doc = "The [team](https://docs.github.com/en/rest/reference/teams) for the membership."]
    pub team: Team,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Membershipremoved {
    pub action: MembershipremovedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The [user](https://docs.github.com/en/rest/reference/users) that was added or removed."]
    pub member: User,
    pub organization: Organization,
    #[doc = "The scope of the membership. Currently, can only be `team`."]
    pub scope: MembershipremovedScope,
    pub sender: User,
    pub team: MembershipremovedTeam,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum MembershipEvent {
    Variant0(Membershipadded),
    Variant1(Membershipremoved),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Metadeleted {
    pub action: MetadeletedAction,
    pub hook: MetadeletedHook,
    #[doc = "The id of the modified webhook."]
    pub hook_id: u64,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
struct MetaEvent(Metadeleted);
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Milestone {
    pub closed_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    pub closed_issues: u64,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub creator: User,
    pub description: Option<String>,
    pub due_on: Option<chrono::DateTime<chrono::offset::Utc>>,
    pub html_url: String,
    pub id: u64,
    pub labels_url: String,
    pub node_id: String,
    #[doc = "The number of the milestone."]
    pub number: u64,
    pub open_issues: u64,
    #[doc = "The state of the milestone."]
    pub state: MilestoneState,
    #[doc = "The title of the milestone."]
    pub title: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Milestoneclosed {
    pub action: MilestoneclosedAction,
    pub installation: Option<InstallationLite>,
    pub milestone: MilestoneclosedMilestone,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Milestonecreated {
    pub action: MilestonecreatedAction,
    pub installation: Option<InstallationLite>,
    pub milestone: MilestonecreatedMilestone,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Milestonedeleted {
    pub action: MilestonedeletedAction,
    pub installation: Option<InstallationLite>,
    pub milestone: Milestone,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Milestoneedited {
    pub action: MilestoneeditedAction,
    pub changes: MilestoneeditedChanges,
    pub installation: Option<InstallationLite>,
    pub milestone: Milestone,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Milestoneopened {
    pub action: MilestoneopenedAction,
    pub installation: Option<InstallationLite>,
    pub milestone: MilestoneopenedMilestone,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum MilestoneEvent {
    Variant0(Milestoneclosed),
    Variant1(Milestonecreated),
    Variant2(Milestonedeleted),
    Variant3(Milestoneedited),
    Variant4(Milestoneopened),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OrgBlockblocked {
    pub action: OrgBlockblockedAction,
    #[doc = "Information about the user that was blocked or unblocked."]
    pub blocked_user: User,
    pub installation: Option<InstallationLite>,
    pub organization: Organization,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OrgBlockunblocked {
    pub action: OrgBlockunblockedAction,
    #[doc = "Information about the user that was blocked or unblocked."]
    pub blocked_user: User,
    pub installation: Option<InstallationLite>,
    pub organization: Organization,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum OrgBlockEvent {
    Variant0(OrgBlockblocked),
    Variant1(OrgBlockunblocked),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Organization {
    pub avatar_url: String,
    pub description: Option<String>,
    pub events_url: String,
    pub hooks_url: String,
    pub html_url: Option<String>,
    pub id: u64,
    pub issues_url: String,
    pub login: String,
    pub members_url: String,
    pub node_id: String,
    pub public_members_url: String,
    pub repos_url: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Organizationdeleted {
    pub action: OrganizationdeletedAction,
    pub installation: Option<InstallationLite>,
    pub membership: Membership,
    pub organization: Organization,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OrganizationmemberAdded {
    pub action: OrganizationmemberAddedAction,
    pub installation: Option<InstallationLite>,
    pub membership: Membership,
    pub organization: Organization,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OrganizationmemberInvited {
    pub action: OrganizationmemberInvitedAction,
    pub installation: Option<InstallationLite>,
    pub invitation: OrganizationmemberInvitedInvitation,
    pub organization: Organization,
    pub sender: User,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OrganizationmemberRemoved {
    pub action: OrganizationmemberRemovedAction,
    pub installation: Option<InstallationLite>,
    pub membership: Membership,
    pub organization: Organization,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Organizationrenamed {
    pub action: OrganizationrenamedAction,
    pub installation: Option<InstallationLite>,
    pub membership: Membership,
    pub organization: Organization,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum OrganizationEvent {
    Variant0(Organizationdeleted),
    Variant1(OrganizationmemberAdded),
    Variant2(OrganizationmemberInvited),
    Variant3(OrganizationmemberRemoved),
    Variant4(Organizationrenamed),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Packagepublished {
    pub action: PackagepublishedAction,
    pub organization: Option<Organization>,
    pub package: PackagepublishedPackage,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Packageupdated {
    pub action: PackageupdatedAction,
    pub organization: Option<Organization>,
    pub package: PackageupdatedPackage,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PackageEvent {
    Variant0(Packagepublished),
    Variant1(Packageupdated),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PageBuildevent {
    pub build: PageBuildeventBuild,
    pub id: u64,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Pingevent {
    pub hook: PingeventHook,
    #[doc = "The ID of the webhook that triggered the ping."]
    pub hook_id: u64,
    pub organization: Option<Organization>,
    pub repository: Option<Repository>,
    pub sender: Option<User>,
    pub zen: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Project {
    #[doc = "Body of the project"]
    pub body: Option<String>,
    pub columns_url: String,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub creator: User,
    pub html_url: String,
    pub id: u64,
    #[doc = "Name of the project"]
    pub name: String,
    pub node_id: String,
    pub number: u64,
    pub owner_url: String,
    #[doc = "State of the project; either 'open' or 'closed'"]
    pub state: ProjectState,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Projectclosed {
    pub action: ProjectclosedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project: Project,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Projectcreated {
    pub action: ProjectcreatedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project: Project,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Projectdeleted {
    pub action: ProjectdeletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project: Project,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Projectedited {
    pub action: ProjecteditedAction,
    pub changes: ProjecteditedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project: Project,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Projectreopened {
    pub action: ProjectreopenedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project: Project,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCard {
    pub after_id: Option<()>,
    #[doc = "Whether or not the card is archived"]
    pub archived: bool,
    pub column_id: u64,
    pub column_url: String,
    pub content_url: Option<String>,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub creator: User,
    #[doc = "The project card's ID"]
    pub id: u64,
    pub node_id: String,
    pub note: Option<String>,
    pub project_url: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectColumn {
    pub cards_url: String,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The unique identifier of the project column"]
    pub id: u64,
    #[doc = "Name of the project column"]
    pub name: String,
    pub node_id: String,
    pub project_url: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardconverted {
    pub action: ProjectCardconvertedAction,
    pub changes: ProjectCardconvertedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project_card: ProjectCard,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardcreated {
    pub action: ProjectCardcreatedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project_card: ProjectCard,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCarddeleted {
    pub action: ProjectCarddeletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project_card: ProjectCard,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardedited {
    pub action: ProjectCardeditedAction,
    pub changes: ProjectCardeditedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project_card: ProjectCard,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardmoved {
    pub action: ProjectCardmovedAction,
    pub changes: ProjectCardmovedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project_card: ProjectCardmovedProjectCard,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum ProjectCardEvent {
    Variant0(ProjectCardconverted),
    Variant1(ProjectCardcreated),
    Variant2(ProjectCarddeleted),
    Variant3(ProjectCardedited),
    Variant4(ProjectCardmoved),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectColumncreated {
    pub action: ProjectColumncreatedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project_column: ProjectColumn,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectColumndeleted {
    pub action: ProjectColumndeletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project_column: ProjectColumn,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectColumnedited {
    pub action: ProjectColumneditedAction,
    pub changes: ProjectColumneditedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project_column: ProjectColumn,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectColumnmoved {
    pub action: ProjectColumnmovedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project_column: ProjectColumn,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum ProjectColumnEvent {
    Variant0(ProjectColumncreated),
    Variant1(ProjectColumndeleted),
    Variant2(ProjectColumnedited),
    Variant3(ProjectColumnmoved),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum ProjectEvent {
    Variant0(Projectclosed),
    Variant1(Projectcreated),
    Variant2(Projectdeleted),
    Variant3(Projectedited),
    Variant4(Projectreopened),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Publicevent {
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: PubliceventRepository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequest {
    pub active_lock_reason: Option<PullRequestActiveLockReason>,
    pub additions: u64,
    pub assignee: PullRequestAssignee,
    pub assignees: Vec<User>,
    pub author_association: AuthorAssociation,
    pub auto_merge: (),
    pub base: PullRequestBase,
    pub body: Option<String>,
    pub changed_files: u64,
    pub closed_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    pub comments: u64,
    pub comments_url: String,
    pub commits: u64,
    pub commits_url: String,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub deletions: u64,
    pub diff_url: String,
    #[doc = "Indicates whether or not the pull request is a draft."]
    pub draft: bool,
    pub head: PullRequestHead,
    pub html_url: String,
    pub id: u64,
    pub issue_url: String,
    pub labels: Vec<Label>,
    #[serde(rename = "_links")]
    pub links: PullRequestLinks,
    pub locked: bool,
    #[doc = "Indicates whether maintainers can modify the pull request."]
    pub maintainer_can_modify: bool,
    pub merge_commit_sha: Option<String>,
    pub mergeable: Option<bool>,
    pub mergeable_state: String,
    pub merged: Option<bool>,
    pub merged_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    pub merged_by: PullRequestMergedBy,
    pub milestone: PullRequestMilestone,
    pub node_id: String,
    #[doc = "Number uniquely identifying the pull request within its repository."]
    pub number: u64,
    pub patch_url: String,
    pub rebaseable: Option<bool>,
    pub requested_reviewers: Vec<PullRequestRequestedReviewersItem>,
    pub requested_teams: Vec<Team>,
    pub review_comment_url: String,
    pub review_comments: u64,
    pub review_comments_url: String,
    #[doc = "State of this Pull Request. Either `open` or `closed`."]
    pub state: PullRequestState,
    pub statuses_url: String,
    #[doc = "The title of the pull request."]
    pub title: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewComment {
    pub author_association: AuthorAssociation,
    #[doc = "The text of the comment."]
    pub body: String,
    #[doc = "The SHA of the commit to which the comment applies."]
    pub commit_id: String,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The diff of the line that the comment refers to."]
    pub diff_hunk: String,
    #[doc = "HTML URL for the pull request review comment."]
    pub html_url: String,
    #[doc = "The ID of the pull request review comment."]
    pub id: u64,
    #[doc = "The comment ID to reply to."]
    pub in_reply_to_id: Option<u64>,
    #[doc = "The line of the blob to which the comment applies. The last line of the range for a multi-line comment"]
    pub line: Option<u64>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentLinks,
    #[doc = "The node ID of the pull request review comment."]
    pub node_id: String,
    #[doc = "The SHA of the original commit to which the comment applies."]
    pub original_commit_id: String,
    #[doc = "The line of the blob to which the comment applies. The last line of the range for a multi-line comment"]
    pub original_line: u64,
    #[doc = "The index of the original line in the diff to which the comment applies."]
    pub original_position: u64,
    #[doc = "The first line of the range for a multi-line comment."]
    pub original_start_line: Option<u64>,
    #[doc = "The relative path of the file to which the comment applies."]
    pub path: String,
    #[doc = "The line index in the diff to which the comment applies."]
    pub position: Option<u64>,
    #[doc = "The ID of the pull request review to which the comment belongs."]
    pub pull_request_review_id: u64,
    #[doc = "URL for the pull request that the review comment belongs to."]
    pub pull_request_url: String,
    #[doc = "The side of the first line of the range for a multi-line comment."]
    pub side: PullRequestReviewCommentSide,
    #[doc = "The first line of the range for a multi-line comment."]
    pub start_line: Option<u64>,
    #[doc = "The side of the first line of the range for a multi-line comment."]
    pub start_side: Option<PullRequestReviewCommentStartSide>,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "URL for the pull request review comment"]
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestassigned {
    pub action: PullRequestassignedAction,
    pub assignee: User,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestautoMergeDisabled {
    pub action: PullRequestautoMergeDisabledAction,
    pub installation: Option<InstallationLite>,
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestautoMergeEnabled {
    pub action: PullRequestautoMergeEnabledAction,
    pub installation: Option<InstallationLite>,
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestclosed {
    pub action: PullRequestclosedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequestclosedPullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestconvertedToDraft {
    pub action: PullRequestconvertedToDraftAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequestconvertedToDraftPullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestedited {
    pub action: PullRequesteditedAction,
    pub changes: PullRequesteditedChanges,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestlabeled {
    pub action: PullRequestlabeledAction,
    pub installation: Option<InstallationLite>,
    pub label: Label,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestlocked {
    pub action: PullRequestlockedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestopened {
    pub action: PullRequestopenedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequestopenedPullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestreadyForReview {
    pub action: PullRequestreadyForReviewAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequestreadyForReviewPullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestreopened {
    pub action: PullRequestreopenedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequestreopenedPullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestreviewRequestRemoved {
    Variant0 {
        action: PullRequestreviewRequestRemovedVariant0Action,
        installation: Option<InstallationLite>,
        #[doc = "The pull request number."]
        number: u64,
        organization: Option<Organization>,
        pull_request: PullRequest,
        repository: Repository,
        requested_reviewer: User,
        sender: User,
    },
    Variant1 {
        action: PullRequestreviewRequestRemovedVariant1Action,
        installation: Option<InstallationLite>,
        #[doc = "The pull request number."]
        number: u64,
        organization: Option<Organization>,
        pull_request: PullRequest,
        repository: Repository,
        requested_team: Team,
        sender: User,
    },
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestreviewRequested {
    Variant0 {
        action: PullRequestreviewRequestedVariant0Action,
        installation: Option<InstallationLite>,
        #[doc = "The pull request number."]
        number: u64,
        organization: Option<Organization>,
        pull_request: PullRequest,
        repository: Repository,
        requested_reviewer: User,
        sender: User,
    },
    Variant1 {
        action: PullRequestreviewRequestedVariant1Action,
        installation: Option<InstallationLite>,
        #[doc = "The pull request number."]
        number: u64,
        organization: Option<Organization>,
        pull_request: PullRequest,
        repository: Repository,
        requested_team: Team,
        sender: User,
    },
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestsynchronize {
    pub action: PullRequestsynchronizeAction,
    pub after: String,
    pub before: String,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestunassigned {
    pub action: PullRequestunassignedAction,
    pub assignee: User,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestunlabeled {
    pub action: PullRequestunlabeledAction,
    pub installation: Option<InstallationLite>,
    pub label: Label,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestunlocked {
    pub action: PullRequestunlockedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestEvent {
    Variant0(PullRequestassigned),
    Variant1(PullRequestautoMergeDisabled),
    Variant2(PullRequestautoMergeEnabled),
    Variant3(PullRequestclosed),
    Variant4(PullRequestconvertedToDraft),
    Variant5(PullRequestedited),
    Variant6(PullRequestlabeled),
    Variant7(PullRequestlocked),
    Variant8(PullRequestopened),
    Variant9(PullRequestreadyForReview),
    Variant10(PullRequestreopened),
    Variant11(PullRequestreviewRequestRemoved),
    Variant12(PullRequestreviewRequested),
    Variant13(PullRequestsynchronize),
    Variant14(PullRequestunassigned),
    Variant15(PullRequestunlabeled),
    Variant16(PullRequestunlocked),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewdismissed {
    pub action: PullRequestReviewdismissedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub pull_request: SimplePullRequest,
    pub repository: Repository,
    pub review: PullRequestReviewdismissedReview,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewedited {
    pub action: PullRequestRevieweditedAction,
    pub changes: PullRequestRevieweditedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub pull_request: SimplePullRequest,
    pub repository: Repository,
    pub review: PullRequestRevieweditedReview,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewsubmitted {
    pub action: PullRequestReviewsubmittedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub pull_request: SimplePullRequest,
    pub repository: Repository,
    pub review: PullRequestReviewsubmittedReview,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentcreated {
    pub action: PullRequestReviewCommentcreatedAction,
    pub comment: PullRequestReviewComment,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub pull_request: PullRequestReviewCommentcreatedPullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentdeleted {
    pub action: PullRequestReviewCommentdeletedAction,
    pub comment: PullRequestReviewComment,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub pull_request: PullRequestReviewCommentdeletedPullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentedited {
    pub action: PullRequestReviewCommenteditedAction,
    pub changes: PullRequestReviewCommenteditedChanges,
    pub comment: PullRequestReviewComment,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub pull_request: PullRequestReviewCommenteditedPullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestReviewCommentEvent {
    Variant0(PullRequestReviewCommentcreated),
    Variant1(PullRequestReviewCommentdeleted),
    Variant2(PullRequestReviewCommentedited),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestReviewEvent {
    Variant0(PullRequestReviewdismissed),
    Variant1(PullRequestReviewedited),
    Variant2(PullRequestReviewsubmitted),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Pushevent {
    #[doc = "The SHA of the most recent commit on `ref` after the push."]
    pub after: String,
    pub base_ref: Option<String>,
    #[doc = "The SHA of the most recent commit on `ref` before the push."]
    pub before: String,
    #[doc = "An array of commit objects describing the pushed commits."]
    pub commits: Vec<Commit>,
    pub compare: String,
    pub created: bool,
    pub deleted: bool,
    pub forced: bool,
    pub head_commit: PusheventHeadCommit,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub pusher: Committer,
    pub repository: Repository,
    #[doc = "The full git ref that was pushed. Example: `refs/heads/main`."]
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Release {
    pub assets: Vec<ReleaseAsset>,
    pub assets_url: String,
    pub author: User,
    pub body: String,
    pub created_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    #[doc = "Wether the release is a draft or published"]
    pub draft: bool,
    pub html_url: String,
    pub id: u64,
    pub name: String,
    pub node_id: String,
    #[doc = "Whether the release is identified as a prerelease or a full release."]
    pub prerelease: bool,
    pub published_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    #[doc = "The name of the tag."]
    pub tag_name: String,
    pub tarball_url: Option<String>,
    #[doc = "Specifies the commitish value that determines where the Git tag is created from."]
    pub target_commitish: String,
    pub upload_url: String,
    pub url: String,
    pub zipball_url: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Releasecreated {
    pub action: ReleasecreatedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub release: Release,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Releasedeleted {
    pub action: ReleasedeletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub release: Release,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Releaseedited {
    pub action: ReleaseeditedAction,
    pub changes: ReleaseeditedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub release: Release,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Releaseprereleased {
    pub action: ReleaseprereleasedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub release: ReleaseprereleasedRelease,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Releasepublished {
    pub action: ReleasepublishedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub release: ReleasepublishedRelease,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Releasereleased {
    pub action: ReleasereleasedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub release: Release,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Releaseunpublished {
    pub action: ReleaseunpublishedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub release: ReleaseunpublishedRelease,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleaseAsset {
    pub browser_download_url: String,
    pub content_type: String,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub download_count: u64,
    pub id: u64,
    pub label: Option<String>,
    #[doc = "The file name of the asset."]
    pub name: String,
    pub node_id: String,
    pub size: u64,
    #[doc = "State of the release asset."]
    pub state: ReleaseAssetState,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub uploader: Option<User>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum ReleaseEvent {
    Variant0(Releasecreated),
    Variant1(Releasedeleted),
    Variant2(Releaseedited),
    Variant3(Releaseprereleased),
    Variant4(Releasepublished),
    Variant5(Releasereleased),
    Variant6(Releaseunpublished),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepoRef {
    pub id: u64,
    pub name: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Repository {
    #[doc = "Whether to allow auto-merge for pull requests."]
    pub allow_auto_merge: Option<bool>,
    #[doc = "Whether to allow private forks"]
    pub allow_forking: Option<bool>,
    #[doc = "Whether to allow merge commits for pull requests."]
    pub allow_merge_commit: Option<bool>,
    #[doc = "Whether to allow rebase merges for pull requests."]
    pub allow_rebase_merge: Option<bool>,
    #[doc = "Whether to allow squash merges for pull requests."]
    pub allow_squash_merge: Option<bool>,
    pub archive_url: String,
    #[doc = "Whether the repository is archived."]
    pub archived: bool,
    pub assignees_url: String,
    pub blobs_url: String,
    pub branches_url: String,
    pub clone_url: String,
    pub collaborators_url: String,
    pub comments_url: String,
    pub commits_url: String,
    pub compare_url: String,
    pub contents_url: String,
    pub contributors_url: String,
    pub created_at: RepositoryCreatedAt,
    #[doc = "The default branch of the repository."]
    pub default_branch: String,
    #[doc = "Whether to delete head branches when pull requests are merged"]
    pub delete_branch_on_merge: Option<bool>,
    pub deployments_url: String,
    pub description: Option<String>,
    #[doc = "Returns whether or not this repository is disabled."]
    pub disabled: Option<bool>,
    pub downloads_url: String,
    pub events_url: String,
    pub fork: bool,
    pub forks: u64,
    pub forks_count: u64,
    pub forks_url: String,
    pub full_name: String,
    pub git_commits_url: String,
    pub git_refs_url: String,
    pub git_tags_url: String,
    pub git_url: String,
    #[doc = "Whether downloads are enabled."]
    pub has_downloads: bool,
    #[doc = "Whether issues are enabled."]
    pub has_issues: bool,
    pub has_pages: bool,
    #[doc = "Whether projects are enabled."]
    pub has_projects: bool,
    #[doc = "Whether the wiki is enabled."]
    pub has_wiki: bool,
    pub homepage: Option<String>,
    pub hooks_url: String,
    pub html_url: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    pub issue_comment_url: String,
    pub issue_events_url: String,
    pub issues_url: String,
    pub keys_url: String,
    pub labels_url: String,
    pub language: Option<String>,
    pub languages_url: String,
    pub license: RepositoryLicense,
    pub master_branch: Option<String>,
    pub merges_url: String,
    pub milestones_url: String,
    pub mirror_url: Option<String>,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    pub notifications_url: String,
    pub open_issues: u64,
    pub open_issues_count: u64,
    pub organization: Option<String>,
    pub owner: User,
    pub permissions: Option<RepositoryPermissions>,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
    pub public: Option<bool>,
    pub pulls_url: String,
    pub pushed_at: RepositoryPushedAt,
    pub releases_url: String,
    pub size: u64,
    pub ssh_url: String,
    pub stargazers: Option<u64>,
    pub stargazers_count: u64,
    pub stargazers_url: String,
    pub statuses_url: String,
    pub subscribers_url: String,
    pub subscription_url: String,
    pub svn_url: String,
    pub tags_url: String,
    pub teams_url: String,
    pub trees_url: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
    pub watchers: u64,
    pub watchers_count: u64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Repositoryarchived {
    pub action: RepositoryarchivedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: RepositoryarchivedRepository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Repositorycreated {
    pub action: RepositorycreatedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Repositorydeleted {
    pub action: RepositorydeletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Repositoryedited {
    pub action: RepositoryeditedAction,
    pub changes: RepositoryeditedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Repositoryprivatized {
    pub action: RepositoryprivatizedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: RepositoryprivatizedRepository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Repositorypublicized {
    pub action: RepositorypublicizedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: RepositorypublicizedRepository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Repositoryrenamed {
    pub action: RepositoryrenamedAction,
    pub changes: RepositoryrenamedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Repositorytransferred {
    pub action: RepositorytransferredAction,
    pub changes: RepositorytransferredChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Repositoryunarchived {
    pub action: RepositoryunarchivedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: RepositoryunarchivedRepository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryLite {
    pub archive_url: String,
    pub assignees_url: String,
    pub blobs_url: String,
    pub branches_url: String,
    pub collaborators_url: String,
    pub comments_url: String,
    pub commits_url: String,
    pub compare_url: String,
    pub contents_url: String,
    pub contributors_url: String,
    pub deployments_url: String,
    pub description: Option<String>,
    pub downloads_url: String,
    pub events_url: String,
    pub fork: bool,
    pub forks_url: String,
    pub full_name: String,
    pub git_commits_url: String,
    pub git_refs_url: String,
    pub git_tags_url: String,
    pub hooks_url: String,
    pub html_url: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    pub issue_comment_url: String,
    pub issue_events_url: String,
    pub issues_url: String,
    pub keys_url: String,
    pub labels_url: String,
    pub languages_url: String,
    pub merges_url: String,
    pub milestones_url: String,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    pub notifications_url: String,
    pub owner: User,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
    pub pulls_url: String,
    pub releases_url: String,
    pub stargazers_url: String,
    pub statuses_url: String,
    pub subscribers_url: String,
    pub subscription_url: String,
    pub tags_url: String,
    pub teams_url: String,
    pub trees_url: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryDispatchonDemandTest {
    pub action: RepositoryDispatchonDemandTestAction,
    pub branch: String,
    pub client_payload: serde_json::Value,
    pub installation: InstallationLite,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
struct RepositoryDispatchEvent(RepositoryDispatchonDemandTest);
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum RepositoryEvent {
    Variant0(Repositoryarchived),
    Variant1(Repositorycreated),
    Variant2(Repositorydeleted),
    Variant3(Repositoryedited),
    Variant4(Repositoryprivatized),
    Variant5(Repositorypublicized),
    Variant6(Repositoryrenamed),
    Variant7(Repositorytransferred),
    Variant8(Repositoryunarchived),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryImportevent {
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    pub status: RepositoryImporteventStatus,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryVulnerabilityAlertcreate {
    pub action: RepositoryVulnerabilityAlertcreateAction,
    pub alert: RepositoryVulnerabilityAlertcreateAlert,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryVulnerabilityAlertdismiss {
    pub action: RepositoryVulnerabilityAlertdismissAction,
    pub alert: RepositoryVulnerabilityAlertdismissAlert,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryVulnerabilityAlertresolve {
    pub action: RepositoryVulnerabilityAlertresolveAction,
    pub alert: RepositoryVulnerabilityAlertresolveAlert,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum RepositoryVulnerabilityAlertEvent {
    Variant0(RepositoryVulnerabilityAlertcreate),
    Variant1(RepositoryVulnerabilityAlertdismiss),
    Variant2(RepositoryVulnerabilityAlertresolve),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecretScanningAlertcreated {
    pub action: SecretScanningAlertcreatedAction,
    pub alert: SecretScanningAlertcreatedAlert,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecretScanningAlertreopened {
    pub action: SecretScanningAlertreopenedAction,
    pub alert: SecretScanningAlertreopenedAlert,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecretScanningAlertresolved {
    pub action: SecretScanningAlertresolvedAction,
    pub alert: SecretScanningAlertresolvedAlert,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum SecretScanningAlertEvent {
    Variant0(SecretScanningAlertcreated),
    Variant1(SecretScanningAlertreopened),
    Variant2(SecretScanningAlertresolved),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryperformed {
    pub action: SecurityAdvisoryperformedAction,
    pub security_advisory: SecurityAdvisoryperformedSecurityAdvisory,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisorypublished {
    pub action: SecurityAdvisorypublishedAction,
    pub security_advisory: SecurityAdvisorypublishedSecurityAdvisory,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryupdated {
    pub action: SecurityAdvisoryupdatedAction,
    pub security_advisory: SecurityAdvisoryupdatedSecurityAdvisory,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisorywithdrawn {
    pub action: SecurityAdvisorywithdrawnAction,
    pub security_advisory: SecurityAdvisorywithdrawnSecurityAdvisory,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum SecurityAdvisoryEvent {
    Variant0(SecurityAdvisoryperformed),
    Variant1(SecurityAdvisorypublished),
    Variant2(SecurityAdvisoryupdated),
    Variant3(SecurityAdvisorywithdrawn),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SimplePullRequest {
    pub active_lock_reason: Option<SimplePullRequestActiveLockReason>,
    pub assignee: SimplePullRequestAssignee,
    pub assignees: Vec<User>,
    pub author_association: AuthorAssociation,
    pub auto_merge: (),
    pub base: SimplePullRequestBase,
    pub body: String,
    pub closed_at: Option<String>,
    pub comments_url: String,
    pub commits_url: String,
    pub created_at: String,
    pub diff_url: String,
    pub draft: bool,
    pub head: SimplePullRequestHead,
    pub html_url: String,
    pub id: u64,
    pub issue_url: String,
    pub labels: Vec<Label>,
    #[serde(rename = "_links")]
    pub links: SimplePullRequestLinks,
    pub locked: bool,
    pub merge_commit_sha: Option<String>,
    pub merged_at: Option<String>,
    pub milestone: SimplePullRequestMilestone,
    pub node_id: String,
    pub number: u64,
    pub patch_url: String,
    pub requested_reviewers: Vec<SimplePullRequestRequestedReviewersItem>,
    pub requested_teams: Vec<Team>,
    pub review_comment_url: String,
    pub review_comments_url: String,
    pub state: SimplePullRequestState,
    pub statuses_url: String,
    pub title: String,
    pub updated_at: String,
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Sponsorshipcancelled {
    pub action: SponsorshipcancelledAction,
    pub sender: User,
    pub sponsorship: SponsorshipcancelledSponsorship,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Sponsorshipcreated {
    pub action: SponsorshipcreatedAction,
    pub sender: User,
    pub sponsorship: SponsorshipcreatedSponsorship,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Sponsorshipedited {
    pub action: SponsorshipeditedAction,
    pub changes: SponsorshipeditedChanges,
    pub sender: User,
    pub sponsorship: SponsorshipeditedSponsorship,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshippendingCancellation {
    pub action: SponsorshippendingCancellationAction,
    #[doc = "The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect."]
    pub effective_date: Option<String>,
    pub sender: User,
    pub sponsorship: SponsorshippendingCancellationSponsorship,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshippendingTierChange {
    pub action: SponsorshippendingTierChangeAction,
    pub changes: SponsorshippendingTierChangeChanges,
    #[doc = "The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect."]
    pub effective_date: Option<String>,
    pub sender: User,
    pub sponsorship: SponsorshippendingTierChangeSponsorship,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshiptierChanged {
    pub action: SponsorshiptierChangedAction,
    pub changes: SponsorshiptierChangedChanges,
    pub sender: User,
    pub sponsorship: SponsorshiptierChangedSponsorship,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipTier {
    pub created_at: String,
    pub description: String,
    pub is_custom_ammount: bool,
    pub is_one_time: bool,
    pub monthly_price_in_cents: u64,
    pub monthly_price_in_dollars: u64,
    pub name: String,
    pub node_id: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum SponsorshipEvent {
    Variant0(Sponsorshipcancelled),
    Variant1(Sponsorshipcreated),
    Variant2(Sponsorshipedited),
    Variant3(SponsorshippendingCancellation),
    Variant4(SponsorshippendingTierChange),
    Variant5(SponsorshiptierChanged),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Starcreated {
    pub action: StarcreatedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    #[doc = "The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action."]
    pub starred_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Stardeleted {
    pub action: StardeletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    #[doc = "The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action."]
    pub starred_at: (),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum StarEvent {
    Variant0(Starcreated),
    Variant1(Stardeleted),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Statusevent {
    pub avatar_url: Option<String>,
    #[doc = "An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches."]
    pub branches: Vec<StatuseventBranchesItem>,
    pub commit: StatuseventCommit,
    pub context: String,
    pub created_at: String,
    #[doc = "The optional human-readable description added to the status."]
    pub description: Option<String>,
    #[doc = "The unique identifier of the status."]
    pub id: u64,
    pub installation: Option<InstallationLite>,
    pub name: String,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    #[doc = "The Commit SHA."]
    pub sha: String,
    #[doc = "The new state. Can be `pending`, `success`, `failure`, or `error`."]
    pub state: StatuseventState,
    #[doc = "The optional link added to the status."]
    pub target_url: Option<String>,
    pub updated_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Team {
    #[doc = "Description of the team"]
    pub description: Option<String>,
    pub html_url: String,
    #[doc = "Unique identifier of the team"]
    pub id: u64,
    pub members_url: String,
    #[doc = "Name of the team"]
    pub name: String,
    pub node_id: String,
    pub parent: Option<TeamParent>,
    #[doc = "Permission that the team will have for its repositories"]
    pub permission: String,
    pub privacy: TeamPrivacy,
    pub repositories_url: String,
    pub slug: String,
    #[doc = "URL for the team"]
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeamaddedToRepository {
    pub action: TeamaddedToRepositoryAction,
    pub installation: Option<InstallationLite>,
    pub organization: Organization,
    pub repository: Option<Repository>,
    pub sender: User,
    pub team: Team,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Teamcreated {
    pub action: TeamcreatedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Organization,
    pub repository: Option<Repository>,
    pub sender: User,
    pub team: Team,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Teamdeleted {
    pub action: TeamdeletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Organization,
    pub repository: Option<Repository>,
    pub sender: User,
    pub team: Team,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Teamedited {
    pub action: TeameditedAction,
    pub changes: TeameditedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Organization,
    pub repository: Option<Repository>,
    pub sender: User,
    pub team: Team,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeamremovedFromRepository {
    pub action: TeamremovedFromRepositoryAction,
    pub installation: Option<InstallationLite>,
    pub organization: Organization,
    pub repository: Option<Repository>,
    pub sender: User,
    pub team: Team,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeamAddevent {
    pub installation: Option<InstallationLite>,
    pub organization: Organization,
    pub repository: Repository,
    pub sender: User,
    pub team: Team,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum TeamEvent {
    Variant0(TeamaddedToRepository),
    Variant1(Teamcreated),
    Variant2(Teamdeleted),
    Variant3(Teamedited),
    Variant4(TeamremovedFromRepository),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct User {
    pub avatar_url: String,
    pub email: Option<String>,
    pub events_url: String,
    pub followers_url: String,
    pub following_url: String,
    pub gists_url: String,
    pub gravatar_id: String,
    pub html_url: String,
    pub id: u64,
    pub login: String,
    pub name: Option<String>,
    pub node_id: String,
    pub organizations_url: String,
    pub received_events_url: String,
    pub repos_url: String,
    pub site_admin: bool,
    pub starred_url: String,
    pub subscriptions_url: String,
    #[serde(rename = "type")]
    pub ttype: UserType,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Watchstarted {
    pub action: WatchstartedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
struct WatchEvent(Watchstarted);
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum WebhookEvents {
    Variant0(Vec<WebhookEventsVariant0Item>),
    Variant1(Vec<String>),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Workflow {
    pub badge_url: String,
    pub created_at: String,
    pub html_url: String,
    pub id: u64,
    pub name: String,
    pub node_id: String,
    pub path: String,
    pub state: String,
    pub updated_at: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowJob {
    pub check_run_url: String,
    pub completed_at: Option<String>,
    pub conclusion: Option<WorkflowJobConclusion>,
    pub head_sha: String,
    pub html_url: String,
    pub id: u64,
    pub labels: Vec<String>,
    pub name: String,
    pub node_id: String,
    pub run_id: f64,
    pub run_url: String,
    pub started_at: String,
    pub status: WorkflowJobStatus,
    pub steps: Vec<WorkflowStep>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowRun {
    pub artifacts_url: String,
    pub cancel_url: String,
    pub check_suite_id: u64,
    pub check_suite_node_id: String,
    pub check_suite_url: String,
    pub conclusion: Option<WorkflowRunConclusion>,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub event: String,
    pub head_branch: String,
    pub head_commit: CommitSimple,
    pub head_repository: RepositoryLite,
    pub head_sha: String,
    pub html_url: String,
    pub id: u64,
    pub jobs_url: String,
    pub logs_url: String,
    pub name: String,
    pub node_id: String,
    pub pull_requests: Vec<WorkflowRunPullRequestsItem>,
    pub repository: RepositoryLite,
    pub rerun_url: String,
    pub run_number: u64,
    pub status: WorkflowRunStatus,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
    pub workflow_id: u64,
    pub workflow_url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum WorkflowStep {
    Variant0(WorkflowStepInProgress),
    Variant1(WorkflowStepCompleted),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowStepCompleted {
    pub completed_at: String,
    pub conclusion: WorkflowStepCompletedConclusion,
    pub name: String,
    pub number: u64,
    pub started_at: String,
    pub status: WorkflowStepCompletedStatus,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowStepInProgress {
    pub completed_at: (),
    pub conclusion: (),
    pub name: String,
    pub number: u64,
    pub started_at: String,
    pub status: WorkflowStepInProgressStatus,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowDispatchevent {
    pub inputs: WorkflowDispatcheventInputs,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: User,
    pub workflow: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowJobcompleted {
    pub action: WorkflowJobcompletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    pub workflow_job: WorkflowJobcompletedWorkflowJob,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowJobqueued {
    pub action: WorkflowJobqueuedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    pub workflow_job: WorkflowJobqueuedWorkflowJob,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowJobstarted {
    pub action: WorkflowJobstartedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    pub workflow_job: WorkflowJobstartedWorkflowJob,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum WorkflowJobEvent {
    Variant0(WorkflowJobcompleted),
    Variant1(WorkflowJobqueued),
    Variant2(WorkflowJobstarted),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowRuncompleted {
    pub action: WorkflowRuncompletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    pub workflow: Workflow,
    pub workflow_run: WorkflowRuncompletedWorkflowRun,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowRunrequested {
    pub action: WorkflowRunrequestedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    pub workflow: Workflow,
    pub workflow_run: WorkflowRun,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum WorkflowRunEvent {
    Variant0(WorkflowRuncompleted),
    Variant1(WorkflowRunrequested),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AlertInstanceLocation {
    pub end_column: Option<u64>,
    pub end_line: Option<u64>,
    pub path: Option<String>,
    pub start_column: Option<u64>,
    pub start_line: Option<u64>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AlertInstanceMessage {
    pub text: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AlertInstanceState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "dismissed")]
    Dismissed,
    #[serde(rename = "fixed")]
    Fixed,
}
impl ToString for AlertInstanceState {
    fn to_string(&self) -> String {
        match self {
            AlertInstanceState::Open => "open".to_string(),
            AlertInstanceState::Dismissed => "dismissed".to_string(),
            AlertInstanceState::Fixed => "fixed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppEventsItem {
    #[serde(rename = "check_run")]
    CheckRun,
    #[serde(rename = "check_suite")]
    CheckSuite,
    #[serde(rename = "code_scanning_alert")]
    CodeScanningAlert,
    #[serde(rename = "commit_comment")]
    CommitComment,
    #[serde(rename = "content_reference")]
    ContentReference,
    #[serde(rename = "create")]
    Create,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "deployment")]
    Deployment,
    #[serde(rename = "deployment_review")]
    DeploymentReview,
    #[serde(rename = "deployment_status")]
    DeploymentStatus,
    #[serde(rename = "deploy_key")]
    DeployKey,
    #[serde(rename = "discussion")]
    Discussion,
    #[serde(rename = "discussion_comment")]
    DiscussionComment,
    #[serde(rename = "fork")]
    Fork,
    #[serde(rename = "gollum")]
    Gollum,
    #[serde(rename = "issues")]
    Issues,
    #[serde(rename = "issue_comment")]
    IssueComment,
    #[serde(rename = "label")]
    Label,
    #[serde(rename = "member")]
    Member,
    #[serde(rename = "membership")]
    Membership,
    #[serde(rename = "milestone")]
    Milestone,
    #[serde(rename = "organization")]
    Organization,
    #[serde(rename = "org_block")]
    OrgBlock,
    #[serde(rename = "page_build")]
    PageBuild,
    #[serde(rename = "project")]
    Project,
    #[serde(rename = "project_card")]
    ProjectCard,
    #[serde(rename = "project_column")]
    ProjectColumn,
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "pull_request")]
    PullRequest,
    #[serde(rename = "pull_request_review")]
    PullRequestReview,
    #[serde(rename = "pull_request_review_comment")]
    PullRequestReviewComment,
    #[serde(rename = "push")]
    Push,
    #[serde(rename = "registry_package")]
    RegistryPackage,
    #[serde(rename = "release")]
    Release,
    #[serde(rename = "repository")]
    Repository,
    #[serde(rename = "repository_dispatch")]
    RepositoryDispatch,
    #[serde(rename = "secret_scanning_alert")]
    SecretScanningAlert,
    #[serde(rename = "star")]
    Star,
    #[serde(rename = "status")]
    Status,
    #[serde(rename = "team")]
    Team,
    #[serde(rename = "team_add")]
    TeamAdd,
    #[serde(rename = "watch")]
    Watch,
    #[serde(rename = "workflow_dispatch")]
    WorkflowDispatch,
    #[serde(rename = "workflow_run")]
    WorkflowRun,
}
impl ToString for AppEventsItem {
    fn to_string(&self) -> String {
        match self {
            AppEventsItem::CheckRun => "check_run".to_string(),
            AppEventsItem::CheckSuite => "check_suite".to_string(),
            AppEventsItem::CodeScanningAlert => "code_scanning_alert".to_string(),
            AppEventsItem::CommitComment => "commit_comment".to_string(),
            AppEventsItem::ContentReference => "content_reference".to_string(),
            AppEventsItem::Create => "create".to_string(),
            AppEventsItem::Delete => "delete".to_string(),
            AppEventsItem::Deployment => "deployment".to_string(),
            AppEventsItem::DeploymentReview => "deployment_review".to_string(),
            AppEventsItem::DeploymentStatus => "deployment_status".to_string(),
            AppEventsItem::DeployKey => "deploy_key".to_string(),
            AppEventsItem::Discussion => "discussion".to_string(),
            AppEventsItem::DiscussionComment => "discussion_comment".to_string(),
            AppEventsItem::Fork => "fork".to_string(),
            AppEventsItem::Gollum => "gollum".to_string(),
            AppEventsItem::Issues => "issues".to_string(),
            AppEventsItem::IssueComment => "issue_comment".to_string(),
            AppEventsItem::Label => "label".to_string(),
            AppEventsItem::Member => "member".to_string(),
            AppEventsItem::Membership => "membership".to_string(),
            AppEventsItem::Milestone => "milestone".to_string(),
            AppEventsItem::Organization => "organization".to_string(),
            AppEventsItem::OrgBlock => "org_block".to_string(),
            AppEventsItem::PageBuild => "page_build".to_string(),
            AppEventsItem::Project => "project".to_string(),
            AppEventsItem::ProjectCard => "project_card".to_string(),
            AppEventsItem::ProjectColumn => "project_column".to_string(),
            AppEventsItem::Public => "public".to_string(),
            AppEventsItem::PullRequest => "pull_request".to_string(),
            AppEventsItem::PullRequestReview => "pull_request_review".to_string(),
            AppEventsItem::PullRequestReviewComment => "pull_request_review_comment".to_string(),
            AppEventsItem::Push => "push".to_string(),
            AppEventsItem::RegistryPackage => "registry_package".to_string(),
            AppEventsItem::Release => "release".to_string(),
            AppEventsItem::Repository => "repository".to_string(),
            AppEventsItem::RepositoryDispatch => "repository_dispatch".to_string(),
            AppEventsItem::SecretScanningAlert => "secret_scanning_alert".to_string(),
            AppEventsItem::Star => "star".to_string(),
            AppEventsItem::Status => "status".to_string(),
            AppEventsItem::Team => "team".to_string(),
            AppEventsItem::TeamAdd => "team_add".to_string(),
            AppEventsItem::Watch => "watch".to_string(),
            AppEventsItem::WorkflowDispatch => "workflow_dispatch".to_string(),
            AppEventsItem::WorkflowRun => "workflow_run".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsActions {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsActions {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsActions::Read => "read".to_string(),
            AppPermissionsActions::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsAdministration {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsAdministration {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsAdministration::Read => "read".to_string(),
            AppPermissionsAdministration::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsChecks {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsChecks {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsChecks::Read => "read".to_string(),
            AppPermissionsChecks::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsContentReferences {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsContentReferences {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsContentReferences::Read => "read".to_string(),
            AppPermissionsContentReferences::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsContents {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsContents {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsContents::Read => "read".to_string(),
            AppPermissionsContents::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsDeployments {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsDeployments {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsDeployments::Read => "read".to_string(),
            AppPermissionsDeployments::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsDiscussions {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsDiscussions {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsDiscussions::Read => "read".to_string(),
            AppPermissionsDiscussions::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsEmails {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsEmails {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsEmails::Read => "read".to_string(),
            AppPermissionsEmails::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsEnvironments {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsEnvironments {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsEnvironments::Read => "read".to_string(),
            AppPermissionsEnvironments::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsIssues {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsIssues {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsIssues::Read => "read".to_string(),
            AppPermissionsIssues::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsMembers {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsMembers {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsMembers::Read => "read".to_string(),
            AppPermissionsMembers::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsMetadata {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsMetadata {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsMetadata::Read => "read".to_string(),
            AppPermissionsMetadata::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsOrganizationAdministration {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsOrganizationAdministration {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsOrganizationAdministration::Read => "read".to_string(),
            AppPermissionsOrganizationAdministration::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsOrganizationHooks {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsOrganizationHooks {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsOrganizationHooks::Read => "read".to_string(),
            AppPermissionsOrganizationHooks::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsOrganizationPackages {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsOrganizationPackages {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsOrganizationPackages::Read => "read".to_string(),
            AppPermissionsOrganizationPackages::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsOrganizationPlan {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsOrganizationPlan {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsOrganizationPlan::Read => "read".to_string(),
            AppPermissionsOrganizationPlan::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsOrganizationProjects {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsOrganizationProjects {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsOrganizationProjects::Read => "read".to_string(),
            AppPermissionsOrganizationProjects::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsOrganizationSecrets {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsOrganizationSecrets {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsOrganizationSecrets::Read => "read".to_string(),
            AppPermissionsOrganizationSecrets::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsOrganizationSelfHostedRunners {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsOrganizationSelfHostedRunners {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsOrganizationSelfHostedRunners::Read => "read".to_string(),
            AppPermissionsOrganizationSelfHostedRunners::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsOrganizationUserBlocking {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsOrganizationUserBlocking {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsOrganizationUserBlocking::Read => "read".to_string(),
            AppPermissionsOrganizationUserBlocking::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsPackages {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsPackages {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsPackages::Read => "read".to_string(),
            AppPermissionsPackages::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsPages {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsPages {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsPages::Read => "read".to_string(),
            AppPermissionsPages::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsPullRequests {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsPullRequests {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsPullRequests::Read => "read".to_string(),
            AppPermissionsPullRequests::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsRepositoryHooks {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsRepositoryHooks {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsRepositoryHooks::Read => "read".to_string(),
            AppPermissionsRepositoryHooks::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsRepositoryProjects {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsRepositoryProjects {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsRepositoryProjects::Read => "read".to_string(),
            AppPermissionsRepositoryProjects::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsSecretScanningAlerts {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsSecretScanningAlerts {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsSecretScanningAlerts::Read => "read".to_string(),
            AppPermissionsSecretScanningAlerts::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsSecrets {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsSecrets {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsSecrets::Read => "read".to_string(),
            AppPermissionsSecrets::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsSecurityEvents {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsSecurityEvents {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsSecurityEvents::Read => "read".to_string(),
            AppPermissionsSecurityEvents::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsSecurityScanningAlert {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsSecurityScanningAlert {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsSecurityScanningAlert::Read => "read".to_string(),
            AppPermissionsSecurityScanningAlert::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsSingleFile {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsSingleFile {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsSingleFile::Read => "read".to_string(),
            AppPermissionsSingleFile::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsStatuses {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsStatuses {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsStatuses::Read => "read".to_string(),
            AppPermissionsStatuses::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsTeamDiscussions {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsTeamDiscussions {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsTeamDiscussions::Read => "read".to_string(),
            AppPermissionsTeamDiscussions::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsVulnerabilityAlerts {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsVulnerabilityAlerts {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsVulnerabilityAlerts::Read => "read".to_string(),
            AppPermissionsVulnerabilityAlerts::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsWorkflows {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsWorkflows {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsWorkflows::Read => "read".to_string(),
            AppPermissionsWorkflows::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AppPermissions {
    pub actions: Option<AppPermissionsActions>,
    pub administration: Option<AppPermissionsAdministration>,
    pub checks: Option<AppPermissionsChecks>,
    pub content_references: Option<AppPermissionsContentReferences>,
    pub contents: Option<AppPermissionsContents>,
    pub deployments: Option<AppPermissionsDeployments>,
    pub discussions: Option<AppPermissionsDiscussions>,
    pub emails: Option<AppPermissionsEmails>,
    pub environments: Option<AppPermissionsEnvironments>,
    pub issues: Option<AppPermissionsIssues>,
    pub members: Option<AppPermissionsMembers>,
    pub metadata: Option<AppPermissionsMetadata>,
    pub organization_administration: Option<AppPermissionsOrganizationAdministration>,
    pub organization_hooks: Option<AppPermissionsOrganizationHooks>,
    pub organization_packages: Option<AppPermissionsOrganizationPackages>,
    pub organization_plan: Option<AppPermissionsOrganizationPlan>,
    pub organization_projects: Option<AppPermissionsOrganizationProjects>,
    pub organization_secrets: Option<AppPermissionsOrganizationSecrets>,
    pub organization_self_hosted_runners: Option<AppPermissionsOrganizationSelfHostedRunners>,
    pub organization_user_blocking: Option<AppPermissionsOrganizationUserBlocking>,
    pub packages: Option<AppPermissionsPackages>,
    pub pages: Option<AppPermissionsPages>,
    pub pull_requests: Option<AppPermissionsPullRequests>,
    pub repository_hooks: Option<AppPermissionsRepositoryHooks>,
    pub repository_projects: Option<AppPermissionsRepositoryProjects>,
    pub secret_scanning_alerts: Option<AppPermissionsSecretScanningAlerts>,
    pub secrets: Option<AppPermissionsSecrets>,
    pub security_events: Option<AppPermissionsSecurityEvents>,
    pub security_scanning_alert: Option<AppPermissionsSecurityScanningAlert>,
    pub single_file: Option<AppPermissionsSingleFile>,
    pub statuses: Option<AppPermissionsStatuses>,
    pub team_discussions: Option<AppPermissionsTeamDiscussions>,
    pub vulnerability_alerts: Option<AppPermissionsVulnerabilityAlerts>,
    pub workflows: Option<AppPermissionsWorkflows>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleAllowDeletionsEnforcementLevel {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "everyone")]
    Everyone,
}
impl ToString for BranchProtectionRuleAllowDeletionsEnforcementLevel {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleAllowDeletionsEnforcementLevel::Off => "off".to_string(),
            BranchProtectionRuleAllowDeletionsEnforcementLevel::NonAdmins => {
                "non_admins".to_string()
            }
            BranchProtectionRuleAllowDeletionsEnforcementLevel::Everyone => "everyone".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleAllowForcePushesEnforcementLevel {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "everyone")]
    Everyone,
}
impl ToString for BranchProtectionRuleAllowForcePushesEnforcementLevel {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleAllowForcePushesEnforcementLevel::Off => "off".to_string(),
            BranchProtectionRuleAllowForcePushesEnforcementLevel::NonAdmins => {
                "non_admins".to_string()
            }
            BranchProtectionRuleAllowForcePushesEnforcementLevel::Everyone => {
                "everyone".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleLinearHistoryRequirementEnforcementLevel {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "everyone")]
    Everyone,
}
impl ToString for BranchProtectionRuleLinearHistoryRequirementEnforcementLevel {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleLinearHistoryRequirementEnforcementLevel::Off => "off".to_string(),
            BranchProtectionRuleLinearHistoryRequirementEnforcementLevel::NonAdmins => {
                "non_admins".to_string()
            }
            BranchProtectionRuleLinearHistoryRequirementEnforcementLevel::Everyone => {
                "everyone".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleMergeQueueEnforcementLevel {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "everyone")]
    Everyone,
}
impl ToString for BranchProtectionRuleMergeQueueEnforcementLevel {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleMergeQueueEnforcementLevel::Off => "off".to_string(),
            BranchProtectionRuleMergeQueueEnforcementLevel::NonAdmins => "non_admins".to_string(),
            BranchProtectionRuleMergeQueueEnforcementLevel::Everyone => "everyone".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRulePullRequestReviewsEnforcementLevel {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "everyone")]
    Everyone,
}
impl ToString for BranchProtectionRulePullRequestReviewsEnforcementLevel {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRulePullRequestReviewsEnforcementLevel::Off => "off".to_string(),
            BranchProtectionRulePullRequestReviewsEnforcementLevel::NonAdmins => {
                "non_admins".to_string()
            }
            BranchProtectionRulePullRequestReviewsEnforcementLevel::Everyone => {
                "everyone".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleRequiredConversationResolutionLevel {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "everyone")]
    Everyone,
}
impl ToString for BranchProtectionRuleRequiredConversationResolutionLevel {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleRequiredConversationResolutionLevel::Off => "off".to_string(),
            BranchProtectionRuleRequiredConversationResolutionLevel::NonAdmins => {
                "non_admins".to_string()
            }
            BranchProtectionRuleRequiredConversationResolutionLevel::Everyone => {
                "everyone".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleRequiredDeploymentsEnforcementLevel {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "everyone")]
    Everyone,
}
impl ToString for BranchProtectionRuleRequiredDeploymentsEnforcementLevel {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleRequiredDeploymentsEnforcementLevel::Off => "off".to_string(),
            BranchProtectionRuleRequiredDeploymentsEnforcementLevel::NonAdmins => {
                "non_admins".to_string()
            }
            BranchProtectionRuleRequiredDeploymentsEnforcementLevel::Everyone => {
                "everyone".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleRequiredStatusChecksEnforcementLevel {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "everyone")]
    Everyone,
}
impl ToString for BranchProtectionRuleRequiredStatusChecksEnforcementLevel {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleRequiredStatusChecksEnforcementLevel::Off => "off".to_string(),
            BranchProtectionRuleRequiredStatusChecksEnforcementLevel::NonAdmins => {
                "non_admins".to_string()
            }
            BranchProtectionRuleRequiredStatusChecksEnforcementLevel::Everyone => {
                "everyone".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleSignatureRequirementEnforcementLevel {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "everyone")]
    Everyone,
}
impl ToString for BranchProtectionRuleSignatureRequirementEnforcementLevel {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleSignatureRequirementEnforcementLevel::Off => "off".to_string(),
            BranchProtectionRuleSignatureRequirementEnforcementLevel::NonAdmins => {
                "non_admins".to_string()
            }
            BranchProtectionRuleSignatureRequirementEnforcementLevel::Everyone => {
                "everyone".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRulecreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for BranchProtectionRulecreatedAction {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRulecreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuledeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for BranchProtectionRuledeletedAction {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuledeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleeditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for BranchProtectionRuleeditedAction {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleeditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BranchProtectionRuleeditedChangesAuthorizedActorNames {
    pub from: Vec<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BranchProtectionRuleeditedChangesAuthorizedActorsOnly {
    pub from: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BranchProtectionRuleeditedChanges {
    pub authorized_actor_names: Option<BranchProtectionRuleeditedChangesAuthorizedActorNames>,
    pub authorized_actors_only: Option<BranchProtectionRuleeditedChangesAuthorizedActorsOnly>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunPullRequestBase {
    pub repo: RepoRef,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunPullRequestHead {
    pub repo: RepoRef,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRuncompletedAction {
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for CheckRuncompletedAction {
    fn to_string(&self) -> String {
        match self {
            CheckRuncompletedAction::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRuncompletedCheckRunCheckSuiteConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
}
impl ToString for CheckRuncompletedCheckRunCheckSuiteConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckRuncompletedCheckRunCheckSuiteConclusion::Success => "success".to_string(),
            CheckRuncompletedCheckRunCheckSuiteConclusion::Failure => "failure".to_string(),
            CheckRuncompletedCheckRunCheckSuiteConclusion::Neutral => "neutral".to_string(),
            CheckRuncompletedCheckRunCheckSuiteConclusion::Cancelled => "cancelled".to_string(),
            CheckRuncompletedCheckRunCheckSuiteConclusion::TimedOut => "timed_out".to_string(),
            CheckRuncompletedCheckRunCheckSuiteConclusion::ActionRequired => {
                "action_required".to_string()
            }
            CheckRuncompletedCheckRunCheckSuiteConclusion::Stale => "stale".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRuncompletedCheckRunCheckSuiteStatus {
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "queued")]
    Queued,
}
impl ToString for CheckRuncompletedCheckRunCheckSuiteStatus {
    fn to_string(&self) -> String {
        match self {
            CheckRuncompletedCheckRunCheckSuiteStatus::InProgress => "in_progress".to_string(),
            CheckRuncompletedCheckRunCheckSuiteStatus::Completed => "completed".to_string(),
            CheckRuncompletedCheckRunCheckSuiteStatus::Queued => "queued".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRuncompletedCheckRunCheckSuite {
    pub after: Option<String>,
    pub app: App,
    pub before: Option<String>,
    pub conclusion: Option<CheckRuncompletedCheckRunCheckSuiteConclusion>,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub deployment: Option<CheckRunDeployment>,
    pub head_branch: Option<String>,
    #[doc = "The SHA of the head commit that is being checked."]
    pub head_sha: String,
    #[doc = "The id of the check suite that this check run is part of."]
    pub id: u64,
    pub node_id: Option<String>,
    #[doc = "An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty."]
    pub pull_requests: Vec<CheckRunPullRequest>,
    pub status: CheckRuncompletedCheckRunCheckSuiteStatus,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRuncompletedCheckRunConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
    #[serde(rename = "skipped")]
    Skipped,
}
impl ToString for CheckRuncompletedCheckRunConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckRuncompletedCheckRunConclusion::Success => "success".to_string(),
            CheckRuncompletedCheckRunConclusion::Failure => "failure".to_string(),
            CheckRuncompletedCheckRunConclusion::Neutral => "neutral".to_string(),
            CheckRuncompletedCheckRunConclusion::Cancelled => "cancelled".to_string(),
            CheckRuncompletedCheckRunConclusion::TimedOut => "timed_out".to_string(),
            CheckRuncompletedCheckRunConclusion::ActionRequired => "action_required".to_string(),
            CheckRuncompletedCheckRunConclusion::Stale => "stale".to_string(),
            CheckRuncompletedCheckRunConclusion::Skipped => "skipped".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRuncompletedCheckRunOutput {
    pub annotations_count: u64,
    pub annotations_url: String,
    pub summary: Option<String>,
    pub text: Option<String>,
    pub title: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRuncompletedCheckRunStatus {
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for CheckRuncompletedCheckRunStatus {
    fn to_string(&self) -> String {
        match self {
            CheckRuncompletedCheckRunStatus::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRuncompletedCheckRun {
    pub app: App,
    pub check_suite: CheckRuncompletedCheckRunCheckSuite,
    #[doc = "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub completed_at: String,
    #[doc = "The result of the completed check run. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed."]
    pub conclusion: Option<CheckRuncompletedCheckRunConclusion>,
    pub details_url: Option<String>,
    pub external_id: String,
    #[doc = "The SHA of the commit that is being checked."]
    pub head_sha: String,
    pub html_url: String,
    #[doc = "The id of the check."]
    pub id: u64,
    #[doc = "The name of the check run."]
    pub name: String,
    pub node_id: Option<String>,
    pub output: CheckRuncompletedCheckRunOutput,
    pub pull_requests: Vec<CheckRunPullRequest>,
    #[doc = "The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub started_at: String,
    #[doc = "The current status of the check run. Can be `queued`, `in_progress`, or `completed`."]
    pub status: CheckRuncompletedCheckRunStatus,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRuncompletedRequestedAction {
    #[doc = "The integrator reference of the action requested by the user."]
    pub identifier: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRuncreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for CheckRuncreatedAction {
    fn to_string(&self) -> String {
        match self {
            CheckRuncreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRuncreatedCheckRunCheckSuiteConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
}
impl ToString for CheckRuncreatedCheckRunCheckSuiteConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckRuncreatedCheckRunCheckSuiteConclusion::Success => "success".to_string(),
            CheckRuncreatedCheckRunCheckSuiteConclusion::Failure => "failure".to_string(),
            CheckRuncreatedCheckRunCheckSuiteConclusion::Neutral => "neutral".to_string(),
            CheckRuncreatedCheckRunCheckSuiteConclusion::Cancelled => "cancelled".to_string(),
            CheckRuncreatedCheckRunCheckSuiteConclusion::TimedOut => "timed_out".to_string(),
            CheckRuncreatedCheckRunCheckSuiteConclusion::ActionRequired => {
                "action_required".to_string()
            }
            CheckRuncreatedCheckRunCheckSuiteConclusion::Stale => "stale".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRuncreatedCheckRunCheckSuiteStatus {
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for CheckRuncreatedCheckRunCheckSuiteStatus {
    fn to_string(&self) -> String {
        match self {
            CheckRuncreatedCheckRunCheckSuiteStatus::Queued => "queued".to_string(),
            CheckRuncreatedCheckRunCheckSuiteStatus::InProgress => "in_progress".to_string(),
            CheckRuncreatedCheckRunCheckSuiteStatus::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRuncreatedCheckRunCheckSuite {
    pub after: Option<String>,
    pub app: App,
    pub before: Option<String>,
    pub conclusion: Option<CheckRuncreatedCheckRunCheckSuiteConclusion>,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub deployment: Option<CheckRunDeployment>,
    pub head_branch: Option<String>,
    #[doc = "The SHA of the head commit that is being checked."]
    pub head_sha: String,
    #[doc = "The id of the check suite that this check run is part of."]
    pub id: u64,
    pub node_id: Option<String>,
    #[doc = "An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty."]
    pub pull_requests: Vec<CheckRunPullRequest>,
    pub status: CheckRuncreatedCheckRunCheckSuiteStatus,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRuncreatedCheckRunConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
    #[serde(rename = "skipped")]
    Skipped,
}
impl ToString for CheckRuncreatedCheckRunConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckRuncreatedCheckRunConclusion::Success => "success".to_string(),
            CheckRuncreatedCheckRunConclusion::Failure => "failure".to_string(),
            CheckRuncreatedCheckRunConclusion::Neutral => "neutral".to_string(),
            CheckRuncreatedCheckRunConclusion::Cancelled => "cancelled".to_string(),
            CheckRuncreatedCheckRunConclusion::TimedOut => "timed_out".to_string(),
            CheckRuncreatedCheckRunConclusion::ActionRequired => "action_required".to_string(),
            CheckRuncreatedCheckRunConclusion::Stale => "stale".to_string(),
            CheckRuncreatedCheckRunConclusion::Skipped => "skipped".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRuncreatedCheckRunOutput {
    pub annotations_count: u64,
    pub annotations_url: String,
    pub summary: Option<String>,
    pub text: Option<String>,
    pub title: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRuncreatedCheckRunStatus {
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for CheckRuncreatedCheckRunStatus {
    fn to_string(&self) -> String {
        match self {
            CheckRuncreatedCheckRunStatus::Queued => "queued".to_string(),
            CheckRuncreatedCheckRunStatus::InProgress => "in_progress".to_string(),
            CheckRuncreatedCheckRunStatus::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRuncreatedCheckRun {
    pub app: App,
    pub check_suite: CheckRuncreatedCheckRunCheckSuite,
    #[doc = "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub completed_at: Option<String>,
    #[doc = "The result of the completed check run. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed."]
    pub conclusion: Option<CheckRuncreatedCheckRunConclusion>,
    pub details_url: Option<String>,
    pub external_id: String,
    #[doc = "The SHA of the commit that is being checked."]
    pub head_sha: String,
    pub html_url: String,
    #[doc = "The id of the check."]
    pub id: u64,
    #[doc = "The name of the check run."]
    pub name: String,
    pub node_id: Option<String>,
    pub output: CheckRuncreatedCheckRunOutput,
    pub pull_requests: Vec<CheckRunPullRequest>,
    #[doc = "The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub started_at: String,
    #[doc = "The current status of the check run. Can be `queued`, `in_progress`, or `completed`."]
    pub status: CheckRuncreatedCheckRunStatus,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRuncreatedRequestedAction {
    #[doc = "The integrator reference of the action requested by the user."]
    pub identifier: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunrequestedActionAction {
    #[serde(rename = "requested_action")]
    RequestedAction,
}
impl ToString for CheckRunrequestedActionAction {
    fn to_string(&self) -> String {
        match self {
            CheckRunrequestedActionAction::RequestedAction => "requested_action".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunrequestedActionCheckRunCheckSuiteConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
}
impl ToString for CheckRunrequestedActionCheckRunCheckSuiteConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckRunrequestedActionCheckRunCheckSuiteConclusion::Success => "success".to_string(),
            CheckRunrequestedActionCheckRunCheckSuiteConclusion::Failure => "failure".to_string(),
            CheckRunrequestedActionCheckRunCheckSuiteConclusion::Neutral => "neutral".to_string(),
            CheckRunrequestedActionCheckRunCheckSuiteConclusion::Cancelled => {
                "cancelled".to_string()
            }
            CheckRunrequestedActionCheckRunCheckSuiteConclusion::TimedOut => {
                "timed_out".to_string()
            }
            CheckRunrequestedActionCheckRunCheckSuiteConclusion::ActionRequired => {
                "action_required".to_string()
            }
            CheckRunrequestedActionCheckRunCheckSuiteConclusion::Stale => "stale".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunrequestedActionCheckRunCheckSuiteStatus {
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for CheckRunrequestedActionCheckRunCheckSuiteStatus {
    fn to_string(&self) -> String {
        match self {
            CheckRunrequestedActionCheckRunCheckSuiteStatus::Queued => "queued".to_string(),
            CheckRunrequestedActionCheckRunCheckSuiteStatus::InProgress => {
                "in_progress".to_string()
            }
            CheckRunrequestedActionCheckRunCheckSuiteStatus::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunrequestedActionCheckRunCheckSuite {
    pub after: Option<String>,
    pub app: App,
    pub before: Option<String>,
    pub conclusion: Option<CheckRunrequestedActionCheckRunCheckSuiteConclusion>,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub deployment: Option<CheckRunDeployment>,
    pub head_branch: Option<String>,
    #[doc = "The SHA of the head commit that is being checked."]
    pub head_sha: String,
    #[doc = "The id of the check suite that this check run is part of."]
    pub id: u64,
    pub node_id: Option<String>,
    #[doc = "An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty."]
    pub pull_requests: Vec<CheckRunPullRequest>,
    pub status: CheckRunrequestedActionCheckRunCheckSuiteStatus,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunrequestedActionCheckRunConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
    #[serde(rename = "skipped")]
    Skipped,
}
impl ToString for CheckRunrequestedActionCheckRunConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckRunrequestedActionCheckRunConclusion::Success => "success".to_string(),
            CheckRunrequestedActionCheckRunConclusion::Failure => "failure".to_string(),
            CheckRunrequestedActionCheckRunConclusion::Neutral => "neutral".to_string(),
            CheckRunrequestedActionCheckRunConclusion::Cancelled => "cancelled".to_string(),
            CheckRunrequestedActionCheckRunConclusion::TimedOut => "timed_out".to_string(),
            CheckRunrequestedActionCheckRunConclusion::ActionRequired => {
                "action_required".to_string()
            }
            CheckRunrequestedActionCheckRunConclusion::Stale => "stale".to_string(),
            CheckRunrequestedActionCheckRunConclusion::Skipped => "skipped".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunrequestedActionCheckRunOutput {
    pub annotations_count: u64,
    pub annotations_url: String,
    pub summary: Option<String>,
    pub text: Option<String>,
    pub title: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunrequestedActionCheckRunStatus {
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for CheckRunrequestedActionCheckRunStatus {
    fn to_string(&self) -> String {
        match self {
            CheckRunrequestedActionCheckRunStatus::Queued => "queued".to_string(),
            CheckRunrequestedActionCheckRunStatus::InProgress => "in_progress".to_string(),
            CheckRunrequestedActionCheckRunStatus::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunrequestedActionCheckRun {
    pub app: App,
    pub check_suite: CheckRunrequestedActionCheckRunCheckSuite,
    #[doc = "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub completed_at: Option<String>,
    #[doc = "The result of the completed check run. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed."]
    pub conclusion: Option<CheckRunrequestedActionCheckRunConclusion>,
    pub details_url: Option<String>,
    pub external_id: String,
    #[doc = "The SHA of the commit that is being checked."]
    pub head_sha: String,
    pub html_url: String,
    #[doc = "The id of the check."]
    pub id: u64,
    #[doc = "The name of the check run."]
    pub name: String,
    pub node_id: Option<String>,
    pub output: CheckRunrequestedActionCheckRunOutput,
    pub pull_requests: Vec<CheckRunPullRequest>,
    #[doc = "The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub started_at: String,
    #[doc = "The current status of the check run. Can be `queued`, `in_progress`, or `completed`."]
    pub status: CheckRunrequestedActionCheckRunStatus,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunrequestedActionRequestedAction {
    #[doc = "The integrator reference of the action requested by the user."]
    pub identifier: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunrerequestedAction {
    #[serde(rename = "rerequested")]
    Rerequested,
}
impl ToString for CheckRunrerequestedAction {
    fn to_string(&self) -> String {
        match self {
            CheckRunrerequestedAction::Rerequested => "rerequested".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunrerequestedCheckRunCheckSuiteConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
}
impl ToString for CheckRunrerequestedCheckRunCheckSuiteConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckRunrerequestedCheckRunCheckSuiteConclusion::Success => "success".to_string(),
            CheckRunrerequestedCheckRunCheckSuiteConclusion::Failure => "failure".to_string(),
            CheckRunrerequestedCheckRunCheckSuiteConclusion::Neutral => "neutral".to_string(),
            CheckRunrerequestedCheckRunCheckSuiteConclusion::Cancelled => "cancelled".to_string(),
            CheckRunrerequestedCheckRunCheckSuiteConclusion::TimedOut => "timed_out".to_string(),
            CheckRunrerequestedCheckRunCheckSuiteConclusion::ActionRequired => {
                "action_required".to_string()
            }
            CheckRunrerequestedCheckRunCheckSuiteConclusion::Stale => "stale".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunrerequestedCheckRunCheckSuiteStatus {
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for CheckRunrerequestedCheckRunCheckSuiteStatus {
    fn to_string(&self) -> String {
        match self {
            CheckRunrerequestedCheckRunCheckSuiteStatus::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunrerequestedCheckRunCheckSuite {
    pub after: Option<String>,
    pub app: App,
    pub before: Option<String>,
    pub conclusion: CheckRunrerequestedCheckRunCheckSuiteConclusion,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub deployment: Option<CheckRunDeployment>,
    pub head_branch: Option<String>,
    #[doc = "The SHA of the head commit that is being checked."]
    pub head_sha: String,
    #[doc = "The id of the check suite that this check run is part of."]
    pub id: u64,
    pub node_id: Option<String>,
    #[doc = "An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty."]
    pub pull_requests: Vec<CheckRunPullRequest>,
    pub status: CheckRunrerequestedCheckRunCheckSuiteStatus,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunrerequestedCheckRunConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
    #[serde(rename = "skipped")]
    Skipped,
}
impl ToString for CheckRunrerequestedCheckRunConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckRunrerequestedCheckRunConclusion::Success => "success".to_string(),
            CheckRunrerequestedCheckRunConclusion::Failure => "failure".to_string(),
            CheckRunrerequestedCheckRunConclusion::Neutral => "neutral".to_string(),
            CheckRunrerequestedCheckRunConclusion::Cancelled => "cancelled".to_string(),
            CheckRunrerequestedCheckRunConclusion::TimedOut => "timed_out".to_string(),
            CheckRunrerequestedCheckRunConclusion::ActionRequired => "action_required".to_string(),
            CheckRunrerequestedCheckRunConclusion::Stale => "stale".to_string(),
            CheckRunrerequestedCheckRunConclusion::Skipped => "skipped".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunrerequestedCheckRunOutput {
    pub annotations_count: u64,
    pub annotations_url: String,
    pub summary: Option<String>,
    pub text: Option<String>,
    pub title: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunrerequestedCheckRunStatus {
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for CheckRunrerequestedCheckRunStatus {
    fn to_string(&self) -> String {
        match self {
            CheckRunrerequestedCheckRunStatus::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunrerequestedCheckRun {
    pub app: App,
    pub check_suite: CheckRunrerequestedCheckRunCheckSuite,
    #[doc = "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub completed_at: String,
    #[doc = "The result of the completed check run. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has `completed`."]
    pub conclusion: Option<CheckRunrerequestedCheckRunConclusion>,
    pub details_url: Option<String>,
    pub external_id: String,
    #[doc = "The SHA of the commit that is being checked."]
    pub head_sha: String,
    pub html_url: String,
    #[doc = "The id of the check."]
    pub id: u64,
    #[doc = "The name of the check."]
    pub name: String,
    pub node_id: Option<String>,
    pub output: CheckRunrerequestedCheckRunOutput,
    pub pull_requests: Vec<CheckRunPullRequest>,
    #[doc = "The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub started_at: String,
    #[doc = "The phase of the lifecycle that the check is currently in."]
    pub status: CheckRunrerequestedCheckRunStatus,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunrerequestedRequestedAction {
    #[doc = "The integrator reference of the action requested by the user."]
    pub identifier: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckSuitecompletedAction {
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for CheckSuitecompletedAction {
    fn to_string(&self) -> String {
        match self {
            CheckSuitecompletedAction::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckSuitecompletedCheckSuiteConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
}
impl ToString for CheckSuitecompletedCheckSuiteConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckSuitecompletedCheckSuiteConclusion::Success => "success".to_string(),
            CheckSuitecompletedCheckSuiteConclusion::Failure => "failure".to_string(),
            CheckSuitecompletedCheckSuiteConclusion::Neutral => "neutral".to_string(),
            CheckSuitecompletedCheckSuiteConclusion::Cancelled => "cancelled".to_string(),
            CheckSuitecompletedCheckSuiteConclusion::TimedOut => "timed_out".to_string(),
            CheckSuitecompletedCheckSuiteConclusion::ActionRequired => {
                "action_required".to_string()
            }
            CheckSuitecompletedCheckSuiteConclusion::Stale => "stale".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckSuitecompletedCheckSuiteStatus {
    #[serde(rename = "requested")]
    Requested,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "queued")]
    Queued,
}
impl ToString for CheckSuitecompletedCheckSuiteStatus {
    fn to_string(&self) -> String {
        match self {
            CheckSuitecompletedCheckSuiteStatus::Requested => "requested".to_string(),
            CheckSuitecompletedCheckSuiteStatus::InProgress => "in_progress".to_string(),
            CheckSuitecompletedCheckSuiteStatus::Completed => "completed".to_string(),
            CheckSuitecompletedCheckSuiteStatus::Queued => "queued".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckSuitecompletedCheckSuite {
    pub after: String,
    pub app: App,
    pub before: Option<String>,
    pub check_runs_url: String,
    #[doc = "The summary conclusion for all check runs that are part of the check suite. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has `completed`."]
    pub conclusion: Option<CheckSuitecompletedCheckSuiteConclusion>,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The head branch name the changes are on."]
    pub head_branch: Option<String>,
    pub head_commit: CommitSimple,
    #[doc = "The SHA of the head commit that is being checked."]
    pub head_sha: String,
    pub id: u64,
    pub latest_check_runs_count: u64,
    pub node_id: String,
    #[doc = "An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty."]
    pub pull_requests: Vec<CheckRunPullRequest>,
    #[doc = "The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`."]
    pub status: Option<CheckSuitecompletedCheckSuiteStatus>,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "URL that points to the check suite API resource."]
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckSuiterequestedAction {
    #[serde(rename = "requested")]
    Requested,
}
impl ToString for CheckSuiterequestedAction {
    fn to_string(&self) -> String {
        match self {
            CheckSuiterequestedAction::Requested => "requested".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckSuiterequestedCheckSuiteConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
}
impl ToString for CheckSuiterequestedCheckSuiteConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckSuiterequestedCheckSuiteConclusion::Success => "success".to_string(),
            CheckSuiterequestedCheckSuiteConclusion::Failure => "failure".to_string(),
            CheckSuiterequestedCheckSuiteConclusion::Neutral => "neutral".to_string(),
            CheckSuiterequestedCheckSuiteConclusion::Cancelled => "cancelled".to_string(),
            CheckSuiterequestedCheckSuiteConclusion::TimedOut => "timed_out".to_string(),
            CheckSuiterequestedCheckSuiteConclusion::ActionRequired => {
                "action_required".to_string()
            }
            CheckSuiterequestedCheckSuiteConclusion::Stale => "stale".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckSuiterequestedCheckSuiteStatus {
    #[serde(rename = "requested")]
    Requested,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "queued")]
    Queued,
}
impl ToString for CheckSuiterequestedCheckSuiteStatus {
    fn to_string(&self) -> String {
        match self {
            CheckSuiterequestedCheckSuiteStatus::Requested => "requested".to_string(),
            CheckSuiterequestedCheckSuiteStatus::InProgress => "in_progress".to_string(),
            CheckSuiterequestedCheckSuiteStatus::Completed => "completed".to_string(),
            CheckSuiterequestedCheckSuiteStatus::Queued => "queued".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckSuiterequestedCheckSuite {
    pub after: String,
    pub app: App,
    pub before: Option<String>,
    pub check_runs_url: String,
    #[doc = "The summary conclusion for all check runs that are part of the check suite. Can be one of `success`, `failure`,` neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed."]
    pub conclusion: Option<CheckSuiterequestedCheckSuiteConclusion>,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The head branch name the changes are on."]
    pub head_branch: Option<String>,
    pub head_commit: CommitSimple,
    #[doc = "The SHA of the head commit that is being checked."]
    pub head_sha: String,
    pub id: u64,
    pub latest_check_runs_count: u64,
    pub node_id: String,
    #[doc = "An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty."]
    pub pull_requests: Vec<CheckRunPullRequest>,
    #[doc = "The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`."]
    pub status: Option<CheckSuiterequestedCheckSuiteStatus>,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "URL that points to the check suite API resource."]
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckSuitererequestedAction {
    #[serde(rename = "rerequested")]
    Rerequested,
}
impl ToString for CheckSuitererequestedAction {
    fn to_string(&self) -> String {
        match self {
            CheckSuitererequestedAction::Rerequested => "rerequested".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckSuitererequestedCheckSuiteConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
}
impl ToString for CheckSuitererequestedCheckSuiteConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckSuitererequestedCheckSuiteConclusion::Success => "success".to_string(),
            CheckSuitererequestedCheckSuiteConclusion::Failure => "failure".to_string(),
            CheckSuitererequestedCheckSuiteConclusion::Neutral => "neutral".to_string(),
            CheckSuitererequestedCheckSuiteConclusion::Cancelled => "cancelled".to_string(),
            CheckSuitererequestedCheckSuiteConclusion::TimedOut => "timed_out".to_string(),
            CheckSuitererequestedCheckSuiteConclusion::ActionRequired => {
                "action_required".to_string()
            }
            CheckSuitererequestedCheckSuiteConclusion::Stale => "stale".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckSuitererequestedCheckSuiteStatus {
    #[serde(rename = "requested")]
    Requested,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "queued")]
    Queued,
}
impl ToString for CheckSuitererequestedCheckSuiteStatus {
    fn to_string(&self) -> String {
        match self {
            CheckSuitererequestedCheckSuiteStatus::Requested => "requested".to_string(),
            CheckSuitererequestedCheckSuiteStatus::InProgress => "in_progress".to_string(),
            CheckSuitererequestedCheckSuiteStatus::Completed => "completed".to_string(),
            CheckSuitererequestedCheckSuiteStatus::Queued => "queued".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckSuitererequestedCheckSuite {
    pub after: String,
    pub app: App,
    pub before: Option<String>,
    pub check_runs_url: String,
    #[doc = "The summary conclusion for all check runs that are part of the check suite. Can be one of `success`, `failure`,` neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed."]
    pub conclusion: Option<CheckSuitererequestedCheckSuiteConclusion>,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The head branch name the changes are on."]
    pub head_branch: Option<String>,
    pub head_commit: CommitSimple,
    #[doc = "The SHA of the head commit that is being checked."]
    pub head_sha: String,
    pub id: u64,
    pub latest_check_runs_count: u64,
    pub node_id: String,
    #[doc = "An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty."]
    pub pull_requests: Vec<CheckRunPullRequest>,
    #[doc = "The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`."]
    pub status: Option<CheckSuitererequestedCheckSuiteStatus>,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "URL that points to the check suite API resource."]
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertappearedInBranchAction {
    #[serde(rename = "appeared_in_branch")]
    AppearedInBranch,
}
impl ToString for CodeScanningAlertappearedInBranchAction {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertappearedInBranchAction::AppearedInBranch => {
                "appeared_in_branch".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum CodeScanningAlertappearedInBranchAlertDismissedBy {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertappearedInBranchAlertDismissedReason {
    #[serde(rename = "false positive")]
    FalsePositive,
    #[serde(rename = "won't fix")]
    WontFix,
    #[serde(rename = "used in tests")]
    UsedInTests,
}
impl ToString for CodeScanningAlertappearedInBranchAlertDismissedReason {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertappearedInBranchAlertDismissedReason::FalsePositive => {
                "false positive".to_string()
            }
            CodeScanningAlertappearedInBranchAlertDismissedReason::WontFix => {
                "won't fix".to_string()
            }
            CodeScanningAlertappearedInBranchAlertDismissedReason::UsedInTests => {
                "used in tests".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertappearedInBranchAlertRuleSeverity {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "note")]
    Note,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
}
impl ToString for CodeScanningAlertappearedInBranchAlertRuleSeverity {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertappearedInBranchAlertRuleSeverity::None => "none".to_string(),
            CodeScanningAlertappearedInBranchAlertRuleSeverity::Note => "note".to_string(),
            CodeScanningAlertappearedInBranchAlertRuleSeverity::Warning => "warning".to_string(),
            CodeScanningAlertappearedInBranchAlertRuleSeverity::Error => "error".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertappearedInBranchAlertRule {
    #[doc = "A short description of the rule used to detect the alert."]
    pub description: String,
    #[doc = "A unique identifier for the rule used to detect the alert."]
    pub id: String,
    #[doc = "The severity of the alert."]
    pub severity: Option<CodeScanningAlertappearedInBranchAlertRuleSeverity>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertappearedInBranchAlertState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "dismissed")]
    Dismissed,
    #[serde(rename = "fixed")]
    Fixed,
}
impl ToString for CodeScanningAlertappearedInBranchAlertState {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertappearedInBranchAlertState::Open => "open".to_string(),
            CodeScanningAlertappearedInBranchAlertState::Dismissed => "dismissed".to_string(),
            CodeScanningAlertappearedInBranchAlertState::Fixed => "fixed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertappearedInBranchAlertTool {
    #[doc = "The name of the tool used to generate the code scanning analysis alert."]
    pub name: String,
    #[doc = "The version of the tool used to detect the alert."]
    pub version: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertappearedInBranchAlert {
    #[doc = "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`"]
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub dismissed_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    pub dismissed_by: CodeScanningAlertappearedInBranchAlertDismissedBy,
    #[doc = "The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`."]
    pub dismissed_reason: Option<CodeScanningAlertappearedInBranchAlertDismissedReason>,
    #[doc = "The GitHub URL of the alert resource."]
    pub html_url: String,
    pub instances: Vec<AlertInstance>,
    pub most_recent_instance: Option<AlertInstance>,
    #[doc = "The code scanning alert number."]
    pub number: u64,
    pub rule: CodeScanningAlertappearedInBranchAlertRule,
    #[doc = "State of a code scanning alert."]
    pub state: CodeScanningAlertappearedInBranchAlertState,
    pub tool: CodeScanningAlertappearedInBranchAlertTool,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertclosedByUserAction {
    #[serde(rename = "closed_by_user")]
    ClosedByUser,
}
impl ToString for CodeScanningAlertclosedByUserAction {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertclosedByUserAction::ClosedByUser => "closed_by_user".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertclosedByUserAlertDismissedReason {
    #[serde(rename = "false positive")]
    FalsePositive,
    #[serde(rename = "won't fix")]
    WontFix,
    #[serde(rename = "used in tests")]
    UsedInTests,
}
impl ToString for CodeScanningAlertclosedByUserAlertDismissedReason {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertclosedByUserAlertDismissedReason::FalsePositive => {
                "false positive".to_string()
            }
            CodeScanningAlertclosedByUserAlertDismissedReason::WontFix => "won't fix".to_string(),
            CodeScanningAlertclosedByUserAlertDismissedReason::UsedInTests => {
                "used in tests".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertclosedByUserAlertInstancesItemVariant1State {
    #[serde(rename = "dismissed")]
    Dismissed,
}
impl ToString for CodeScanningAlertclosedByUserAlertInstancesItemVariant1State {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertclosedByUserAlertInstancesItemVariant1State::Dismissed => {
                "dismissed".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertclosedByUserAlertInstancesItemVariant1 {
    pub state: CodeScanningAlertclosedByUserAlertInstancesItemVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertclosedByUserAlertInstancesItem {
    #[serde(flatten)]
    pub variant_0: AlertInstance,
    #[serde(flatten)]
    pub variant_1: CodeScanningAlertclosedByUserAlertInstancesItemVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertclosedByUserAlertRuleSeverity {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "note")]
    Note,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
}
impl ToString for CodeScanningAlertclosedByUserAlertRuleSeverity {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertclosedByUserAlertRuleSeverity::None => "none".to_string(),
            CodeScanningAlertclosedByUserAlertRuleSeverity::Note => "note".to_string(),
            CodeScanningAlertclosedByUserAlertRuleSeverity::Warning => "warning".to_string(),
            CodeScanningAlertclosedByUserAlertRuleSeverity::Error => "error".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertclosedByUserAlertRule {
    #[doc = "A short description of the rule used to detect the alert."]
    pub description: String,
    pub full_description: Option<String>,
    pub help: Option<()>,
    #[doc = "A unique identifier for the rule used to detect the alert."]
    pub id: String,
    pub name: Option<String>,
    #[doc = "The severity of the alert."]
    pub severity: Option<CodeScanningAlertclosedByUserAlertRuleSeverity>,
    pub tags: Option<()>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertclosedByUserAlertState {
    #[serde(rename = "dismissed")]
    Dismissed,
}
impl ToString for CodeScanningAlertclosedByUserAlertState {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertclosedByUserAlertState::Dismissed => "dismissed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertclosedByUserAlertTool {
    pub guid: Option<String>,
    #[doc = "The name of the tool used to generate the code scanning analysis alert."]
    pub name: String,
    #[doc = "The version of the tool used to detect the alert."]
    pub version: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertclosedByUserAlert {
    #[doc = "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`"]
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub dismissed_at: chrono::DateTime<chrono::offset::Utc>,
    pub dismissed_by: User,
    #[doc = "The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`."]
    pub dismissed_reason: Option<CodeScanningAlertclosedByUserAlertDismissedReason>,
    #[doc = "The GitHub URL of the alert resource."]
    pub html_url: String,
    pub instances: Vec<CodeScanningAlertclosedByUserAlertInstancesItem>,
    pub most_recent_instance: Option<AlertInstance>,
    #[doc = "The code scanning alert number."]
    pub number: u64,
    pub rule: CodeScanningAlertclosedByUserAlertRule,
    #[doc = "State of a code scanning alert."]
    pub state: CodeScanningAlertclosedByUserAlertState,
    pub tool: CodeScanningAlertclosedByUserAlertTool,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertcreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for CodeScanningAlertcreatedAction {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertcreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertcreatedAlertInstancesItemVariant1State {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "dismissed")]
    Dismissed,
}
impl ToString for CodeScanningAlertcreatedAlertInstancesItemVariant1State {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertcreatedAlertInstancesItemVariant1State::Open => "open".to_string(),
            CodeScanningAlertcreatedAlertInstancesItemVariant1State::Dismissed => {
                "dismissed".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertcreatedAlertInstancesItemVariant1 {
    pub state: CodeScanningAlertcreatedAlertInstancesItemVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertcreatedAlertInstancesItem {
    #[serde(flatten)]
    pub variant_0: AlertInstance,
    #[serde(flatten)]
    pub variant_1: CodeScanningAlertcreatedAlertInstancesItemVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertcreatedAlertRuleSeverity {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "note")]
    Note,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
}
impl ToString for CodeScanningAlertcreatedAlertRuleSeverity {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertcreatedAlertRuleSeverity::None => "none".to_string(),
            CodeScanningAlertcreatedAlertRuleSeverity::Note => "note".to_string(),
            CodeScanningAlertcreatedAlertRuleSeverity::Warning => "warning".to_string(),
            CodeScanningAlertcreatedAlertRuleSeverity::Error => "error".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertcreatedAlertRule {
    #[doc = "A short description of the rule used to detect the alert."]
    pub description: String,
    pub full_description: Option<String>,
    pub help: Option<()>,
    #[doc = "A unique identifier for the rule used to detect the alert."]
    pub id: String,
    pub name: Option<String>,
    #[doc = "The severity of the alert."]
    pub severity: Option<CodeScanningAlertcreatedAlertRuleSeverity>,
    pub tags: Option<()>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertcreatedAlertState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "dismissed")]
    Dismissed,
}
impl ToString for CodeScanningAlertcreatedAlertState {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertcreatedAlertState::Open => "open".to_string(),
            CodeScanningAlertcreatedAlertState::Dismissed => "dismissed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertcreatedAlertTool {
    pub guid: Option<String>,
    #[doc = "The name of the tool used to generate the code scanning analysis alert."]
    pub name: String,
    #[doc = "The version of the tool used to detect the alert."]
    pub version: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertcreatedAlert {
    #[doc = "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`"]
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub dismissed_at: (),
    pub dismissed_by: (),
    #[doc = "The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`."]
    pub dismissed_reason: (),
    #[doc = "The GitHub URL of the alert resource."]
    pub html_url: String,
    pub instances: Vec<CodeScanningAlertcreatedAlertInstancesItem>,
    pub most_recent_instance: Option<AlertInstance>,
    #[doc = "The code scanning alert number."]
    pub number: u64,
    pub rule: CodeScanningAlertcreatedAlertRule,
    #[doc = "State of a code scanning alert."]
    pub state: CodeScanningAlertcreatedAlertState,
    pub tool: CodeScanningAlertcreatedAlertTool,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertfixedAction {
    #[serde(rename = "fixed")]
    Fixed,
}
impl ToString for CodeScanningAlertfixedAction {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertfixedAction::Fixed => "fixed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum CodeScanningAlertfixedAlertDismissedBy {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertfixedAlertDismissedReason {
    #[serde(rename = "false positive")]
    FalsePositive,
    #[serde(rename = "won't fix")]
    WontFix,
    #[serde(rename = "used in tests")]
    UsedInTests,
}
impl ToString for CodeScanningAlertfixedAlertDismissedReason {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertfixedAlertDismissedReason::FalsePositive => {
                "false positive".to_string()
            }
            CodeScanningAlertfixedAlertDismissedReason::WontFix => "won't fix".to_string(),
            CodeScanningAlertfixedAlertDismissedReason::UsedInTests => "used in tests".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertfixedAlertInstancesItemVariant1State {
    #[serde(rename = "fixed")]
    Fixed,
}
impl ToString for CodeScanningAlertfixedAlertInstancesItemVariant1State {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertfixedAlertInstancesItemVariant1State::Fixed => "fixed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertfixedAlertInstancesItemVariant1 {
    pub state: CodeScanningAlertfixedAlertInstancesItemVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertfixedAlertInstancesItem {
    #[serde(flatten)]
    pub variant_0: AlertInstance,
    #[serde(flatten)]
    pub variant_1: CodeScanningAlertfixedAlertInstancesItemVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertfixedAlertRuleSeverity {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "note")]
    Note,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
}
impl ToString for CodeScanningAlertfixedAlertRuleSeverity {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertfixedAlertRuleSeverity::None => "none".to_string(),
            CodeScanningAlertfixedAlertRuleSeverity::Note => "note".to_string(),
            CodeScanningAlertfixedAlertRuleSeverity::Warning => "warning".to_string(),
            CodeScanningAlertfixedAlertRuleSeverity::Error => "error".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertfixedAlertRule {
    #[doc = "A short description of the rule used to detect the alert."]
    pub description: String,
    pub full_description: Option<String>,
    pub help: Option<()>,
    #[doc = "A unique identifier for the rule used to detect the alert."]
    pub id: String,
    pub name: Option<String>,
    #[doc = "The severity of the alert."]
    pub severity: Option<CodeScanningAlertfixedAlertRuleSeverity>,
    pub tags: Option<()>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertfixedAlertState {
    #[serde(rename = "fixed")]
    Fixed,
}
impl ToString for CodeScanningAlertfixedAlertState {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertfixedAlertState::Fixed => "fixed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertfixedAlertTool {
    pub guid: Option<String>,
    #[doc = "The name of the tool used to generate the code scanning analysis alert."]
    pub name: String,
    #[doc = "The version of the tool used to detect the alert."]
    pub version: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertfixedAlert {
    #[doc = "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`"]
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub dismissed_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    pub dismissed_by: CodeScanningAlertfixedAlertDismissedBy,
    #[doc = "The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`."]
    pub dismissed_reason: Option<CodeScanningAlertfixedAlertDismissedReason>,
    #[doc = "The GitHub URL of the alert resource."]
    pub html_url: String,
    pub instances: Vec<CodeScanningAlertfixedAlertInstancesItem>,
    pub instances_url: Option<String>,
    pub most_recent_instance: Option<AlertInstance>,
    #[doc = "The code scanning alert number."]
    pub number: u64,
    pub rule: CodeScanningAlertfixedAlertRule,
    #[doc = "State of a code scanning alert."]
    pub state: CodeScanningAlertfixedAlertState,
    pub tool: CodeScanningAlertfixedAlertTool,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertreopenedAction {
    #[serde(rename = "reopened")]
    Reopened,
}
impl ToString for CodeScanningAlertreopenedAction {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertreopenedAction::Reopened => "reopened".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertreopenedAlertInstancesItemVariant1State {
    #[serde(rename = "open")]
    Open,
}
impl ToString for CodeScanningAlertreopenedAlertInstancesItemVariant1State {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertreopenedAlertInstancesItemVariant1State::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertreopenedAlertInstancesItemVariant1 {
    pub state: CodeScanningAlertreopenedAlertInstancesItemVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertreopenedAlertInstancesItem {
    #[serde(flatten)]
    pub variant_0: AlertInstance,
    #[serde(flatten)]
    pub variant_1: CodeScanningAlertreopenedAlertInstancesItemVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertreopenedAlertRuleSeverity {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "note")]
    Note,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
}
impl ToString for CodeScanningAlertreopenedAlertRuleSeverity {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertreopenedAlertRuleSeverity::None => "none".to_string(),
            CodeScanningAlertreopenedAlertRuleSeverity::Note => "note".to_string(),
            CodeScanningAlertreopenedAlertRuleSeverity::Warning => "warning".to_string(),
            CodeScanningAlertreopenedAlertRuleSeverity::Error => "error".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertreopenedAlertRule {
    #[doc = "A short description of the rule used to detect the alert."]
    pub description: String,
    pub full_description: Option<String>,
    pub help: Option<()>,
    #[doc = "A unique identifier for the rule used to detect the alert."]
    pub id: String,
    pub name: Option<String>,
    #[doc = "The severity of the alert."]
    pub severity: Option<CodeScanningAlertreopenedAlertRuleSeverity>,
    pub tags: Option<()>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertreopenedAlertState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "dismissed")]
    Dismissed,
    #[serde(rename = "fixed")]
    Fixed,
}
impl ToString for CodeScanningAlertreopenedAlertState {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertreopenedAlertState::Open => "open".to_string(),
            CodeScanningAlertreopenedAlertState::Dismissed => "dismissed".to_string(),
            CodeScanningAlertreopenedAlertState::Fixed => "fixed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertreopenedAlertTool {
    pub guid: Option<String>,
    #[doc = "The name of the tool used to generate the code scanning analysis alert."]
    pub name: String,
    #[doc = "The version of the tool used to detect the alert."]
    pub version: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertreopenedAlert {
    #[doc = "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`"]
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub dismissed_at: (),
    pub dismissed_by: (),
    #[doc = "The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`."]
    pub dismissed_reason: (),
    #[doc = "The GitHub URL of the alert resource."]
    pub html_url: String,
    pub instances: Vec<CodeScanningAlertreopenedAlertInstancesItem>,
    pub most_recent_instance: Option<AlertInstance>,
    #[doc = "The code scanning alert number."]
    pub number: u64,
    pub rule: CodeScanningAlertreopenedAlertRule,
    #[doc = "State of a code scanning alert."]
    pub state: CodeScanningAlertreopenedAlertState,
    pub tool: CodeScanningAlertreopenedAlertTool,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertreopenedByUserAction {
    #[serde(rename = "reopened_by_user")]
    ReopenedByUser,
}
impl ToString for CodeScanningAlertreopenedByUserAction {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertreopenedByUserAction::ReopenedByUser => "reopened_by_user".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertreopenedByUserAlertInstancesItemVariant1State {
    #[serde(rename = "open")]
    Open,
}
impl ToString for CodeScanningAlertreopenedByUserAlertInstancesItemVariant1State {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertreopenedByUserAlertInstancesItemVariant1State::Open => {
                "open".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertreopenedByUserAlertInstancesItemVariant1 {
    pub state: CodeScanningAlertreopenedByUserAlertInstancesItemVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertreopenedByUserAlertInstancesItem {
    #[serde(flatten)]
    pub variant_0: AlertInstance,
    #[serde(flatten)]
    pub variant_1: CodeScanningAlertreopenedByUserAlertInstancesItemVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertreopenedByUserAlertRuleSeverity {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "note")]
    Note,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
}
impl ToString for CodeScanningAlertreopenedByUserAlertRuleSeverity {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertreopenedByUserAlertRuleSeverity::None => "none".to_string(),
            CodeScanningAlertreopenedByUserAlertRuleSeverity::Note => "note".to_string(),
            CodeScanningAlertreopenedByUserAlertRuleSeverity::Warning => "warning".to_string(),
            CodeScanningAlertreopenedByUserAlertRuleSeverity::Error => "error".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertreopenedByUserAlertRule {
    #[doc = "A short description of the rule used to detect the alert."]
    pub description: String,
    #[doc = "A unique identifier for the rule used to detect the alert."]
    pub id: String,
    #[doc = "The severity of the alert."]
    pub severity: Option<CodeScanningAlertreopenedByUserAlertRuleSeverity>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertreopenedByUserAlertState {
    #[serde(rename = "open")]
    Open,
}
impl ToString for CodeScanningAlertreopenedByUserAlertState {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertreopenedByUserAlertState::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertreopenedByUserAlertTool {
    #[doc = "The name of the tool used to generate the code scanning analysis alert."]
    pub name: String,
    #[doc = "The version of the tool used to detect the alert."]
    pub version: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertreopenedByUserAlert {
    #[doc = "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`"]
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub dismissed_at: (),
    pub dismissed_by: (),
    #[doc = "The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`."]
    pub dismissed_reason: (),
    #[doc = "The GitHub URL of the alert resource."]
    pub html_url: String,
    pub instances: Vec<CodeScanningAlertreopenedByUserAlertInstancesItem>,
    pub most_recent_instance: Option<AlertInstance>,
    #[doc = "The code scanning alert number."]
    pub number: u64,
    pub rule: CodeScanningAlertreopenedByUserAlertRule,
    #[doc = "State of a code scanning alert."]
    pub state: CodeScanningAlertreopenedByUserAlertState,
    pub tool: CodeScanningAlertreopenedByUserAlertTool,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CommitCommentcreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for CommitCommentcreatedAction {
    fn to_string(&self) -> String {
        match self {
            CommitCommentcreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CommitCommentcreatedComment {
    pub author_association: AuthorAssociation,
    #[doc = "The text of the comment."]
    pub body: String,
    #[doc = "The SHA of the commit to which the comment applies."]
    pub commit_id: String,
    pub created_at: String,
    pub html_url: String,
    #[doc = "The ID of the commit comment."]
    pub id: u64,
    #[doc = "The line of the blob to which the comment applies. The last line of the range for a multi-line comment"]
    pub line: Option<u64>,
    #[doc = "The node ID of the commit comment."]
    pub node_id: String,
    #[doc = "The relative path of the file to which the comment applies."]
    pub path: Option<String>,
    #[doc = "The line index in the diff to which the comment applies."]
    pub position: Option<u64>,
    pub updated_at: String,
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum CommitterEmail {
    Variant0(String),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ContentReferencecreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for ContentReferencecreatedAction {
    fn to_string(&self) -> String {
        match self {
            ContentReferencecreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ContentReferencecreatedContentReference {
    pub id: u64,
    pub node_id: String,
    pub reference: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CreateeventRefType {
    #[serde(rename = "tag")]
    Tag,
    #[serde(rename = "branch")]
    Branch,
}
impl ToString for CreateeventRefType {
    fn to_string(&self) -> String {
        match self {
            CreateeventRefType::Tag => "tag".to_string(),
            CreateeventRefType::Branch => "branch".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DeleteeventRefType {
    #[serde(rename = "tag")]
    Tag,
    #[serde(rename = "branch")]
    Branch,
}
impl ToString for DeleteeventRefType {
    fn to_string(&self) -> String {
        match self {
            DeleteeventRefType::Tag => "tag".to_string(),
            DeleteeventRefType::Branch => "branch".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DeployKeycreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for DeployKeycreatedAction {
    fn to_string(&self) -> String {
        match self {
            DeployKeycreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeployKeycreatedKey {
    pub created_at: String,
    pub id: u64,
    pub key: String,
    pub read_only: bool,
    pub title: String,
    pub url: String,
    pub verified: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DeployKeydeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for DeployKeydeletedAction {
    fn to_string(&self) -> String {
        match self {
            DeployKeydeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeployKeydeletedKey {
    pub created_at: String,
    pub id: u64,
    pub key: String,
    pub read_only: bool,
    pub title: String,
    pub url: String,
    pub verified: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DeploymentcreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for DeploymentcreatedAction {
    fn to_string(&self) -> String {
        match self {
            DeploymentcreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeploymentcreatedDeploymentPayload {}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum DeploymentcreatedDeploymentPerformedViaGithubApp {
    Variant0(App),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeploymentcreatedDeployment {
    pub created_at: String,
    pub creator: User,
    pub description: (),
    pub environment: String,
    pub id: u64,
    pub node_id: String,
    pub original_environment: String,
    pub payload: DeploymentcreatedDeploymentPayload,
    pub performed_via_github_app: Option<DeploymentcreatedDeploymentPerformedViaGithubApp>,
    pub repository_url: String,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub statuses_url: String,
    pub task: String,
    pub updated_at: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DeploymentStatuscreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for DeploymentStatuscreatedAction {
    fn to_string(&self) -> String {
        match self {
            DeploymentStatuscreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeploymentStatuscreatedDeploymentPayload {}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum DeploymentStatuscreatedDeploymentPerformedViaGithubApp {
    Variant0(App),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeploymentStatuscreatedDeployment {
    pub created_at: String,
    pub creator: User,
    pub description: (),
    pub environment: String,
    pub id: u64,
    pub node_id: String,
    pub original_environment: String,
    pub payload: DeploymentStatuscreatedDeploymentPayload,
    pub performed_via_github_app: DeploymentStatuscreatedDeploymentPerformedViaGithubApp,
    pub repository_url: String,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub statuses_url: String,
    pub task: String,
    pub updated_at: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum DeploymentStatuscreatedDeploymentStatusPerformedViaGithubApp {
    Variant0(App),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeploymentStatuscreatedDeploymentStatus {
    pub created_at: String,
    pub creator: User,
    pub deployment_url: String,
    #[doc = "The optional human-readable description added to the status."]
    pub description: String,
    pub environment: String,
    pub id: u64,
    pub node_id: String,
    pub performed_via_github_app:
        Option<DeploymentStatuscreatedDeploymentStatusPerformedViaGithubApp>,
    pub repository_url: String,
    #[doc = "The new state. Can be `pending`, `success`, `failure`, or `error`."]
    pub state: String,
    #[doc = "The optional link added to the status."]
    pub target_url: String,
    pub updated_at: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum DiscussionAnswerChosenBy {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCategory {
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub description: String,
    pub emoji: String,
    pub id: u64,
    pub is_answerable: bool,
    pub name: String,
    pub repository_id: u64,
    pub slug: String,
    pub updated_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "locked")]
    Locked,
    #[serde(rename = "converting")]
    Converting,
}
impl ToString for DiscussionState {
    fn to_string(&self) -> String {
        match self {
            DiscussionState::Open => "open".to_string(),
            DiscussionState::Locked => "locked".to_string(),
            DiscussionState::Converting => "converting".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionansweredAction {
    #[serde(rename = "answered")]
    Answered,
}
impl ToString for DiscussionansweredAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionansweredAction::Answered => "answered".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionansweredAnswer {
    pub author_association: AuthorAssociation,
    pub body: String,
    pub child_comment_count: u64,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub discussion_id: u64,
    pub html_url: String,
    pub id: u64,
    pub node_id: String,
    pub parent_id: (),
    pub repository_url: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionansweredDiscussionVariant1Category {
    pub is_answerable: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionansweredDiscussionVariant1 {
    pub answer_chosen_at: chrono::DateTime<chrono::offset::Utc>,
    pub answer_chosen_by: User,
    pub answer_html_url: String,
    pub category: DiscussionansweredDiscussionVariant1Category,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionansweredDiscussion {
    #[serde(flatten)]
    pub variant_0: Discussion,
    #[serde(flatten)]
    pub variant_1: DiscussionansweredDiscussionVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussioncategoryChangedAction {
    #[serde(rename = "category_changed")]
    CategoryChanged,
}
impl ToString for DiscussioncategoryChangedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussioncategoryChangedAction::CategoryChanged => "category_changed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussioncategoryChangedChangesCategoryFrom {
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub description: String,
    pub emoji: String,
    pub id: u64,
    pub is_answerable: bool,
    pub name: String,
    pub repository_id: u64,
    pub slug: String,
    pub updated_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussioncategoryChangedChangesCategory {
    pub from: DiscussioncategoryChangedChangesCategoryFrom,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussioncategoryChangedChanges {
    pub category: DiscussioncategoryChangedChangesCategory,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussioncreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for DiscussioncreatedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussioncreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussioncreatedDiscussionVariant1State {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "converting")]
    Converting,
}
impl ToString for DiscussioncreatedDiscussionVariant1State {
    fn to_string(&self) -> String {
        match self {
            DiscussioncreatedDiscussionVariant1State::Open => "open".to_string(),
            DiscussioncreatedDiscussionVariant1State::Converting => "converting".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussioncreatedDiscussionVariant1 {
    pub answer_chosen_at: (),
    pub answer_chosen_by: (),
    pub answer_html_url: (),
    pub locked: bool,
    pub state: DiscussioncreatedDiscussionVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussioncreatedDiscussion {
    #[serde(flatten)]
    pub variant_0: Discussion,
    #[serde(flatten)]
    pub variant_1: DiscussioncreatedDiscussionVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussiondeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for DiscussiondeletedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussiondeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussioneditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for DiscussioneditedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussioneditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussioneditedChangesBody {
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussioneditedChangesTitle {
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussioneditedChanges {
    pub body: Option<DiscussioneditedChangesBody>,
    pub title: Option<DiscussioneditedChangesTitle>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionlabeledAction {
    #[serde(rename = "labeled")]
    Labeled,
}
impl ToString for DiscussionlabeledAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionlabeledAction::Labeled => "labeled".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionlockedAction {
    #[serde(rename = "locked")]
    Locked,
}
impl ToString for DiscussionlockedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionlockedAction::Locked => "locked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionlockedDiscussionVariant1State {
    #[serde(rename = "locked")]
    Locked,
}
impl ToString for DiscussionlockedDiscussionVariant1State {
    fn to_string(&self) -> String {
        match self {
            DiscussionlockedDiscussionVariant1State::Locked => "locked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionlockedDiscussionVariant1 {
    pub locked: bool,
    pub state: DiscussionlockedDiscussionVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionlockedDiscussion {
    #[serde(flatten)]
    pub variant_0: Discussion,
    #[serde(flatten)]
    pub variant_1: DiscussionlockedDiscussionVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionpinnedAction {
    #[serde(rename = "pinned")]
    Pinned,
}
impl ToString for DiscussionpinnedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionpinnedAction::Pinned => "pinned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussiontransferredAction {
    #[serde(rename = "transferred")]
    Transferred,
}
impl ToString for DiscussiontransferredAction {
    fn to_string(&self) -> String {
        match self {
            DiscussiontransferredAction::Transferred => "transferred".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussiontransferredChanges {
    pub new_discussion: Discussion,
    pub new_repository: Repository,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionunansweredAction {
    #[serde(rename = "unanswered")]
    Unanswered,
}
impl ToString for DiscussionunansweredAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionunansweredAction::Unanswered => "unanswered".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionunansweredDiscussionVariant1Category {
    pub is_answerable: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionunansweredDiscussionVariant1 {
    pub answer_chosen_at: (),
    pub answer_chosen_by: (),
    pub answer_html_url: (),
    pub category: DiscussionunansweredDiscussionVariant1Category,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionunansweredDiscussion {
    #[serde(flatten)]
    pub variant_0: Discussion,
    #[serde(flatten)]
    pub variant_1: DiscussionunansweredDiscussionVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionunansweredOldAnswer {
    pub author_association: AuthorAssociation,
    pub body: String,
    pub child_comment_count: u64,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub discussion_id: u64,
    pub html_url: String,
    pub id: u64,
    pub node_id: String,
    pub parent_id: (),
    pub repository_url: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionunlabeledAction {
    #[serde(rename = "unlabeled")]
    Unlabeled,
}
impl ToString for DiscussionunlabeledAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionunlabeledAction::Unlabeled => "unlabeled".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionunlockedAction {
    #[serde(rename = "unlocked")]
    Unlocked,
}
impl ToString for DiscussionunlockedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionunlockedAction::Unlocked => "unlocked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionunlockedDiscussionVariant1State {
    #[serde(rename = "open")]
    Open,
}
impl ToString for DiscussionunlockedDiscussionVariant1State {
    fn to_string(&self) -> String {
        match self {
            DiscussionunlockedDiscussionVariant1State::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionunlockedDiscussionVariant1 {
    pub locked: bool,
    pub state: DiscussionunlockedDiscussionVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionunlockedDiscussion {
    #[serde(flatten)]
    pub variant_0: Discussion,
    #[serde(flatten)]
    pub variant_1: DiscussionunlockedDiscussionVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionunpinnedAction {
    #[serde(rename = "unpinned")]
    Unpinned,
}
impl ToString for DiscussionunpinnedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionunpinnedAction::Unpinned => "unpinned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionCommentcreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for DiscussionCommentcreatedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionCommentcreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCommentcreatedComment {
    pub author_association: AuthorAssociation,
    pub body: String,
    pub child_comment_count: u64,
    pub created_at: String,
    pub discussion_id: u64,
    pub html_url: String,
    pub id: u64,
    pub node_id: String,
    pub parent_id: Option<u64>,
    pub repository_url: String,
    pub updated_at: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionCommentdeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for DiscussionCommentdeletedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionCommentdeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCommentdeletedComment {
    pub author_association: AuthorAssociation,
    pub body: String,
    pub child_comment_count: u64,
    pub created_at: String,
    pub discussion_id: u64,
    pub html_url: String,
    pub id: u64,
    pub node_id: String,
    pub parent_id: Option<u64>,
    pub repository_url: String,
    pub updated_at: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionCommenteditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for DiscussionCommenteditedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionCommenteditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCommenteditedChangesBody {
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCommenteditedChanges {
    pub body: DiscussionCommenteditedChangesBody,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCommenteditedComment {
    pub author_association: AuthorAssociation,
    pub body: String,
    pub child_comment_count: u64,
    pub created_at: String,
    pub discussion_id: u64,
    pub html_url: String,
    pub id: u64,
    pub node_id: String,
    pub parent_id: Option<u64>,
    pub repository_url: String,
    pub updated_at: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ForkeventForkeeVariant1 {
    pub fork: Option<bool>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ForkeventForkee {
    #[serde(flatten)]
    pub variant_0: Repository,
    #[serde(flatten)]
    pub variant_1: ForkeventForkeeVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum GithubAppAuthorizationrevokedAction {
    #[serde(rename = "revoked")]
    Revoked,
}
impl ToString for GithubAppAuthorizationrevokedAction {
    fn to_string(&self) -> String {
        match self {
            GithubAppAuthorizationrevokedAction::Revoked => "revoked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum GollumeventPagesItemAction {
    #[serde(rename = "created")]
    Created,
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for GollumeventPagesItemAction {
    fn to_string(&self) -> String {
        match self {
            GollumeventPagesItemAction::Created => "created".to_string(),
            GollumeventPagesItemAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GollumeventPagesItem {
    #[doc = "The action that was performed on the page. Can be `created` or `edited`."]
    pub action: GollumeventPagesItemAction,
    #[doc = "Points to the HTML wiki page."]
    pub html_url: String,
    #[doc = "The name of the page."]
    pub page_name: String,
    #[doc = "The latest commit SHA of the page."]
    pub sha: String,
    pub summary: (),
    #[doc = "The current page title."]
    pub title: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum InstallationCreatedAt {
    Variant0(chrono::DateTime<chrono::offset::Utc>),
    Variant1(u64),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationEventsItem {
    #[serde(rename = "check_run")]
    CheckRun,
    #[serde(rename = "check_suite")]
    CheckSuite,
    #[serde(rename = "code_scanning_alert")]
    CodeScanningAlert,
    #[serde(rename = "commit_comment")]
    CommitComment,
    #[serde(rename = "content_reference")]
    ContentReference,
    #[serde(rename = "create")]
    Create,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "deployment")]
    Deployment,
    #[serde(rename = "deployment_review")]
    DeploymentReview,
    #[serde(rename = "deployment_status")]
    DeploymentStatus,
    #[serde(rename = "deploy_key")]
    DeployKey,
    #[serde(rename = "discussion")]
    Discussion,
    #[serde(rename = "discussion_comment")]
    DiscussionComment,
    #[serde(rename = "fork")]
    Fork,
    #[serde(rename = "gollum")]
    Gollum,
    #[serde(rename = "issues")]
    Issues,
    #[serde(rename = "issue_comment")]
    IssueComment,
    #[serde(rename = "label")]
    Label,
    #[serde(rename = "member")]
    Member,
    #[serde(rename = "membership")]
    Membership,
    #[serde(rename = "merge_queue_entry")]
    MergeQueueEntry,
    #[serde(rename = "milestone")]
    Milestone,
    #[serde(rename = "organization")]
    Organization,
    #[serde(rename = "org_block")]
    OrgBlock,
    #[serde(rename = "page_build")]
    PageBuild,
    #[serde(rename = "project")]
    Project,
    #[serde(rename = "project_card")]
    ProjectCard,
    #[serde(rename = "project_column")]
    ProjectColumn,
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "pull_request")]
    PullRequest,
    #[serde(rename = "pull_request_review")]
    PullRequestReview,
    #[serde(rename = "pull_request_review_comment")]
    PullRequestReviewComment,
    #[serde(rename = "push")]
    Push,
    #[serde(rename = "registry_package")]
    RegistryPackage,
    #[serde(rename = "release")]
    Release,
    #[serde(rename = "repository")]
    Repository,
    #[serde(rename = "repository_dispatch")]
    RepositoryDispatch,
    #[serde(rename = "secret_scanning_alert")]
    SecretScanningAlert,
    #[serde(rename = "star")]
    Star,
    #[serde(rename = "status")]
    Status,
    #[serde(rename = "team")]
    Team,
    #[serde(rename = "team_add")]
    TeamAdd,
    #[serde(rename = "watch")]
    Watch,
    #[serde(rename = "workflow_dispatch")]
    WorkflowDispatch,
    #[serde(rename = "workflow_run")]
    WorkflowRun,
}
impl ToString for InstallationEventsItem {
    fn to_string(&self) -> String {
        match self {
            InstallationEventsItem::CheckRun => "check_run".to_string(),
            InstallationEventsItem::CheckSuite => "check_suite".to_string(),
            InstallationEventsItem::CodeScanningAlert => "code_scanning_alert".to_string(),
            InstallationEventsItem::CommitComment => "commit_comment".to_string(),
            InstallationEventsItem::ContentReference => "content_reference".to_string(),
            InstallationEventsItem::Create => "create".to_string(),
            InstallationEventsItem::Delete => "delete".to_string(),
            InstallationEventsItem::Deployment => "deployment".to_string(),
            InstallationEventsItem::DeploymentReview => "deployment_review".to_string(),
            InstallationEventsItem::DeploymentStatus => "deployment_status".to_string(),
            InstallationEventsItem::DeployKey => "deploy_key".to_string(),
            InstallationEventsItem::Discussion => "discussion".to_string(),
            InstallationEventsItem::DiscussionComment => "discussion_comment".to_string(),
            InstallationEventsItem::Fork => "fork".to_string(),
            InstallationEventsItem::Gollum => "gollum".to_string(),
            InstallationEventsItem::Issues => "issues".to_string(),
            InstallationEventsItem::IssueComment => "issue_comment".to_string(),
            InstallationEventsItem::Label => "label".to_string(),
            InstallationEventsItem::Member => "member".to_string(),
            InstallationEventsItem::Membership => "membership".to_string(),
            InstallationEventsItem::MergeQueueEntry => "merge_queue_entry".to_string(),
            InstallationEventsItem::Milestone => "milestone".to_string(),
            InstallationEventsItem::Organization => "organization".to_string(),
            InstallationEventsItem::OrgBlock => "org_block".to_string(),
            InstallationEventsItem::PageBuild => "page_build".to_string(),
            InstallationEventsItem::Project => "project".to_string(),
            InstallationEventsItem::ProjectCard => "project_card".to_string(),
            InstallationEventsItem::ProjectColumn => "project_column".to_string(),
            InstallationEventsItem::Public => "public".to_string(),
            InstallationEventsItem::PullRequest => "pull_request".to_string(),
            InstallationEventsItem::PullRequestReview => "pull_request_review".to_string(),
            InstallationEventsItem::PullRequestReviewComment => {
                "pull_request_review_comment".to_string()
            }
            InstallationEventsItem::Push => "push".to_string(),
            InstallationEventsItem::RegistryPackage => "registry_package".to_string(),
            InstallationEventsItem::Release => "release".to_string(),
            InstallationEventsItem::Repository => "repository".to_string(),
            InstallationEventsItem::RepositoryDispatch => "repository_dispatch".to_string(),
            InstallationEventsItem::SecretScanningAlert => "secret_scanning_alert".to_string(),
            InstallationEventsItem::Star => "star".to_string(),
            InstallationEventsItem::Status => "status".to_string(),
            InstallationEventsItem::Team => "team".to_string(),
            InstallationEventsItem::TeamAdd => "team_add".to_string(),
            InstallationEventsItem::Watch => "watch".to_string(),
            InstallationEventsItem::WorkflowDispatch => "workflow_dispatch".to_string(),
            InstallationEventsItem::WorkflowRun => "workflow_run".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsActions {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsActions {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsActions::Read => "read".to_string(),
            InstallationPermissionsActions::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsAdministration {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsAdministration {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsAdministration::Read => "read".to_string(),
            InstallationPermissionsAdministration::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsChecks {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsChecks {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsChecks::Read => "read".to_string(),
            InstallationPermissionsChecks::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsContentReferences {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsContentReferences {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsContentReferences::Read => "read".to_string(),
            InstallationPermissionsContentReferences::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsContents {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsContents {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsContents::Read => "read".to_string(),
            InstallationPermissionsContents::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsDeployments {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsDeployments {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsDeployments::Read => "read".to_string(),
            InstallationPermissionsDeployments::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsDiscussions {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsDiscussions {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsDiscussions::Read => "read".to_string(),
            InstallationPermissionsDiscussions::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsEmails {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsEmails {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsEmails::Read => "read".to_string(),
            InstallationPermissionsEmails::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsEnvironments {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsEnvironments {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsEnvironments::Read => "read".to_string(),
            InstallationPermissionsEnvironments::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsIssues {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsIssues {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsIssues::Read => "read".to_string(),
            InstallationPermissionsIssues::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsMembers {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsMembers {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsMembers::Read => "read".to_string(),
            InstallationPermissionsMembers::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsMetadata {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsMetadata {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsMetadata::Read => "read".to_string(),
            InstallationPermissionsMetadata::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsOrganizationAdministration {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsOrganizationAdministration {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsOrganizationAdministration::Read => "read".to_string(),
            InstallationPermissionsOrganizationAdministration::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsOrganizationEvents {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsOrganizationEvents {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsOrganizationEvents::Read => "read".to_string(),
            InstallationPermissionsOrganizationEvents::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsOrganizationHooks {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsOrganizationHooks {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsOrganizationHooks::Read => "read".to_string(),
            InstallationPermissionsOrganizationHooks::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsOrganizationPackages {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsOrganizationPackages {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsOrganizationPackages::Read => "read".to_string(),
            InstallationPermissionsOrganizationPackages::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsOrganizationPlan {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsOrganizationPlan {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsOrganizationPlan::Read => "read".to_string(),
            InstallationPermissionsOrganizationPlan::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsOrganizationProjects {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsOrganizationProjects {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsOrganizationProjects::Read => "read".to_string(),
            InstallationPermissionsOrganizationProjects::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsOrganizationSecrets {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsOrganizationSecrets {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsOrganizationSecrets::Read => "read".to_string(),
            InstallationPermissionsOrganizationSecrets::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsOrganizationSelfHostedRunners {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsOrganizationSelfHostedRunners {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsOrganizationSelfHostedRunners::Read => "read".to_string(),
            InstallationPermissionsOrganizationSelfHostedRunners::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsOrganizationUserBlocking {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsOrganizationUserBlocking {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsOrganizationUserBlocking::Read => "read".to_string(),
            InstallationPermissionsOrganizationUserBlocking::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsPackages {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsPackages {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsPackages::Read => "read".to_string(),
            InstallationPermissionsPackages::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsPages {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsPages {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsPages::Read => "read".to_string(),
            InstallationPermissionsPages::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsPullRequests {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsPullRequests {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsPullRequests::Read => "read".to_string(),
            InstallationPermissionsPullRequests::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsRepositoryHooks {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsRepositoryHooks {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsRepositoryHooks::Read => "read".to_string(),
            InstallationPermissionsRepositoryHooks::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsRepositoryProjects {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsRepositoryProjects {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsRepositoryProjects::Read => "read".to_string(),
            InstallationPermissionsRepositoryProjects::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsSecretScanningAlerts {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsSecretScanningAlerts {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsSecretScanningAlerts::Read => "read".to_string(),
            InstallationPermissionsSecretScanningAlerts::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsSecrets {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsSecrets {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsSecrets::Read => "read".to_string(),
            InstallationPermissionsSecrets::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsSecurityEvents {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsSecurityEvents {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsSecurityEvents::Read => "read".to_string(),
            InstallationPermissionsSecurityEvents::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsSecurityScanningAlert {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsSecurityScanningAlert {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsSecurityScanningAlert::Read => "read".to_string(),
            InstallationPermissionsSecurityScanningAlert::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsSingleFile {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsSingleFile {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsSingleFile::Read => "read".to_string(),
            InstallationPermissionsSingleFile::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsStatuses {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsStatuses {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsStatuses::Read => "read".to_string(),
            InstallationPermissionsStatuses::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsTeamDiscussions {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsTeamDiscussions {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsTeamDiscussions::Read => "read".to_string(),
            InstallationPermissionsTeamDiscussions::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsVulnerabilityAlerts {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsVulnerabilityAlerts {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsVulnerabilityAlerts::Read => "read".to_string(),
            InstallationPermissionsVulnerabilityAlerts::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsWorkflows {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsWorkflows {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsWorkflows::Read => "read".to_string(),
            InstallationPermissionsWorkflows::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationPermissions {
    pub actions: Option<InstallationPermissionsActions>,
    pub administration: Option<InstallationPermissionsAdministration>,
    pub checks: Option<InstallationPermissionsChecks>,
    pub content_references: Option<InstallationPermissionsContentReferences>,
    pub contents: Option<InstallationPermissionsContents>,
    pub deployments: Option<InstallationPermissionsDeployments>,
    pub discussions: Option<InstallationPermissionsDiscussions>,
    pub emails: Option<InstallationPermissionsEmails>,
    pub environments: Option<InstallationPermissionsEnvironments>,
    pub issues: Option<InstallationPermissionsIssues>,
    pub members: Option<InstallationPermissionsMembers>,
    pub metadata: Option<InstallationPermissionsMetadata>,
    pub organization_administration: Option<InstallationPermissionsOrganizationAdministration>,
    pub organization_events: Option<InstallationPermissionsOrganizationEvents>,
    pub organization_hooks: Option<InstallationPermissionsOrganizationHooks>,
    pub organization_packages: Option<InstallationPermissionsOrganizationPackages>,
    pub organization_plan: Option<InstallationPermissionsOrganizationPlan>,
    pub organization_projects: Option<InstallationPermissionsOrganizationProjects>,
    pub organization_secrets: Option<InstallationPermissionsOrganizationSecrets>,
    pub organization_self_hosted_runners:
        Option<InstallationPermissionsOrganizationSelfHostedRunners>,
    pub organization_user_blocking: Option<InstallationPermissionsOrganizationUserBlocking>,
    pub packages: Option<InstallationPermissionsPackages>,
    pub pages: Option<InstallationPermissionsPages>,
    pub pull_requests: Option<InstallationPermissionsPullRequests>,
    pub repository_hooks: Option<InstallationPermissionsRepositoryHooks>,
    pub repository_projects: Option<InstallationPermissionsRepositoryProjects>,
    pub secret_scanning_alerts: Option<InstallationPermissionsSecretScanningAlerts>,
    pub secrets: Option<InstallationPermissionsSecrets>,
    pub security_events: Option<InstallationPermissionsSecurityEvents>,
    pub security_scanning_alert: Option<InstallationPermissionsSecurityScanningAlert>,
    pub single_file: Option<InstallationPermissionsSingleFile>,
    pub statuses: Option<InstallationPermissionsStatuses>,
    pub team_discussions: Option<InstallationPermissionsTeamDiscussions>,
    pub vulnerability_alerts: Option<InstallationPermissionsVulnerabilityAlerts>,
    pub workflows: Option<InstallationPermissionsWorkflows>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationRepositorySelection {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "selected")]
    Selected,
}
impl ToString for InstallationRepositorySelection {
    fn to_string(&self) -> String {
        match self {
            InstallationRepositorySelection::All => "all".to_string(),
            InstallationRepositorySelection::Selected => "selected".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum InstallationSuspendedBy {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationTargetType {
    User,
    Organization,
}
impl ToString for InstallationTargetType {
    fn to_string(&self) -> String {
        match self {
            InstallationTargetType::User => "User".to_string(),
            InstallationTargetType::Organization => "Organization".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum InstallationUpdatedAt {
    Variant0(chrono::DateTime<chrono::offset::Utc>),
    Variant1(u64),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationcreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for InstallationcreatedAction {
    fn to_string(&self) -> String {
        match self {
            InstallationcreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationcreatedRepositoriesItem {
    pub full_name: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationdeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for InstallationdeletedAction {
    fn to_string(&self) -> String {
        match self {
            InstallationdeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationdeletedRepositoriesItem {
    pub full_name: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationnewPermissionsAcceptedAction {
    #[serde(rename = "new_permissions_accepted")]
    NewPermissionsAccepted,
}
impl ToString for InstallationnewPermissionsAcceptedAction {
    fn to_string(&self) -> String {
        match self {
            InstallationnewPermissionsAcceptedAction::NewPermissionsAccepted => {
                "new_permissions_accepted".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationnewPermissionsAcceptedRepositoriesItem {
    pub full_name: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationsuspendAction {
    #[serde(rename = "suspend")]
    Suspend,
}
impl ToString for InstallationsuspendAction {
    fn to_string(&self) -> String {
        match self {
            InstallationsuspendAction::Suspend => "suspend".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationsuspendInstallationVariant1 {
    pub suspended_at: chrono::DateTime<chrono::offset::Utc>,
    pub suspended_by: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationsuspendInstallation {
    #[serde(flatten)]
    pub variant_0: Installation,
    #[serde(flatten)]
    pub variant_1: InstallationsuspendInstallationVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationsuspendRepositoriesItem {
    pub full_name: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationunsuspendAction {
    #[serde(rename = "unsuspend")]
    Unsuspend,
}
impl ToString for InstallationunsuspendAction {
    fn to_string(&self) -> String {
        match self {
            InstallationunsuspendAction::Unsuspend => "unsuspend".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationunsuspendInstallationVariant1 {
    pub suspended_at: (),
    pub suspended_by: (),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationunsuspendInstallation {
    #[serde(flatten)]
    pub variant_0: Installation,
    #[serde(flatten)]
    pub variant_1: InstallationunsuspendInstallationVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationunsuspendRepositoriesItem {
    pub full_name: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationRepositoriesaddedAction {
    #[serde(rename = "added")]
    Added,
}
impl ToString for InstallationRepositoriesaddedAction {
    fn to_string(&self) -> String {
        match self {
            InstallationRepositoriesaddedAction::Added => "added".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationRepositoriesaddedRepositoriesAddedItem {
    pub full_name: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationRepositoriesaddedRepositoriesRemovedItem {
    pub full_name: Option<String>,
    #[doc = "Unique identifier of the repository"]
    pub id: Option<u64>,
    #[doc = "The name of the repository."]
    pub name: Option<String>,
    pub node_id: Option<String>,
    #[doc = "Whether the repository is private or public."]
    pub private: Option<bool>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationRepositoriesaddedRepositorySelection {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "selected")]
    Selected,
}
impl ToString for InstallationRepositoriesaddedRepositorySelection {
    fn to_string(&self) -> String {
        match self {
            InstallationRepositoriesaddedRepositorySelection::All => "all".to_string(),
            InstallationRepositoriesaddedRepositorySelection::Selected => "selected".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum InstallationRepositoriesaddedRequester {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationRepositoriesremovedAction {
    #[serde(rename = "removed")]
    Removed,
}
impl ToString for InstallationRepositoriesremovedAction {
    fn to_string(&self) -> String {
        match self {
            InstallationRepositoriesremovedAction::Removed => "removed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationRepositoriesremovedRepositoriesAddedItem {
    pub full_name: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationRepositoriesremovedRepositoriesRemovedItem {
    pub full_name: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationRepositoriesremovedRepositorySelection {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "selected")]
    Selected,
}
impl ToString for InstallationRepositoriesremovedRepositorySelection {
    fn to_string(&self) -> String {
        match self {
            InstallationRepositoriesremovedRepositorySelection::All => "all".to_string(),
            InstallationRepositoriesremovedRepositorySelection::Selected => "selected".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum InstallationRepositoriesremovedRequester {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueActiveLockReason {
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "off-topic")]
    OffTopic,
    #[serde(rename = "too heated")]
    TooHeated,
    #[serde(rename = "spam")]
    Spam,
}
impl ToString for IssueActiveLockReason {
    fn to_string(&self) -> String {
        match self {
            IssueActiveLockReason::Resolved => "resolved".to_string(),
            IssueActiveLockReason::OffTopic => "off-topic".to_string(),
            IssueActiveLockReason::TooHeated => "too heated".to_string(),
            IssueActiveLockReason::Spam => "spam".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum IssueAssignee {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum IssueMilestone {
    Variant0(Milestone),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum IssuePerformedViaGithubApp {
    Variant0(App),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuePullRequest {
    pub diff_url: Option<String>,
    pub html_url: Option<String>,
    pub patch_url: Option<String>,
    pub url: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for IssueState {
    fn to_string(&self) -> String {
        match self {
            IssueState::Open => "open".to_string(),
            IssueState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum IssueCommentPerformedViaGithubApp {
    Variant0(App),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueCommentcreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for IssueCommentcreatedAction {
    fn to_string(&self) -> String {
        match self {
            IssueCommentcreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum IssueCommentcreatedIssueVariant1Assignee {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentcreatedIssueVariant1PullRequest {
    pub diff_url: String,
    pub html_url: String,
    pub patch_url: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueCommentcreatedIssueVariant1State {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for IssueCommentcreatedIssueVariant1State {
    fn to_string(&self) -> String {
        match self {
            IssueCommentcreatedIssueVariant1State::Open => "open".to_string(),
            IssueCommentcreatedIssueVariant1State::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentcreatedIssueVariant1 {
    pub assignee: IssueCommentcreatedIssueVariant1Assignee,
    pub labels: Vec<Label>,
    pub locked: bool,
    pub pull_request: Option<IssueCommentcreatedIssueVariant1PullRequest>,
    #[doc = "State of the issue; either 'open' or 'closed'"]
    pub state: IssueCommentcreatedIssueVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentcreatedIssue {
    #[serde(flatten)]
    pub variant_0: Issue,
    #[serde(flatten)]
    pub variant_1: IssueCommentcreatedIssueVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueCommentdeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for IssueCommentdeletedAction {
    fn to_string(&self) -> String {
        match self {
            IssueCommentdeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum IssueCommentdeletedIssueVariant1Assignee {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentdeletedIssueVariant1PullRequest {
    pub diff_url: String,
    pub html_url: String,
    pub patch_url: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueCommentdeletedIssueVariant1State {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for IssueCommentdeletedIssueVariant1State {
    fn to_string(&self) -> String {
        match self {
            IssueCommentdeletedIssueVariant1State::Open => "open".to_string(),
            IssueCommentdeletedIssueVariant1State::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentdeletedIssueVariant1 {
    pub assignee: IssueCommentdeletedIssueVariant1Assignee,
    pub labels: Vec<Label>,
    pub locked: bool,
    pub pull_request: Option<IssueCommentdeletedIssueVariant1PullRequest>,
    #[doc = "State of the issue; either 'open' or 'closed'"]
    pub state: IssueCommentdeletedIssueVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentdeletedIssue {
    #[serde(flatten)]
    pub variant_0: Issue,
    #[serde(flatten)]
    pub variant_1: IssueCommentdeletedIssueVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueCommenteditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for IssueCommenteditedAction {
    fn to_string(&self) -> String {
        match self {
            IssueCommenteditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommenteditedChangesBody {
    #[doc = "The previous version of the body."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommenteditedChanges {
    pub body: Option<IssueCommenteditedChangesBody>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum IssueCommenteditedIssueVariant1Assignee {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommenteditedIssueVariant1PullRequest {
    pub diff_url: String,
    pub html_url: String,
    pub patch_url: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueCommenteditedIssueVariant1State {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for IssueCommenteditedIssueVariant1State {
    fn to_string(&self) -> String {
        match self {
            IssueCommenteditedIssueVariant1State::Open => "open".to_string(),
            IssueCommenteditedIssueVariant1State::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommenteditedIssueVariant1 {
    pub assignee: IssueCommenteditedIssueVariant1Assignee,
    pub labels: Vec<Label>,
    pub locked: bool,
    pub pull_request: Option<IssueCommenteditedIssueVariant1PullRequest>,
    #[doc = "State of the issue; either 'open' or 'closed'"]
    pub state: IssueCommenteditedIssueVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommenteditedIssue {
    #[serde(flatten)]
    pub variant_0: Issue,
    #[serde(flatten)]
    pub variant_1: IssueCommenteditedIssueVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesassignedAction {
    #[serde(rename = "assigned")]
    Assigned,
}
impl ToString for IssuesassignedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesassignedAction::Assigned => "assigned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum IssuesassignedAssignee {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesclosedAction {
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for IssuesclosedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesclosedAction::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesclosedIssueVariant1State {
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for IssuesclosedIssueVariant1State {
    fn to_string(&self) -> String {
        match self {
            IssuesclosedIssueVariant1State::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesclosedIssueVariant1 {
    pub closed_at: String,
    pub state: IssuesclosedIssueVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesclosedIssue {
    #[serde(flatten)]
    pub variant_0: Issue,
    #[serde(flatten)]
    pub variant_1: IssuesclosedIssueVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesdeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for IssuesdeletedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesdeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesdemilestonedAction {
    #[serde(rename = "demilestoned")]
    Demilestoned,
}
impl ToString for IssuesdemilestonedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesdemilestonedAction::Demilestoned => "demilestoned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesdemilestonedIssueVariant1 {
    pub milestone: (),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesdemilestonedIssue {
    #[serde(flatten)]
    pub variant_0: Issue,
    #[serde(flatten)]
    pub variant_1: IssuesdemilestonedIssueVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueseditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for IssueseditedAction {
    fn to_string(&self) -> String {
        match self {
            IssueseditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueseditedChangesBody {
    #[doc = "The previous version of the body."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueseditedChangesTitle {
    #[doc = "The previous version of the title."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueseditedChanges {
    pub body: Option<IssueseditedChangesBody>,
    pub title: Option<IssueseditedChangesTitle>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueslabeledAction {
    #[serde(rename = "labeled")]
    Labeled,
}
impl ToString for IssueslabeledAction {
    fn to_string(&self) -> String {
        match self {
            IssueslabeledAction::Labeled => "labeled".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueslockedAction {
    #[serde(rename = "locked")]
    Locked,
}
impl ToString for IssueslockedAction {
    fn to_string(&self) -> String {
        match self {
            IssueslockedAction::Locked => "locked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueslockedIssueVariant1ActiveLockReason {
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "off-topic")]
    OffTopic,
    #[serde(rename = "too heated")]
    TooHeated,
    #[serde(rename = "spam")]
    Spam,
}
impl ToString for IssueslockedIssueVariant1ActiveLockReason {
    fn to_string(&self) -> String {
        match self {
            IssueslockedIssueVariant1ActiveLockReason::Resolved => "resolved".to_string(),
            IssueslockedIssueVariant1ActiveLockReason::OffTopic => "off-topic".to_string(),
            IssueslockedIssueVariant1ActiveLockReason::TooHeated => "too heated".to_string(),
            IssueslockedIssueVariant1ActiveLockReason::Spam => "spam".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueslockedIssueVariant1 {
    pub active_lock_reason: Option<IssueslockedIssueVariant1ActiveLockReason>,
    pub locked: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueslockedIssue {
    #[serde(flatten)]
    pub variant_0: Issue,
    #[serde(flatten)]
    pub variant_1: IssueslockedIssueVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesmilestonedAction {
    #[serde(rename = "milestoned")]
    Milestoned,
}
impl ToString for IssuesmilestonedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesmilestonedAction::Milestoned => "milestoned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesmilestonedIssueVariant1 {
    pub milestone: Milestone,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesmilestonedIssue {
    #[serde(flatten)]
    pub variant_0: Issue,
    #[serde(flatten)]
    pub variant_1: IssuesmilestonedIssueVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesopenedAction {
    #[serde(rename = "opened")]
    Opened,
}
impl ToString for IssuesopenedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesopenedAction::Opened => "opened".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesopenedChanges {
    pub old_issue: Issue,
    pub old_repository: Repository,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesopenedIssueVariant1State {
    #[serde(rename = "open")]
    Open,
}
impl ToString for IssuesopenedIssueVariant1State {
    fn to_string(&self) -> String {
        match self {
            IssuesopenedIssueVariant1State::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesopenedIssueVariant1 {
    pub closed_at: (),
    pub state: IssuesopenedIssueVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesopenedIssue {
    #[serde(flatten)]
    pub variant_0: Issue,
    #[serde(flatten)]
    pub variant_1: IssuesopenedIssueVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuespinnedAction {
    #[serde(rename = "pinned")]
    Pinned,
}
impl ToString for IssuespinnedAction {
    fn to_string(&self) -> String {
        match self {
            IssuespinnedAction::Pinned => "pinned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesreopenedAction {
    #[serde(rename = "reopened")]
    Reopened,
}
impl ToString for IssuesreopenedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesreopenedAction::Reopened => "reopened".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesreopenedIssueVariant1State {
    #[serde(rename = "open")]
    Open,
}
impl ToString for IssuesreopenedIssueVariant1State {
    fn to_string(&self) -> String {
        match self {
            IssuesreopenedIssueVariant1State::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesreopenedIssueVariant1 {
    pub state: IssuesreopenedIssueVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesreopenedIssue {
    #[serde(flatten)]
    pub variant_0: Issue,
    #[serde(flatten)]
    pub variant_1: IssuesreopenedIssueVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuestransferredAction {
    #[serde(rename = "transferred")]
    Transferred,
}
impl ToString for IssuestransferredAction {
    fn to_string(&self) -> String {
        match self {
            IssuestransferredAction::Transferred => "transferred".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuestransferredChanges {
    pub new_issue: Issue,
    pub new_repository: Repository,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesunassignedAction {
    #[serde(rename = "unassigned")]
    Unassigned,
}
impl ToString for IssuesunassignedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesunassignedAction::Unassigned => "unassigned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum IssuesunassignedAssignee {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesunlabeledAction {
    #[serde(rename = "unlabeled")]
    Unlabeled,
}
impl ToString for IssuesunlabeledAction {
    fn to_string(&self) -> String {
        match self {
            IssuesunlabeledAction::Unlabeled => "unlabeled".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesunlockedAction {
    #[serde(rename = "unlocked")]
    Unlocked,
}
impl ToString for IssuesunlockedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesunlockedAction::Unlocked => "unlocked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesunlockedIssueVariant1 {
    pub active_lock_reason: (),
    pub locked: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesunlockedIssue {
    #[serde(flatten)]
    pub variant_0: Issue,
    #[serde(flatten)]
    pub variant_1: IssuesunlockedIssueVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesunpinnedAction {
    #[serde(rename = "unpinned")]
    Unpinned,
}
impl ToString for IssuesunpinnedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesunpinnedAction::Unpinned => "unpinned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum LabelcreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for LabelcreatedAction {
    fn to_string(&self) -> String {
        match self {
            LabelcreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum LabeldeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for LabeldeletedAction {
    fn to_string(&self) -> String {
        match self {
            LabeldeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum LabeleditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for LabeleditedAction {
    fn to_string(&self) -> String {
        match self {
            LabeleditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct LabeleditedChangesColor {
    #[doc = "The previous version of the color if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct LabeleditedChangesDescription {
    #[doc = "The previous version of the description if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct LabeleditedChangesName {
    #[doc = "The previous version of the name if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct LabeleditedChanges {
    pub color: Option<LabeleditedChangesColor>,
    pub description: Option<LabeleditedChangesDescription>,
    pub name: Option<LabeleditedChangesName>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchaseAccount {
    pub id: u64,
    pub login: String,
    pub node_id: String,
    pub organization_billing_email: String,
    #[serde(rename = "type")]
    pub ttype: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasePlan {
    pub bullets: Vec<String>,
    pub description: String,
    pub has_free_trial: bool,
    pub id: u64,
    pub monthly_price_in_cents: u64,
    pub name: String,
    pub price_model: String,
    pub unit_name: Option<String>,
    pub yearly_price_in_cents: u64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MarketplacePurchasecancelledAction {
    #[serde(rename = "cancelled")]
    Cancelled,
}
impl ToString for MarketplacePurchasecancelledAction {
    fn to_string(&self) -> String {
        match self {
            MarketplacePurchasecancelledAction::Cancelled => "cancelled".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasecancelledMarketplacePurchaseVariant1 {
    pub next_billing_date: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasecancelledMarketplacePurchase {
    #[serde(flatten)]
    pub variant_0: MarketplacePurchase,
    #[serde(flatten)]
    pub variant_1: MarketplacePurchasecancelledMarketplacePurchaseVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasecancelledSender {
    pub avatar_url: String,
    pub email: String,
    pub events_url: String,
    pub followers_url: String,
    pub following_url: String,
    pub gists_url: String,
    pub gravatar_id: String,
    pub html_url: String,
    pub id: u64,
    pub login: String,
    pub organizations_url: String,
    pub received_events_url: String,
    pub repos_url: String,
    pub site_admin: bool,
    pub starred_url: String,
    pub subscriptions_url: String,
    #[serde(rename = "type")]
    pub ttype: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MarketplacePurchasechangedAction {
    #[serde(rename = "changed")]
    Changed,
}
impl ToString for MarketplacePurchasechangedAction {
    fn to_string(&self) -> String {
        match self {
            MarketplacePurchasechangedAction::Changed => "changed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasechangedMarketplacePurchaseVariant1 {
    pub next_billing_date: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasechangedMarketplacePurchase {
    #[serde(flatten)]
    pub variant_0: MarketplacePurchase,
    #[serde(flatten)]
    pub variant_1: MarketplacePurchasechangedMarketplacePurchaseVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasechangedSender {
    pub avatar_url: String,
    pub email: String,
    pub events_url: String,
    pub followers_url: String,
    pub following_url: String,
    pub gists_url: String,
    pub gravatar_id: String,
    pub html_url: String,
    pub id: u64,
    pub login: String,
    pub organizations_url: String,
    pub received_events_url: String,
    pub repos_url: String,
    pub site_admin: bool,
    pub starred_url: String,
    pub subscriptions_url: String,
    #[serde(rename = "type")]
    pub ttype: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MarketplacePurchasependingChangeAction {
    #[serde(rename = "pending_change")]
    PendingChange,
}
impl ToString for MarketplacePurchasependingChangeAction {
    fn to_string(&self) -> String {
        match self {
            MarketplacePurchasependingChangeAction::PendingChange => "pending_change".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasependingChangeMarketplacePurchaseVariant1 {
    pub next_billing_date: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasependingChangeMarketplacePurchase {
    #[serde(flatten)]
    pub variant_0: MarketplacePurchase,
    #[serde(flatten)]
    pub variant_1: MarketplacePurchasependingChangeMarketplacePurchaseVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasependingChangeSender {
    pub avatar_url: String,
    pub email: String,
    pub events_url: String,
    pub followers_url: String,
    pub following_url: String,
    pub gists_url: String,
    pub gravatar_id: String,
    pub html_url: String,
    pub id: u64,
    pub login: String,
    pub organizations_url: String,
    pub received_events_url: String,
    pub repos_url: String,
    pub site_admin: bool,
    pub starred_url: String,
    pub subscriptions_url: String,
    #[serde(rename = "type")]
    pub ttype: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MarketplacePurchasependingChangeCancelledAction {
    #[serde(rename = "pending_change_cancelled")]
    PendingChangeCancelled,
}
impl ToString for MarketplacePurchasependingChangeCancelledAction {
    fn to_string(&self) -> String {
        match self {
            MarketplacePurchasependingChangeCancelledAction::PendingChangeCancelled => {
                "pending_change_cancelled".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasependingChangeCancelledMarketplacePurchaseVariant1 {
    pub next_billing_date: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasependingChangeCancelledMarketplacePurchase {
    #[serde(flatten)]
    pub variant_0: MarketplacePurchase,
    #[serde(flatten)]
    pub variant_1: MarketplacePurchasependingChangeCancelledMarketplacePurchaseVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasependingChangeCancelledSender {
    pub avatar_url: String,
    pub email: String,
    pub events_url: String,
    pub followers_url: String,
    pub following_url: String,
    pub gists_url: String,
    pub gravatar_id: String,
    pub html_url: String,
    pub id: u64,
    pub login: String,
    pub organizations_url: String,
    pub received_events_url: String,
    pub repos_url: String,
    pub site_admin: bool,
    pub starred_url: String,
    pub subscriptions_url: String,
    #[serde(rename = "type")]
    pub ttype: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MarketplacePurchasepurchasedAction {
    #[serde(rename = "purchased")]
    Purchased,
}
impl ToString for MarketplacePurchasepurchasedAction {
    fn to_string(&self) -> String {
        match self {
            MarketplacePurchasepurchasedAction::Purchased => "purchased".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasepurchasedMarketplacePurchaseVariant1 {
    pub next_billing_date: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasepurchasedMarketplacePurchase {
    #[serde(flatten)]
    pub variant_0: MarketplacePurchase,
    #[serde(flatten)]
    pub variant_1: MarketplacePurchasepurchasedMarketplacePurchaseVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasepurchasedSender {
    pub avatar_url: String,
    pub email: String,
    pub events_url: String,
    pub followers_url: String,
    pub following_url: String,
    pub gists_url: String,
    pub gravatar_id: String,
    pub html_url: String,
    pub id: u64,
    pub login: String,
    pub organizations_url: String,
    pub received_events_url: String,
    pub repos_url: String,
    pub site_admin: bool,
    pub starred_url: String,
    pub subscriptions_url: String,
    #[serde(rename = "type")]
    pub ttype: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MemberaddedAction {
    #[serde(rename = "added")]
    Added,
}
impl ToString for MemberaddedAction {
    fn to_string(&self) -> String {
        match self {
            MemberaddedAction::Added => "added".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MemberaddedChangesPermissionTo {
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "admin")]
    Admin,
}
impl ToString for MemberaddedChangesPermissionTo {
    fn to_string(&self) -> String {
        match self {
            MemberaddedChangesPermissionTo::Write => "write".to_string(),
            MemberaddedChangesPermissionTo::Admin => "admin".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MemberaddedChangesPermission {
    pub to: MemberaddedChangesPermissionTo,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MemberaddedChanges {
    pub permission: Option<MemberaddedChangesPermission>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MembereditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for MembereditedAction {
    fn to_string(&self) -> String {
        match self {
            MembereditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MembereditedChangesOldPermission {
    #[doc = "The previous permissions of the collaborator if the action was edited."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MembereditedChanges {
    pub old_permission: MembereditedChangesOldPermission,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MemberremovedAction {
    #[serde(rename = "removed")]
    Removed,
}
impl ToString for MemberremovedAction {
    fn to_string(&self) -> String {
        match self {
            MemberremovedAction::Removed => "removed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MembershipaddedAction {
    #[serde(rename = "added")]
    Added,
}
impl ToString for MembershipaddedAction {
    fn to_string(&self) -> String {
        match self {
            MembershipaddedAction::Added => "added".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MembershipaddedScope {
    #[serde(rename = "team")]
    Team,
}
impl ToString for MembershipaddedScope {
    fn to_string(&self) -> String {
        match self {
            MembershipaddedScope::Team => "team".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MembershipremovedAction {
    #[serde(rename = "removed")]
    Removed,
}
impl ToString for MembershipremovedAction {
    fn to_string(&self) -> String {
        match self {
            MembershipremovedAction::Removed => "removed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MembershipremovedScope {
    #[serde(rename = "team")]
    Team,
    #[serde(rename = "organization")]
    Organization,
}
impl ToString for MembershipremovedScope {
    fn to_string(&self) -> String {
        match self {
            MembershipremovedScope::Team => "team".to_string(),
            MembershipremovedScope::Organization => "organization".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum MembershipremovedTeam {
    Variant0(Team),
    Variant1 {
        deleted: Option<bool>,
        id: u64,
        name: String,
    },
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MetadeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for MetadeletedAction {
    fn to_string(&self) -> String {
        match self {
            MetadeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MetadeletedHookConfigContentType {
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "form")]
    Form,
}
impl ToString for MetadeletedHookConfigContentType {
    fn to_string(&self) -> String {
        match self {
            MetadeletedHookConfigContentType::Json => "json".to_string(),
            MetadeletedHookConfigContentType::Form => "form".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MetadeletedHookConfig {
    pub content_type: MetadeletedHookConfigContentType,
    pub insecure_ssl: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MetadeletedHook {
    pub active: bool,
    pub config: MetadeletedHookConfig,
    pub created_at: String,
    pub events: WebhookEvents,
    pub id: u64,
    pub name: String,
    #[serde(rename = "type")]
    pub ttype: String,
    pub updated_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MilestoneState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for MilestoneState {
    fn to_string(&self) -> String {
        match self {
            MilestoneState::Open => "open".to_string(),
            MilestoneState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MilestoneclosedAction {
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for MilestoneclosedAction {
    fn to_string(&self) -> String {
        match self {
            MilestoneclosedAction::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MilestoneclosedMilestoneVariant1State {
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for MilestoneclosedMilestoneVariant1State {
    fn to_string(&self) -> String {
        match self {
            MilestoneclosedMilestoneVariant1State::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneclosedMilestoneVariant1 {
    pub closed_at: String,
    pub state: MilestoneclosedMilestoneVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneclosedMilestone {
    #[serde(flatten)]
    pub variant_0: Milestone,
    #[serde(flatten)]
    pub variant_1: MilestoneclosedMilestoneVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MilestonecreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for MilestonecreatedAction {
    fn to_string(&self) -> String {
        match self {
            MilestonecreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MilestonecreatedMilestoneVariant1State {
    #[serde(rename = "open")]
    Open,
}
impl ToString for MilestonecreatedMilestoneVariant1State {
    fn to_string(&self) -> String {
        match self {
            MilestonecreatedMilestoneVariant1State::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestonecreatedMilestoneVariant1 {
    pub closed_at: (),
    pub state: MilestonecreatedMilestoneVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestonecreatedMilestone {
    #[serde(flatten)]
    pub variant_0: Milestone,
    #[serde(flatten)]
    pub variant_1: MilestonecreatedMilestoneVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MilestonedeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for MilestonedeletedAction {
    fn to_string(&self) -> String {
        match self {
            MilestonedeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MilestoneeditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for MilestoneeditedAction {
    fn to_string(&self) -> String {
        match self {
            MilestoneeditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneeditedChangesDescription {
    #[doc = "The previous version of the description if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneeditedChangesDueOn {
    #[doc = "The previous version of the due date if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneeditedChangesTitle {
    #[doc = "The previous version of the title if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneeditedChanges {
    pub description: Option<MilestoneeditedChangesDescription>,
    pub due_on: Option<MilestoneeditedChangesDueOn>,
    pub title: Option<MilestoneeditedChangesTitle>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MilestoneopenedAction {
    #[serde(rename = "opened")]
    Opened,
}
impl ToString for MilestoneopenedAction {
    fn to_string(&self) -> String {
        match self {
            MilestoneopenedAction::Opened => "opened".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MilestoneopenedMilestoneVariant1State {
    #[serde(rename = "open")]
    Open,
}
impl ToString for MilestoneopenedMilestoneVariant1State {
    fn to_string(&self) -> String {
        match self {
            MilestoneopenedMilestoneVariant1State::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneopenedMilestoneVariant1 {
    pub closed_at: (),
    pub state: MilestoneopenedMilestoneVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneopenedMilestone {
    #[serde(flatten)]
    pub variant_0: Milestone,
    #[serde(flatten)]
    pub variant_1: MilestoneopenedMilestoneVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum OrgBlockblockedAction {
    #[serde(rename = "blocked")]
    Blocked,
}
impl ToString for OrgBlockblockedAction {
    fn to_string(&self) -> String {
        match self {
            OrgBlockblockedAction::Blocked => "blocked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum OrgBlockunblockedAction {
    #[serde(rename = "unblocked")]
    Unblocked,
}
impl ToString for OrgBlockunblockedAction {
    fn to_string(&self) -> String {
        match self {
            OrgBlockunblockedAction::Unblocked => "unblocked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum OrganizationdeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for OrganizationdeletedAction {
    fn to_string(&self) -> String {
        match self {
            OrganizationdeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum OrganizationmemberAddedAction {
    #[serde(rename = "member_added")]
    MemberAdded,
}
impl ToString for OrganizationmemberAddedAction {
    fn to_string(&self) -> String {
        match self {
            OrganizationmemberAddedAction::MemberAdded => "member_added".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum OrganizationmemberInvitedAction {
    #[serde(rename = "member_invited")]
    MemberInvited,
}
impl ToString for OrganizationmemberInvitedAction {
    fn to_string(&self) -> String {
        match self {
            OrganizationmemberInvitedAction::MemberInvited => "member_invited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum OrganizationmemberInvitedInvitationFailedAt {
    Variant0(chrono::DateTime<chrono::offset::Utc>),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OrganizationmemberInvitedInvitation {
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub email: Option<String>,
    pub failed_at: OrganizationmemberInvitedInvitationFailedAt,
    pub failed_reason: Option<String>,
    pub id: f64,
    pub invitation_teams_url: String,
    pub inviter: User,
    pub login: String,
    pub node_id: String,
    pub role: String,
    pub team_count: f64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum OrganizationmemberRemovedAction {
    #[serde(rename = "member_removed")]
    MemberRemoved,
}
impl ToString for OrganizationmemberRemovedAction {
    fn to_string(&self) -> String {
        match self {
            OrganizationmemberRemovedAction::MemberRemoved => "member_removed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum OrganizationrenamedAction {
    #[serde(rename = "renamed")]
    Renamed,
}
impl ToString for OrganizationrenamedAction {
    fn to_string(&self) -> String {
        match self {
            OrganizationrenamedAction::Renamed => "renamed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PackagepublishedAction {
    #[serde(rename = "published")]
    Published,
}
impl ToString for PackagepublishedAction {
    fn to_string(&self) -> String {
        match self {
            PackagepublishedAction::Published => "published".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackagepublishedPackagePackageVersionPackageFilesItem {
    pub content_type: String,
    pub created_at: String,
    pub download_url: String,
    pub id: u64,
    #[serde(rename = "md5")]
    pub md_5: String,
    pub name: String,
    #[serde(rename = "sha1")]
    pub sha_1: String,
    #[serde(rename = "sha256")]
    pub sha_256: String,
    pub size: u64,
    pub state: String,
    pub updated_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackagepublishedPackagePackageVersionRelease {
    pub author: User,
    pub created_at: String,
    pub draft: bool,
    pub html_url: String,
    pub id: u64,
    pub name: String,
    pub prerelease: bool,
    pub published_at: String,
    pub tag_name: String,
    pub target_commitish: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackagepublishedPackagePackageVersion {
    pub author: User,
    pub body: String,
    pub body_html: String,
    pub created_at: String,
    pub description: String,
    pub docker_metadata: Vec<serde_json::Value>,
    pub draft: bool,
    pub html_url: String,
    pub id: u64,
    pub installation_command: String,
    pub manifest: String,
    pub metadata: Vec<serde_json::Value>,
    pub name: String,
    pub package_files: Vec<PackagepublishedPackagePackageVersionPackageFilesItem>,
    pub prerelease: bool,
    pub release: PackagepublishedPackagePackageVersionRelease,
    pub source_url: String,
    pub summary: String,
    pub tag_name: String,
    pub target_commitish: String,
    pub target_oid: String,
    pub updated_at: String,
    pub version: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackagepublishedPackageRegistry {
    pub about_url: String,
    pub name: String,
    #[serde(rename = "type")]
    pub ttype: String,
    pub url: String,
    pub vendor: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackagepublishedPackage {
    pub created_at: String,
    pub description: Option<String>,
    pub ecosystem: String,
    pub html_url: String,
    pub id: u64,
    pub name: String,
    pub namespace: String,
    pub owner: User,
    pub package_type: String,
    pub package_version: PackagepublishedPackagePackageVersion,
    pub registry: PackagepublishedPackageRegistry,
    pub updated_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PackageupdatedAction {
    #[serde(rename = "updated")]
    Updated,
}
impl ToString for PackageupdatedAction {
    fn to_string(&self) -> String {
        match self {
            PackageupdatedAction::Updated => "updated".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackageupdatedPackagePackageVersionPackageFilesItem {
    pub content_type: String,
    pub created_at: String,
    pub download_url: String,
    pub id: u64,
    #[serde(rename = "md5")]
    pub md_5: String,
    pub name: String,
    #[serde(rename = "sha1")]
    pub sha_1: String,
    #[serde(rename = "sha256")]
    pub sha_256: String,
    pub size: u64,
    pub state: String,
    pub updated_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackageupdatedPackagePackageVersionRelease {
    pub author: User,
    pub created_at: String,
    pub draft: bool,
    pub html_url: String,
    pub id: u64,
    pub name: String,
    pub prerelease: bool,
    pub published_at: String,
    pub tag_name: String,
    pub target_commitish: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackageupdatedPackagePackageVersion {
    pub author: User,
    pub body: String,
    pub body_html: String,
    pub created_at: String,
    pub description: String,
    pub docker_metadata: Vec<serde_json::Value>,
    pub draft: bool,
    pub html_url: String,
    pub id: u64,
    pub installation_command: String,
    pub manifest: String,
    pub metadata: Vec<serde_json::Value>,
    pub name: String,
    pub package_files: Vec<PackageupdatedPackagePackageVersionPackageFilesItem>,
    pub prerelease: bool,
    pub release: PackageupdatedPackagePackageVersionRelease,
    pub source_url: String,
    pub summary: String,
    pub tag_name: String,
    pub target_commitish: String,
    pub target_oid: String,
    pub updated_at: String,
    pub version: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackageupdatedPackageRegistry {
    pub about_url: String,
    pub name: String,
    #[serde(rename = "type")]
    pub ttype: String,
    pub url: String,
    pub vendor: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackageupdatedPackage {
    pub created_at: String,
    pub description: Option<String>,
    pub ecosystem: String,
    pub html_url: String,
    pub id: u64,
    pub name: String,
    pub namespace: String,
    pub owner: User,
    pub package_type: String,
    pub package_version: PackageupdatedPackagePackageVersion,
    pub registry: PackageupdatedPackageRegistry,
    pub updated_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PageBuildeventBuildError {
    pub message: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PageBuildeventBuild {
    pub commit: String,
    pub created_at: String,
    pub duration: u64,
    pub error: PageBuildeventBuildError,
    pub pusher: User,
    pub status: String,
    pub updated_at: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PingeventHookConfigContentType {
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "form")]
    Form,
}
impl ToString for PingeventHookConfigContentType {
    fn to_string(&self) -> String {
        match self {
            PingeventHookConfigContentType::Json => "json".to_string(),
            PingeventHookConfigContentType::Form => "form".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PingeventHookConfig {
    pub content_type: PingeventHookConfigContentType,
    pub insecure_ssl: String,
    pub secret: Option<String>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PingeventHookLastResponse {
    pub code: (),
    pub message: (),
    pub status: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PingeventHook {
    pub active: bool,
    #[doc = "When you register a new GitHub App, GitHub sends a ping event to the **webhook URL** you specified during registration. The event contains the `app_id`, which is required for [authenticating](https://docs.github.com/en/apps/building-integrations/setting-up-and-registering-github-apps/about-authentication-options-for-github-apps) an app."]
    pub app_id: Option<u64>,
    pub config: PingeventHookConfig,
    pub created_at: String,
    pub events: WebhookEvents,
    pub id: u64,
    pub last_response: Option<PingeventHookLastResponse>,
    pub name: String,
    pub ping_url: String,
    pub test_url: Option<String>,
    #[serde(rename = "type")]
    pub ttype: String,
    pub updated_at: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for ProjectState {
    fn to_string(&self) -> String {
        match self {
            ProjectState::Open => "open".to_string(),
            ProjectState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectclosedAction {
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for ProjectclosedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectclosedAction::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectcreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for ProjectcreatedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectcreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectdeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for ProjectdeletedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectdeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjecteditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for ProjecteditedAction {
    fn to_string(&self) -> String {
        match self {
            ProjecteditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjecteditedChangesBody {
    #[doc = "The previous version of the body if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjecteditedChangesName {
    #[doc = "The changes to the project if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjecteditedChanges {
    pub body: Option<ProjecteditedChangesBody>,
    pub name: Option<ProjecteditedChangesName>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectreopenedAction {
    #[serde(rename = "reopened")]
    Reopened,
}
impl ToString for ProjectreopenedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectreopenedAction::Reopened => "reopened".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectCardconvertedAction {
    #[serde(rename = "converted")]
    Converted,
}
impl ToString for ProjectCardconvertedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectCardconvertedAction::Converted => "converted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardconvertedChangesNote {
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardconvertedChanges {
    pub note: ProjectCardconvertedChangesNote,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectCardcreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for ProjectCardcreatedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectCardcreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectCarddeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for ProjectCarddeletedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectCarddeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectCardeditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for ProjectCardeditedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectCardeditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardeditedChangesNote {
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardeditedChanges {
    pub note: ProjectCardeditedChangesNote,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectCardmovedAction {
    #[serde(rename = "moved")]
    Moved,
}
impl ToString for ProjectCardmovedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectCardmovedAction::Moved => "moved".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardmovedChangesColumnId {
    pub from: u64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardmovedChanges {
    pub column_id: ProjectCardmovedChangesColumnId,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardmovedProjectCardVariant1 {
    pub after_id: Option<f64>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardmovedProjectCard {
    #[serde(flatten)]
    pub variant_0: ProjectCard,
    #[serde(flatten)]
    pub variant_1: ProjectCardmovedProjectCardVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectColumncreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for ProjectColumncreatedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectColumncreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectColumndeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for ProjectColumndeletedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectColumndeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectColumneditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for ProjectColumneditedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectColumneditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectColumneditedChangesName {
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectColumneditedChanges {
    pub name: Option<ProjectColumneditedChangesName>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectColumnmovedAction {
    #[serde(rename = "moved")]
    Moved,
}
impl ToString for ProjectColumnmovedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectColumnmovedAction::Moved => "moved".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PubliceventRepositoryVariant1 {
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PubliceventRepository {
    #[serde(flatten)]
    pub variant_0: Repository,
    #[serde(flatten)]
    pub variant_1: PubliceventRepositoryVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestLinks {
    pub comments: Link,
    pub commits: Link,
    pub html: Link,
    pub issue: Link,
    pub review_comment: Link,
    pub review_comments: Link,
    #[serde(rename = "self")]
    pub sself: Link,
    pub statuses: Link,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestActiveLockReason {
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "off-topic")]
    OffTopic,
    #[serde(rename = "too heated")]
    TooHeated,
    #[serde(rename = "spam")]
    Spam,
}
impl ToString for PullRequestActiveLockReason {
    fn to_string(&self) -> String {
        match self {
            PullRequestActiveLockReason::Resolved => "resolved".to_string(),
            PullRequestActiveLockReason::OffTopic => "off-topic".to_string(),
            PullRequestActiveLockReason::TooHeated => "too heated".to_string(),
            PullRequestActiveLockReason::Spam => "spam".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestAssignee {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestBase {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestHead {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestMergedBy {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestMilestone {
    Variant0(Milestone),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestRequestedReviewersItem {
    Variant0(User),
    Variant1(Team),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for PullRequestState {
    fn to_string(&self) -> String {
        match self {
            PullRequestState::Open => "open".to_string(),
            PullRequestState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentLinks {
    pub html: Link,
    pub pull_request: Link,
    #[serde(rename = "self")]
    pub sself: Link,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentSide {
    #[serde(rename = "LEFT")]
    Left,
    #[serde(rename = "RIGHT")]
    Right,
}
impl ToString for PullRequestReviewCommentSide {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentSide::Left => "LEFT".to_string(),
            PullRequestReviewCommentSide::Right => "RIGHT".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentStartSide {
    #[serde(rename = "LEFT")]
    Left,
    #[serde(rename = "RIGHT")]
    Right,
}
impl ToString for PullRequestReviewCommentStartSide {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentStartSide::Left => "LEFT".to_string(),
            PullRequestReviewCommentStartSide::Right => "RIGHT".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestassignedAction {
    #[serde(rename = "assigned")]
    Assigned,
}
impl ToString for PullRequestassignedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestassignedAction::Assigned => "assigned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestautoMergeDisabledAction {
    #[serde(rename = "auto_merge_disabled")]
    AutoMergeDisabled,
}
impl ToString for PullRequestautoMergeDisabledAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestautoMergeDisabledAction::AutoMergeDisabled => {
                "auto_merge_disabled".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestautoMergeEnabledAction {
    #[serde(rename = "auto_merge_enabled")]
    AutoMergeEnabled,
}
impl ToString for PullRequestautoMergeEnabledAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestautoMergeEnabledAction::AutoMergeEnabled => "auto_merge_enabled".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestclosedAction {
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for PullRequestclosedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestclosedAction::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestclosedPullRequestVariant1State {
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for PullRequestclosedPullRequestVariant1State {
    fn to_string(&self) -> String {
        match self {
            PullRequestclosedPullRequestVariant1State::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestclosedPullRequestVariant1 {
    pub closed_at: chrono::DateTime<chrono::offset::Utc>,
    pub merged: bool,
    #[doc = "State of this Pull Request. Either `open` or `closed`."]
    pub state: PullRequestclosedPullRequestVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestclosedPullRequest {
    #[serde(flatten)]
    pub variant_0: PullRequest,
    #[serde(flatten)]
    pub variant_1: PullRequestclosedPullRequestVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestconvertedToDraftAction {
    #[serde(rename = "converted_to_draft")]
    ConvertedToDraft,
}
impl ToString for PullRequestconvertedToDraftAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestconvertedToDraftAction::ConvertedToDraft => "converted_to_draft".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestconvertedToDraftPullRequestVariant1 {
    pub closed_at: (),
    #[doc = "Indicates whether or not the pull request is a draft."]
    pub draft: bool,
    pub merged: bool,
    pub merged_at: (),
    pub merged_by: (),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestconvertedToDraftPullRequest {
    #[serde(flatten)]
    pub variant_0: PullRequest,
    #[serde(flatten)]
    pub variant_1: PullRequestconvertedToDraftPullRequestVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequesteditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for PullRequesteditedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequesteditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequesteditedChangesBody {
    #[doc = "The previous version of the body if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequesteditedChangesTitle {
    #[doc = "The previous version of the title if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequesteditedChanges {
    pub body: Option<PullRequesteditedChangesBody>,
    pub title: Option<PullRequesteditedChangesTitle>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestlabeledAction {
    #[serde(rename = "labeled")]
    Labeled,
}
impl ToString for PullRequestlabeledAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestlabeledAction::Labeled => "labeled".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestlockedAction {
    #[serde(rename = "locked")]
    Locked,
}
impl ToString for PullRequestlockedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestlockedAction::Locked => "locked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestopenedAction {
    #[serde(rename = "opened")]
    Opened,
}
impl ToString for PullRequestopenedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestopenedAction::Opened => "opened".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestopenedPullRequestVariant1State {
    #[serde(rename = "open")]
    Open,
}
impl ToString for PullRequestopenedPullRequestVariant1State {
    fn to_string(&self) -> String {
        match self {
            PullRequestopenedPullRequestVariant1State::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestopenedPullRequestVariant1 {
    pub active_lock_reason: (),
    pub closed_at: (),
    pub merge_commit_sha: (),
    pub merged_at: (),
    pub merged_by: (),
    pub state: PullRequestopenedPullRequestVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestopenedPullRequest {
    #[serde(flatten)]
    pub variant_0: PullRequest,
    #[serde(flatten)]
    pub variant_1: PullRequestopenedPullRequestVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestreadyForReviewAction {
    #[serde(rename = "ready_for_review")]
    ReadyForReview,
}
impl ToString for PullRequestreadyForReviewAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestreadyForReviewAction::ReadyForReview => "ready_for_review".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestreadyForReviewPullRequestVariant1State {
    #[serde(rename = "open")]
    Open,
}
impl ToString for PullRequestreadyForReviewPullRequestVariant1State {
    fn to_string(&self) -> String {
        match self {
            PullRequestreadyForReviewPullRequestVariant1State::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestreadyForReviewPullRequestVariant1 {
    pub closed_at: (),
    #[doc = "Indicates whether or not the pull request is a draft."]
    pub draft: bool,
    pub merged: bool,
    pub merged_at: (),
    pub merged_by: (),
    pub state: PullRequestreadyForReviewPullRequestVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestreadyForReviewPullRequest {
    #[serde(flatten)]
    pub variant_0: PullRequest,
    #[serde(flatten)]
    pub variant_1: PullRequestreadyForReviewPullRequestVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestreopenedAction {
    #[serde(rename = "reopened")]
    Reopened,
}
impl ToString for PullRequestreopenedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestreopenedAction::Reopened => "reopened".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestreopenedPullRequestVariant1State {
    #[serde(rename = "open")]
    Open,
}
impl ToString for PullRequestreopenedPullRequestVariant1State {
    fn to_string(&self) -> String {
        match self {
            PullRequestreopenedPullRequestVariant1State::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestreopenedPullRequestVariant1 {
    pub closed_at: (),
    pub merge_commit_sha: (),
    pub merged: bool,
    pub merged_at: (),
    pub merged_by: (),
    pub state: PullRequestreopenedPullRequestVariant1State,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestreopenedPullRequest {
    #[serde(flatten)]
    pub variant_0: PullRequest,
    #[serde(flatten)]
    pub variant_1: PullRequestreopenedPullRequestVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestreviewRequestRemovedVariant0Action {
    #[serde(rename = "review_request_removed")]
    ReviewRequestRemoved,
}
impl ToString for PullRequestreviewRequestRemovedVariant0Action {
    fn to_string(&self) -> String {
        match self {
            PullRequestreviewRequestRemovedVariant0Action::ReviewRequestRemoved => {
                "review_request_removed".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestreviewRequestRemovedVariant1Action {
    #[serde(rename = "review_request_removed")]
    ReviewRequestRemoved,
}
impl ToString for PullRequestreviewRequestRemovedVariant1Action {
    fn to_string(&self) -> String {
        match self {
            PullRequestreviewRequestRemovedVariant1Action::ReviewRequestRemoved => {
                "review_request_removed".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestreviewRequestedVariant0Action {
    #[serde(rename = "review_requested")]
    ReviewRequested,
}
impl ToString for PullRequestreviewRequestedVariant0Action {
    fn to_string(&self) -> String {
        match self {
            PullRequestreviewRequestedVariant0Action::ReviewRequested => {
                "review_requested".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestreviewRequestedVariant1Action {
    #[serde(rename = "review_requested")]
    ReviewRequested,
}
impl ToString for PullRequestreviewRequestedVariant1Action {
    fn to_string(&self) -> String {
        match self {
            PullRequestreviewRequestedVariant1Action::ReviewRequested => {
                "review_requested".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestsynchronizeAction {
    #[serde(rename = "synchronize")]
    Synchronize,
}
impl ToString for PullRequestsynchronizeAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestsynchronizeAction::Synchronize => "synchronize".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestunassignedAction {
    #[serde(rename = "unassigned")]
    Unassigned,
}
impl ToString for PullRequestunassignedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestunassignedAction::Unassigned => "unassigned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestunlabeledAction {
    #[serde(rename = "unlabeled")]
    Unlabeled,
}
impl ToString for PullRequestunlabeledAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestunlabeledAction::Unlabeled => "unlabeled".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestunlockedAction {
    #[serde(rename = "unlocked")]
    Unlocked,
}
impl ToString for PullRequestunlockedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestunlockedAction::Unlocked => "unlocked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewdismissedAction {
    #[serde(rename = "dismissed")]
    Dismissed,
}
impl ToString for PullRequestReviewdismissedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewdismissedAction::Dismissed => "dismissed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewdismissedReviewLinks {
    pub html: Link,
    pub pull_request: Link,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewdismissedReviewState {
    #[serde(rename = "dismissed")]
    Dismissed,
}
impl ToString for PullRequestReviewdismissedReviewState {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewdismissedReviewState::Dismissed => "dismissed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewdismissedReview {
    pub author_association: AuthorAssociation,
    #[doc = "The text of the review."]
    pub body: Option<String>,
    #[doc = "A commit SHA for the review."]
    pub commit_id: String,
    pub html_url: String,
    #[doc = "Unique identifier of the review"]
    pub id: u64,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewdismissedReviewLinks,
    pub node_id: String,
    pub pull_request_url: String,
    pub state: PullRequestReviewdismissedReviewState,
    pub submitted_at: chrono::DateTime<chrono::offset::Utc>,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestRevieweditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for PullRequestRevieweditedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestRevieweditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestRevieweditedChangesBody {
    #[doc = "The previous version of the body if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestRevieweditedChanges {
    pub body: Option<PullRequestRevieweditedChangesBody>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestRevieweditedReviewLinks {
    pub html: Link,
    pub pull_request: Link,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestRevieweditedReview {
    pub author_association: AuthorAssociation,
    #[doc = "The text of the review."]
    pub body: Option<String>,
    #[doc = "A commit SHA for the review."]
    pub commit_id: String,
    pub html_url: String,
    #[doc = "Unique identifier of the review"]
    pub id: u64,
    #[serde(rename = "_links")]
    pub links: PullRequestRevieweditedReviewLinks,
    pub node_id: String,
    pub pull_request_url: String,
    pub state: String,
    pub submitted_at: chrono::DateTime<chrono::offset::Utc>,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewsubmittedAction {
    #[serde(rename = "submitted")]
    Submitted,
}
impl ToString for PullRequestReviewsubmittedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewsubmittedAction::Submitted => "submitted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewsubmittedReviewLinks {
    pub html: Link,
    pub pull_request: Link,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewsubmittedReview {
    pub author_association: AuthorAssociation,
    #[doc = "The text of the review."]
    pub body: Option<String>,
    #[doc = "A commit SHA for the review."]
    pub commit_id: String,
    pub html_url: String,
    #[doc = "Unique identifier of the review"]
    pub id: u64,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewsubmittedReviewLinks,
    pub node_id: String,
    pub pull_request_url: String,
    pub state: String,
    pub submitted_at: chrono::DateTime<chrono::offset::Utc>,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentcreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for PullRequestReviewCommentcreatedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentcreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentcreatedPullRequestLinks {
    pub comments: Link,
    pub commits: Link,
    pub html: Link,
    pub issue: Link,
    pub review_comment: Link,
    pub review_comments: Link,
    #[serde(rename = "self")]
    pub sself: Link,
    pub statuses: Link,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentcreatedPullRequestActiveLockReason {
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "off-topic")]
    OffTopic,
    #[serde(rename = "too heated")]
    TooHeated,
    #[serde(rename = "spam")]
    Spam,
}
impl ToString for PullRequestReviewCommentcreatedPullRequestActiveLockReason {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentcreatedPullRequestActiveLockReason::Resolved => {
                "resolved".to_string()
            }
            PullRequestReviewCommentcreatedPullRequestActiveLockReason::OffTopic => {
                "off-topic".to_string()
            }
            PullRequestReviewCommentcreatedPullRequestActiveLockReason::TooHeated => {
                "too heated".to_string()
            }
            PullRequestReviewCommentcreatedPullRequestActiveLockReason::Spam => "spam".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestReviewCommentcreatedPullRequestAssignee {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentcreatedPullRequestBase {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentcreatedPullRequestHead {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestReviewCommentcreatedPullRequestMilestone {
    Variant0(Milestone),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestReviewCommentcreatedPullRequestRequestedReviewersItem {
    Variant0(User),
    Variant1(Team),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentcreatedPullRequestState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for PullRequestReviewCommentcreatedPullRequestState {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentcreatedPullRequestState::Open => "open".to_string(),
            PullRequestReviewCommentcreatedPullRequestState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentcreatedPullRequest {
    pub active_lock_reason: Option<PullRequestReviewCommentcreatedPullRequestActiveLockReason>,
    pub assignee: PullRequestReviewCommentcreatedPullRequestAssignee,
    pub assignees: Vec<User>,
    pub author_association: AuthorAssociation,
    pub auto_merge: Option<()>,
    pub base: PullRequestReviewCommentcreatedPullRequestBase,
    pub body: String,
    pub closed_at: Option<String>,
    pub comments_url: String,
    pub commits_url: String,
    pub created_at: String,
    pub diff_url: String,
    pub draft: Option<bool>,
    pub head: PullRequestReviewCommentcreatedPullRequestHead,
    pub html_url: String,
    pub id: u64,
    pub issue_url: String,
    pub labels: Vec<Label>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentcreatedPullRequestLinks,
    pub locked: bool,
    pub merge_commit_sha: Option<String>,
    pub merged_at: Option<String>,
    pub milestone: PullRequestReviewCommentcreatedPullRequestMilestone,
    pub node_id: String,
    pub number: u64,
    pub patch_url: String,
    pub requested_reviewers: Vec<PullRequestReviewCommentcreatedPullRequestRequestedReviewersItem>,
    pub requested_teams: Vec<Team>,
    pub review_comment_url: String,
    pub review_comments_url: String,
    pub state: PullRequestReviewCommentcreatedPullRequestState,
    pub statuses_url: String,
    pub title: String,
    pub updated_at: String,
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentdeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for PullRequestReviewCommentdeletedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentdeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentdeletedPullRequestLinks {
    pub comments: Link,
    pub commits: Link,
    pub html: Link,
    pub issue: Link,
    pub review_comment: Link,
    pub review_comments: Link,
    #[serde(rename = "self")]
    pub sself: Link,
    pub statuses: Link,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentdeletedPullRequestActiveLockReason {
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "off-topic")]
    OffTopic,
    #[serde(rename = "too heated")]
    TooHeated,
    #[serde(rename = "spam")]
    Spam,
}
impl ToString for PullRequestReviewCommentdeletedPullRequestActiveLockReason {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentdeletedPullRequestActiveLockReason::Resolved => {
                "resolved".to_string()
            }
            PullRequestReviewCommentdeletedPullRequestActiveLockReason::OffTopic => {
                "off-topic".to_string()
            }
            PullRequestReviewCommentdeletedPullRequestActiveLockReason::TooHeated => {
                "too heated".to_string()
            }
            PullRequestReviewCommentdeletedPullRequestActiveLockReason::Spam => "spam".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestReviewCommentdeletedPullRequestAssignee {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentdeletedPullRequestBase {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentdeletedPullRequestHead {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestReviewCommentdeletedPullRequestMilestone {
    Variant0(Milestone),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestReviewCommentdeletedPullRequestRequestedReviewersItem {
    Variant0(User),
    Variant1(Team),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentdeletedPullRequestState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for PullRequestReviewCommentdeletedPullRequestState {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentdeletedPullRequestState::Open => "open".to_string(),
            PullRequestReviewCommentdeletedPullRequestState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentdeletedPullRequest {
    pub active_lock_reason: Option<PullRequestReviewCommentdeletedPullRequestActiveLockReason>,
    pub assignee: PullRequestReviewCommentdeletedPullRequestAssignee,
    pub assignees: Vec<User>,
    pub author_association: AuthorAssociation,
    pub auto_merge: Option<()>,
    pub base: PullRequestReviewCommentdeletedPullRequestBase,
    pub body: String,
    pub closed_at: Option<String>,
    pub comments_url: String,
    pub commits_url: String,
    pub created_at: String,
    pub diff_url: String,
    pub draft: Option<bool>,
    pub head: PullRequestReviewCommentdeletedPullRequestHead,
    pub html_url: String,
    pub id: u64,
    pub issue_url: String,
    pub labels: Vec<Label>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentdeletedPullRequestLinks,
    pub locked: bool,
    pub merge_commit_sha: Option<String>,
    pub merged_at: Option<String>,
    pub milestone: PullRequestReviewCommentdeletedPullRequestMilestone,
    pub node_id: String,
    pub number: u64,
    pub patch_url: String,
    pub requested_reviewers: Vec<PullRequestReviewCommentdeletedPullRequestRequestedReviewersItem>,
    pub requested_teams: Vec<Team>,
    pub review_comment_url: String,
    pub review_comments_url: String,
    pub state: PullRequestReviewCommentdeletedPullRequestState,
    pub statuses_url: String,
    pub title: String,
    pub updated_at: String,
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommenteditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for PullRequestReviewCommenteditedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommenteditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommenteditedChangesBody {
    #[doc = "The previous version of the body."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommenteditedChanges {
    pub body: Option<PullRequestReviewCommenteditedChangesBody>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommenteditedPullRequestLinks {
    pub comments: Link,
    pub commits: Link,
    pub html: Link,
    pub issue: Link,
    pub review_comment: Link,
    pub review_comments: Link,
    #[serde(rename = "self")]
    pub sself: Link,
    pub statuses: Link,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommenteditedPullRequestActiveLockReason {
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "off-topic")]
    OffTopic,
    #[serde(rename = "too heated")]
    TooHeated,
    #[serde(rename = "spam")]
    Spam,
}
impl ToString for PullRequestReviewCommenteditedPullRequestActiveLockReason {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommenteditedPullRequestActiveLockReason::Resolved => {
                "resolved".to_string()
            }
            PullRequestReviewCommenteditedPullRequestActiveLockReason::OffTopic => {
                "off-topic".to_string()
            }
            PullRequestReviewCommenteditedPullRequestActiveLockReason::TooHeated => {
                "too heated".to_string()
            }
            PullRequestReviewCommenteditedPullRequestActiveLockReason::Spam => "spam".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestReviewCommenteditedPullRequestAssignee {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommenteditedPullRequestBase {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommenteditedPullRequestHead {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestReviewCommenteditedPullRequestMilestone {
    Variant0(Milestone),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestReviewCommenteditedPullRequestRequestedReviewersItem {
    Variant0(User),
    Variant1(Team),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommenteditedPullRequestState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for PullRequestReviewCommenteditedPullRequestState {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommenteditedPullRequestState::Open => "open".to_string(),
            PullRequestReviewCommenteditedPullRequestState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommenteditedPullRequest {
    pub active_lock_reason: Option<PullRequestReviewCommenteditedPullRequestActiveLockReason>,
    pub assignee: PullRequestReviewCommenteditedPullRequestAssignee,
    pub assignees: Vec<User>,
    pub author_association: AuthorAssociation,
    pub auto_merge: Option<()>,
    pub base: PullRequestReviewCommenteditedPullRequestBase,
    pub body: String,
    pub closed_at: Option<String>,
    pub comments_url: String,
    pub commits_url: String,
    pub created_at: String,
    pub diff_url: String,
    pub draft: Option<bool>,
    pub head: PullRequestReviewCommenteditedPullRequestHead,
    pub html_url: String,
    pub id: u64,
    pub issue_url: String,
    pub labels: Vec<Label>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommenteditedPullRequestLinks,
    pub locked: bool,
    pub merge_commit_sha: Option<String>,
    pub merged_at: Option<String>,
    pub milestone: PullRequestReviewCommenteditedPullRequestMilestone,
    pub node_id: String,
    pub number: u64,
    pub patch_url: String,
    pub requested_reviewers: Vec<PullRequestReviewCommenteditedPullRequestRequestedReviewersItem>,
    pub requested_teams: Vec<Team>,
    pub review_comment_url: String,
    pub review_comments_url: String,
    pub state: PullRequestReviewCommenteditedPullRequestState,
    pub statuses_url: String,
    pub title: String,
    pub updated_at: String,
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PusheventHeadCommit {
    Variant0(Commit),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ReleasecreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for ReleasecreatedAction {
    fn to_string(&self) -> String {
        match self {
            ReleasecreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ReleasedeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for ReleasedeletedAction {
    fn to_string(&self) -> String {
        match self {
            ReleasedeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ReleaseeditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for ReleaseeditedAction {
    fn to_string(&self) -> String {
        match self {
            ReleaseeditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleaseeditedChangesBody {
    #[doc = "The previous version of the body if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleaseeditedChangesName {
    #[doc = "The previous version of the name if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleaseeditedChanges {
    pub body: Option<ReleaseeditedChangesBody>,
    pub name: Option<ReleaseeditedChangesName>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ReleaseprereleasedAction {
    #[serde(rename = "prereleased")]
    Prereleased,
}
impl ToString for ReleaseprereleasedAction {
    fn to_string(&self) -> String {
        match self {
            ReleaseprereleasedAction::Prereleased => "prereleased".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleaseprereleasedReleaseVariant1 {
    #[doc = "Whether the release is identified as a prerelease or a full release."]
    pub prerelease: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleaseprereleasedRelease {
    #[serde(flatten)]
    pub variant_0: Release,
    #[serde(flatten)]
    pub variant_1: ReleaseprereleasedReleaseVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ReleasepublishedAction {
    #[serde(rename = "published")]
    Published,
}
impl ToString for ReleasepublishedAction {
    fn to_string(&self) -> String {
        match self {
            ReleasepublishedAction::Published => "published".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleasepublishedReleaseVariant1 {
    pub published_at: chrono::DateTime<chrono::offset::Utc>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleasepublishedRelease {
    #[serde(flatten)]
    pub variant_0: Release,
    #[serde(flatten)]
    pub variant_1: ReleasepublishedReleaseVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ReleasereleasedAction {
    #[serde(rename = "released")]
    Released,
}
impl ToString for ReleasereleasedAction {
    fn to_string(&self) -> String {
        match self {
            ReleasereleasedAction::Released => "released".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ReleaseunpublishedAction {
    #[serde(rename = "unpublished")]
    Unpublished,
}
impl ToString for ReleaseunpublishedAction {
    fn to_string(&self) -> String {
        match self {
            ReleaseunpublishedAction::Unpublished => "unpublished".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleaseunpublishedReleaseVariant1 {
    pub published_at: (),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleaseunpublishedRelease {
    #[serde(flatten)]
    pub variant_0: Release,
    #[serde(flatten)]
    pub variant_1: ReleaseunpublishedReleaseVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ReleaseAssetState {
    #[serde(rename = "uploaded")]
    Uploaded,
}
impl ToString for ReleaseAssetState {
    fn to_string(&self) -> String {
        match self {
            ReleaseAssetState::Uploaded => "uploaded".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum RepositoryCreatedAt {
    Variant0(u64),
    Variant1(chrono::DateTime<chrono::offset::Utc>),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum RepositoryLicense {
    Variant0(License),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryPermissions {
    pub admin: bool,
    pub maintain: Option<bool>,
    pub pull: bool,
    pub push: bool,
    pub triage: Option<bool>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum RepositoryPushedAt {
    Variant0(u64),
    Variant1(chrono::DateTime<chrono::offset::Utc>),
    Variant2,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryarchivedAction {
    #[serde(rename = "archived")]
    Archived,
}
impl ToString for RepositoryarchivedAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryarchivedAction::Archived => "archived".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryarchivedRepositoryVariant1 {
    #[doc = "Whether the repository is archived."]
    pub archived: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryarchivedRepository {
    #[serde(flatten)]
    pub variant_0: Repository,
    #[serde(flatten)]
    pub variant_1: RepositoryarchivedRepositoryVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositorycreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for RepositorycreatedAction {
    fn to_string(&self) -> String {
        match self {
            RepositorycreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositorydeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for RepositorydeletedAction {
    fn to_string(&self) -> String {
        match self {
            RepositorydeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryeditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for RepositoryeditedAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryeditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryeditedChangesDefaultBranch {
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryeditedChangesDescription {
    pub from: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryeditedChangesHomepage {
    pub from: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryeditedChanges {
    pub default_branch: Option<RepositoryeditedChangesDefaultBranch>,
    pub description: Option<RepositoryeditedChangesDescription>,
    pub homepage: Option<RepositoryeditedChangesHomepage>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryprivatizedAction {
    #[serde(rename = "privatized")]
    Privatized,
}
impl ToString for RepositoryprivatizedAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryprivatizedAction::Privatized => "privatized".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryprivatizedRepositoryVariant1 {
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryprivatizedRepository {
    #[serde(flatten)]
    pub variant_0: Repository,
    #[serde(flatten)]
    pub variant_1: RepositoryprivatizedRepositoryVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositorypublicizedAction {
    #[serde(rename = "publicized")]
    Publicized,
}
impl ToString for RepositorypublicizedAction {
    fn to_string(&self) -> String {
        match self {
            RepositorypublicizedAction::Publicized => "publicized".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositorypublicizedRepositoryVariant1 {
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositorypublicizedRepository {
    #[serde(flatten)]
    pub variant_0: Repository,
    #[serde(flatten)]
    pub variant_1: RepositorypublicizedRepositoryVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryrenamedAction {
    #[serde(rename = "renamed")]
    Renamed,
}
impl ToString for RepositoryrenamedAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryrenamedAction::Renamed => "renamed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryrenamedChangesRepositoryName {
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryrenamedChangesRepository {
    pub name: RepositoryrenamedChangesRepositoryName,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryrenamedChanges {
    pub repository: RepositoryrenamedChangesRepository,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositorytransferredAction {
    #[serde(rename = "transferred")]
    Transferred,
}
impl ToString for RepositorytransferredAction {
    fn to_string(&self) -> String {
        match self {
            RepositorytransferredAction::Transferred => "transferred".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositorytransferredChangesOwnerFrom {
    pub user: Option<User>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositorytransferredChangesOwner {
    pub from: RepositorytransferredChangesOwnerFrom,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositorytransferredChanges {
    pub owner: RepositorytransferredChangesOwner,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryunarchivedAction {
    #[serde(rename = "unarchived")]
    Unarchived,
}
impl ToString for RepositoryunarchivedAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryunarchivedAction::Unarchived => "unarchived".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryunarchivedRepositoryVariant1 {
    #[doc = "Whether the repository is archived."]
    pub archived: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryunarchivedRepository {
    #[serde(flatten)]
    pub variant_0: Repository,
    #[serde(flatten)]
    pub variant_1: RepositoryunarchivedRepositoryVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryDispatchonDemandTestAction {
    #[serde(rename = "on-demand-test")]
    OnDemandTest,
}
impl ToString for RepositoryDispatchonDemandTestAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryDispatchonDemandTestAction::OnDemandTest => "on-demand-test".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryImporteventStatus {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "failure")]
    Failure,
}
impl ToString for RepositoryImporteventStatus {
    fn to_string(&self) -> String {
        match self {
            RepositoryImporteventStatus::Success => "success".to_string(),
            RepositoryImporteventStatus::Cancelled => "cancelled".to_string(),
            RepositoryImporteventStatus::Failure => "failure".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryVulnerabilityAlertcreateAction {
    #[serde(rename = "create")]
    Create,
}
impl ToString for RepositoryVulnerabilityAlertcreateAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryVulnerabilityAlertcreateAction::Create => "create".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryVulnerabilityAlertcreateAlert {
    pub affected_package_name: String,
    pub affected_range: String,
    pub created_at: Option<String>,
    pub dismiss_reason: Option<String>,
    pub dismissed_at: Option<String>,
    pub dismisser: Option<User>,
    pub external_identifier: String,
    pub external_reference: String,
    pub fixed_in: String,
    pub ghsa_id: Option<String>,
    pub id: u64,
    pub severity: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryVulnerabilityAlertdismissAction {
    #[serde(rename = "dismiss")]
    Dismiss,
}
impl ToString for RepositoryVulnerabilityAlertdismissAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryVulnerabilityAlertdismissAction::Dismiss => "dismiss".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryVulnerabilityAlertdismissAlert {
    pub affected_package_name: String,
    pub affected_range: String,
    pub created_at: Option<String>,
    pub dismiss_reason: String,
    pub dismissed_at: String,
    pub dismisser: User,
    pub external_identifier: String,
    pub external_reference: String,
    pub fixed_in: String,
    pub ghsa_id: Option<String>,
    pub id: u64,
    pub severity: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryVulnerabilityAlertresolveAction {
    #[serde(rename = "resolve")]
    Resolve,
}
impl ToString for RepositoryVulnerabilityAlertresolveAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryVulnerabilityAlertresolveAction::Resolve => "resolve".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryVulnerabilityAlertresolveAlert {
    pub affected_package_name: String,
    pub affected_range: String,
    pub created_at: Option<String>,
    pub dismiss_reason: Option<String>,
    pub dismissed_at: Option<String>,
    pub dismisser: Option<User>,
    pub external_identifier: String,
    pub external_reference: String,
    pub fixed_in: String,
    pub ghsa_id: Option<String>,
    pub id: u64,
    pub severity: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SecretScanningAlertcreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for SecretScanningAlertcreatedAction {
    fn to_string(&self) -> String {
        match self {
            SecretScanningAlertcreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecretScanningAlertcreatedAlert {
    pub number: u64,
    pub resolution: (),
    pub resolved_at: (),
    pub resolved_by: (),
    pub secret_type: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SecretScanningAlertreopenedAction {
    #[serde(rename = "reopened")]
    Reopened,
}
impl ToString for SecretScanningAlertreopenedAction {
    fn to_string(&self) -> String {
        match self {
            SecretScanningAlertreopenedAction::Reopened => "reopened".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecretScanningAlertreopenedAlert {
    pub number: u64,
    pub resolution: (),
    pub resolved_at: (),
    pub resolved_by: (),
    pub secret_type: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SecretScanningAlertresolvedAction {
    #[serde(rename = "resolved")]
    Resolved,
}
impl ToString for SecretScanningAlertresolvedAction {
    fn to_string(&self) -> String {
        match self {
            SecretScanningAlertresolvedAction::Resolved => "resolved".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SecretScanningAlertresolvedAlertResolution {
    #[serde(rename = "false_positive")]
    FalsePositive,
    #[serde(rename = "wontfix")]
    Wontfix,
    #[serde(rename = "revoked")]
    Revoked,
    #[serde(rename = "used_in_tests")]
    UsedInTests,
}
impl ToString for SecretScanningAlertresolvedAlertResolution {
    fn to_string(&self) -> String {
        match self {
            SecretScanningAlertresolvedAlertResolution::FalsePositive => {
                "false_positive".to_string()
            }
            SecretScanningAlertresolvedAlertResolution::Wontfix => "wontfix".to_string(),
            SecretScanningAlertresolvedAlertResolution::Revoked => "revoked".to_string(),
            SecretScanningAlertresolvedAlertResolution::UsedInTests => "used_in_tests".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecretScanningAlertresolvedAlert {
    pub number: u64,
    pub resolution: SecretScanningAlertresolvedAlertResolution,
    pub resolved_at: String,
    pub resolved_by: User,
    pub secret_type: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SecurityAdvisoryperformedAction {
    #[serde(rename = "performed")]
    Performed,
}
impl ToString for SecurityAdvisoryperformedAction {
    fn to_string(&self) -> String {
        match self {
            SecurityAdvisoryperformedAction::Performed => "performed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryperformedSecurityAdvisoryCvss {
    pub score: f64,
    pub vector_string: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryperformedSecurityAdvisoryCwesItem {
    pub cwe_id: String,
    pub name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryperformedSecurityAdvisoryIdentifiersItem {
    #[serde(rename = "type")]
    pub ttype: String,
    pub value: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryperformedSecurityAdvisoryReferencesItem {
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryperformedSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion {
    pub identifier: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryperformedSecurityAdvisoryVulnerabilitiesItemPackage {
    pub ecosystem: String,
    pub name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryperformedSecurityAdvisoryVulnerabilitiesItem {
    pub first_patched_version:
        Option<SecurityAdvisoryperformedSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion>,
    pub package: SecurityAdvisoryperformedSecurityAdvisoryVulnerabilitiesItemPackage,
    pub severity: String,
    pub vulnerable_version_range: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryperformedSecurityAdvisory {
    pub cvss: SecurityAdvisoryperformedSecurityAdvisoryCvss,
    pub cwes: Vec<SecurityAdvisoryperformedSecurityAdvisoryCwesItem>,
    pub description: String,
    pub ghsa_id: String,
    pub identifiers: Vec<SecurityAdvisoryperformedSecurityAdvisoryIdentifiersItem>,
    pub published_at: String,
    pub references: Vec<SecurityAdvisoryperformedSecurityAdvisoryReferencesItem>,
    pub severity: String,
    pub summary: String,
    pub updated_at: String,
    pub vulnerabilities: Vec<SecurityAdvisoryperformedSecurityAdvisoryVulnerabilitiesItem>,
    pub withdrawn_at: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SecurityAdvisorypublishedAction {
    #[serde(rename = "published")]
    Published,
}
impl ToString for SecurityAdvisorypublishedAction {
    fn to_string(&self) -> String {
        match self {
            SecurityAdvisorypublishedAction::Published => "published".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisorypublishedSecurityAdvisoryCvss {
    pub score: f64,
    pub vector_string: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisorypublishedSecurityAdvisoryCwesItem {
    pub cwe_id: String,
    pub name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisorypublishedSecurityAdvisoryIdentifiersItem {
    #[serde(rename = "type")]
    pub ttype: String,
    pub value: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisorypublishedSecurityAdvisoryReferencesItem {
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisorypublishedSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion {
    pub identifier: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisorypublishedSecurityAdvisoryVulnerabilitiesItemPackage {
    pub ecosystem: String,
    pub name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisorypublishedSecurityAdvisoryVulnerabilitiesItem {
    pub first_patched_version:
        Option<SecurityAdvisorypublishedSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion>,
    pub package: SecurityAdvisorypublishedSecurityAdvisoryVulnerabilitiesItemPackage,
    pub severity: String,
    pub vulnerable_version_range: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisorypublishedSecurityAdvisory {
    pub cvss: SecurityAdvisorypublishedSecurityAdvisoryCvss,
    pub cwes: Vec<SecurityAdvisorypublishedSecurityAdvisoryCwesItem>,
    pub description: String,
    pub ghsa_id: String,
    pub identifiers: Vec<SecurityAdvisorypublishedSecurityAdvisoryIdentifiersItem>,
    pub published_at: String,
    pub references: Vec<SecurityAdvisorypublishedSecurityAdvisoryReferencesItem>,
    pub severity: String,
    pub summary: String,
    pub updated_at: String,
    pub vulnerabilities: Vec<SecurityAdvisorypublishedSecurityAdvisoryVulnerabilitiesItem>,
    pub withdrawn_at: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SecurityAdvisoryupdatedAction {
    #[serde(rename = "updated")]
    Updated,
}
impl ToString for SecurityAdvisoryupdatedAction {
    fn to_string(&self) -> String {
        match self {
            SecurityAdvisoryupdatedAction::Updated => "updated".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryupdatedSecurityAdvisoryCvss {
    pub score: f64,
    pub vector_string: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryupdatedSecurityAdvisoryCwesItem {
    pub cwe_id: String,
    pub name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryupdatedSecurityAdvisoryIdentifiersItem {
    #[serde(rename = "type")]
    pub ttype: String,
    pub value: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryupdatedSecurityAdvisoryReferencesItem {
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryupdatedSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion {
    pub identifier: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryupdatedSecurityAdvisoryVulnerabilitiesItemPackage {
    pub ecosystem: String,
    pub name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryupdatedSecurityAdvisoryVulnerabilitiesItem {
    pub first_patched_version:
        Option<SecurityAdvisoryupdatedSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion>,
    pub package: SecurityAdvisoryupdatedSecurityAdvisoryVulnerabilitiesItemPackage,
    pub severity: String,
    pub vulnerable_version_range: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryupdatedSecurityAdvisory {
    pub cvss: SecurityAdvisoryupdatedSecurityAdvisoryCvss,
    pub cwes: Vec<SecurityAdvisoryupdatedSecurityAdvisoryCwesItem>,
    pub description: String,
    pub ghsa_id: String,
    pub identifiers: Vec<SecurityAdvisoryupdatedSecurityAdvisoryIdentifiersItem>,
    pub published_at: String,
    pub references: Vec<SecurityAdvisoryupdatedSecurityAdvisoryReferencesItem>,
    pub severity: String,
    pub summary: String,
    pub updated_at: String,
    pub vulnerabilities: Vec<SecurityAdvisoryupdatedSecurityAdvisoryVulnerabilitiesItem>,
    pub withdrawn_at: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SecurityAdvisorywithdrawnAction {
    #[serde(rename = "withdrawn")]
    Withdrawn,
}
impl ToString for SecurityAdvisorywithdrawnAction {
    fn to_string(&self) -> String {
        match self {
            SecurityAdvisorywithdrawnAction::Withdrawn => "withdrawn".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisorywithdrawnSecurityAdvisoryCvss {
    pub score: f64,
    pub vector_string: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisorywithdrawnSecurityAdvisoryCwesItem {
    pub cwe_id: String,
    pub name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisorywithdrawnSecurityAdvisoryIdentifiersItem {
    #[serde(rename = "type")]
    pub ttype: String,
    pub value: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisorywithdrawnSecurityAdvisoryReferencesItem {
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisorywithdrawnSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion {
    pub identifier: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisorywithdrawnSecurityAdvisoryVulnerabilitiesItemPackage {
    pub ecosystem: String,
    pub name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisorywithdrawnSecurityAdvisoryVulnerabilitiesItem {
    pub first_patched_version:
        Option<SecurityAdvisorywithdrawnSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion>,
    pub package: SecurityAdvisorywithdrawnSecurityAdvisoryVulnerabilitiesItemPackage,
    pub severity: String,
    pub vulnerable_version_range: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisorywithdrawnSecurityAdvisory {
    pub cvss: SecurityAdvisorywithdrawnSecurityAdvisoryCvss,
    pub cwes: Vec<SecurityAdvisorywithdrawnSecurityAdvisoryCwesItem>,
    pub description: String,
    pub ghsa_id: String,
    pub identifiers: Vec<SecurityAdvisorywithdrawnSecurityAdvisoryIdentifiersItem>,
    pub published_at: String,
    pub references: Vec<SecurityAdvisorywithdrawnSecurityAdvisoryReferencesItem>,
    pub severity: String,
    pub summary: String,
    pub updated_at: String,
    pub vulnerabilities: Vec<SecurityAdvisorywithdrawnSecurityAdvisoryVulnerabilitiesItem>,
    pub withdrawn_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SimplePullRequestLinks {
    pub comments: Link,
    pub commits: Link,
    pub html: Link,
    pub issue: Link,
    pub review_comment: Link,
    pub review_comments: Link,
    #[serde(rename = "self")]
    pub sself: Link,
    pub statuses: Link,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SimplePullRequestActiveLockReason {
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "off-topic")]
    OffTopic,
    #[serde(rename = "too heated")]
    TooHeated,
    #[serde(rename = "spam")]
    Spam,
}
impl ToString for SimplePullRequestActiveLockReason {
    fn to_string(&self) -> String {
        match self {
            SimplePullRequestActiveLockReason::Resolved => "resolved".to_string(),
            SimplePullRequestActiveLockReason::OffTopic => "off-topic".to_string(),
            SimplePullRequestActiveLockReason::TooHeated => "too heated".to_string(),
            SimplePullRequestActiveLockReason::Spam => "spam".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum SimplePullRequestAssignee {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SimplePullRequestBase {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SimplePullRequestHead {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum SimplePullRequestMilestone {
    Variant0(Milestone),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum SimplePullRequestRequestedReviewersItem {
    Variant0(User),
    Variant1(Team),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SimplePullRequestState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for SimplePullRequestState {
    fn to_string(&self) -> String {
        match self {
            SimplePullRequestState::Open => "open".to_string(),
            SimplePullRequestState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SponsorshipcancelledAction {
    #[serde(rename = "cancelled")]
    Cancelled,
}
impl ToString for SponsorshipcancelledAction {
    fn to_string(&self) -> String {
        match self {
            SponsorshipcancelledAction::Cancelled => "cancelled".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipcancelledSponsorship {
    pub created_at: String,
    pub node_id: String,
    pub privacy_level: String,
    pub sponsor: User,
    pub sponsorable: User,
    pub tier: SponsorshipTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SponsorshipcreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for SponsorshipcreatedAction {
    fn to_string(&self) -> String {
        match self {
            SponsorshipcreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipcreatedSponsorship {
    pub created_at: String,
    pub node_id: String,
    pub privacy_level: String,
    pub sponsor: User,
    pub sponsorable: User,
    pub tier: SponsorshipTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SponsorshipeditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for SponsorshipeditedAction {
    fn to_string(&self) -> String {
        match self {
            SponsorshipeditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipeditedChangesPrivacyLevel {
    #[doc = "The `edited` event types include the details about the change when someone edits a sponsorship to change the privacy."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipeditedChanges {
    pub privacy_level: Option<SponsorshipeditedChangesPrivacyLevel>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipeditedSponsorship {
    pub created_at: String,
    pub node_id: String,
    pub privacy_level: String,
    pub sponsor: User,
    pub sponsorable: User,
    pub tier: SponsorshipTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SponsorshippendingCancellationAction {
    #[serde(rename = "pending_cancellation")]
    PendingCancellation,
}
impl ToString for SponsorshippendingCancellationAction {
    fn to_string(&self) -> String {
        match self {
            SponsorshippendingCancellationAction::PendingCancellation => {
                "pending_cancellation".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshippendingCancellationSponsorship {
    pub created_at: String,
    pub node_id: String,
    pub privacy_level: String,
    pub sponsor: User,
    pub sponsorable: User,
    pub tier: SponsorshipTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SponsorshippendingTierChangeAction {
    #[serde(rename = "pending_tier_change")]
    PendingTierChange,
}
impl ToString for SponsorshippendingTierChangeAction {
    fn to_string(&self) -> String {
        match self {
            SponsorshippendingTierChangeAction::PendingTierChange => {
                "pending_tier_change".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshippendingTierChangeChangesTier {
    pub from: SponsorshipTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshippendingTierChangeChanges {
    pub tier: SponsorshippendingTierChangeChangesTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshippendingTierChangeSponsorship {
    pub created_at: String,
    pub node_id: String,
    pub privacy_level: String,
    pub sponsor: User,
    pub sponsorable: User,
    pub tier: SponsorshipTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SponsorshiptierChangedAction {
    #[serde(rename = "tier_changed")]
    TierChanged,
}
impl ToString for SponsorshiptierChangedAction {
    fn to_string(&self) -> String {
        match self {
            SponsorshiptierChangedAction::TierChanged => "tier_changed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshiptierChangedChangesTier {
    pub from: SponsorshipTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshiptierChangedChanges {
    pub tier: SponsorshiptierChangedChangesTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshiptierChangedSponsorship {
    pub created_at: String,
    pub node_id: String,
    pub privacy_level: String,
    pub sponsor: User,
    pub sponsorable: User,
    pub tier: SponsorshipTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum StarcreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for StarcreatedAction {
    fn to_string(&self) -> String {
        match self {
            StarcreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum StardeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for StardeletedAction {
    fn to_string(&self) -> String {
        match self {
            StardeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatuseventBranchesItemCommit {
    pub sha: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatuseventBranchesItem {
    pub commit: StatuseventBranchesItemCommit,
    pub name: String,
    pub protected: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum StatuseventCommitAuthor {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatuseventCommitCommitAuthorVariant1 {
    pub date: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatuseventCommitCommitAuthor {
    #[serde(flatten)]
    pub variant_0: Committer,
    #[serde(flatten)]
    pub variant_1: StatuseventCommitCommitAuthorVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatuseventCommitCommitCommitterVariant1 {
    pub date: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatuseventCommitCommitCommitter {
    #[serde(flatten)]
    pub variant_0: Committer,
    #[serde(flatten)]
    pub variant_1: StatuseventCommitCommitCommitterVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatuseventCommitCommitTree {
    pub sha: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum StatuseventCommitCommitVerificationReason {
    #[serde(rename = "expired_key")]
    ExpiredKey,
    #[serde(rename = "not_signing_key")]
    NotSigningKey,
    #[serde(rename = "gpgverify_error")]
    GpgverifyError,
    #[serde(rename = "gpgverify_unavailable")]
    GpgverifyUnavailable,
    #[serde(rename = "unsigned")]
    Unsigned,
    #[serde(rename = "unknown_signature_type")]
    UnknownSignatureType,
    #[serde(rename = "no_user")]
    NoUser,
    #[serde(rename = "unverified_email")]
    UnverifiedEmail,
    #[serde(rename = "bad_email")]
    BadEmail,
    #[serde(rename = "unknown_key")]
    UnknownKey,
    #[serde(rename = "malformed_signature")]
    MalformedSignature,
    #[serde(rename = "invalid")]
    Invalid,
    #[serde(rename = "valid")]
    Valid,
}
impl ToString for StatuseventCommitCommitVerificationReason {
    fn to_string(&self) -> String {
        match self {
            StatuseventCommitCommitVerificationReason::ExpiredKey => "expired_key".to_string(),
            StatuseventCommitCommitVerificationReason::NotSigningKey => {
                "not_signing_key".to_string()
            }
            StatuseventCommitCommitVerificationReason::GpgverifyError => {
                "gpgverify_error".to_string()
            }
            StatuseventCommitCommitVerificationReason::GpgverifyUnavailable => {
                "gpgverify_unavailable".to_string()
            }
            StatuseventCommitCommitVerificationReason::Unsigned => "unsigned".to_string(),
            StatuseventCommitCommitVerificationReason::UnknownSignatureType => {
                "unknown_signature_type".to_string()
            }
            StatuseventCommitCommitVerificationReason::NoUser => "no_user".to_string(),
            StatuseventCommitCommitVerificationReason::UnverifiedEmail => {
                "unverified_email".to_string()
            }
            StatuseventCommitCommitVerificationReason::BadEmail => "bad_email".to_string(),
            StatuseventCommitCommitVerificationReason::UnknownKey => "unknown_key".to_string(),
            StatuseventCommitCommitVerificationReason::MalformedSignature => {
                "malformed_signature".to_string()
            }
            StatuseventCommitCommitVerificationReason::Invalid => "invalid".to_string(),
            StatuseventCommitCommitVerificationReason::Valid => "valid".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatuseventCommitCommitVerification {
    pub payload: Option<String>,
    pub reason: StatuseventCommitCommitVerificationReason,
    pub signature: Option<String>,
    pub verified: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatuseventCommitCommit {
    pub author: StatuseventCommitCommitAuthor,
    pub comment_count: u64,
    pub committer: StatuseventCommitCommitCommitter,
    pub message: String,
    pub tree: StatuseventCommitCommitTree,
    pub url: String,
    pub verification: StatuseventCommitCommitVerification,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum StatuseventCommitCommitter {
    Variant0(User),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatuseventCommitParentsItem {
    pub html_url: String,
    pub sha: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatuseventCommit {
    pub author: StatuseventCommitAuthor,
    pub comments_url: String,
    pub commit: StatuseventCommitCommit,
    pub committer: StatuseventCommitCommitter,
    pub html_url: String,
    pub node_id: String,
    pub parents: Vec<StatuseventCommitParentsItem>,
    pub sha: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum StatuseventState {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "error")]
    Error,
}
impl ToString for StatuseventState {
    fn to_string(&self) -> String {
        match self {
            StatuseventState::Pending => "pending".to_string(),
            StatuseventState::Success => "success".to_string(),
            StatuseventState::Failure => "failure".to_string(),
            StatuseventState::Error => "error".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum TeamParentPrivacy {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
    #[serde(rename = "secret")]
    Secret,
}
impl ToString for TeamParentPrivacy {
    fn to_string(&self) -> String {
        match self {
            TeamParentPrivacy::Open => "open".to_string(),
            TeamParentPrivacy::Closed => "closed".to_string(),
            TeamParentPrivacy::Secret => "secret".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeamParent {
    #[doc = "Description of the team"]
    pub description: Option<String>,
    pub html_url: String,
    #[doc = "Unique identifier of the team"]
    pub id: u64,
    pub members_url: String,
    #[doc = "Name of the team"]
    pub name: String,
    pub node_id: String,
    #[doc = "Permission that the team will have for its repositories"]
    pub permission: String,
    pub privacy: TeamParentPrivacy,
    pub repositories_url: String,
    pub slug: String,
    #[doc = "URL for the team"]
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum TeamPrivacy {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
    #[serde(rename = "secret")]
    Secret,
}
impl ToString for TeamPrivacy {
    fn to_string(&self) -> String {
        match self {
            TeamPrivacy::Open => "open".to_string(),
            TeamPrivacy::Closed => "closed".to_string(),
            TeamPrivacy::Secret => "secret".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum TeamaddedToRepositoryAction {
    #[serde(rename = "added_to_repository")]
    AddedToRepository,
}
impl ToString for TeamaddedToRepositoryAction {
    fn to_string(&self) -> String {
        match self {
            TeamaddedToRepositoryAction::AddedToRepository => "added_to_repository".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum TeamcreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for TeamcreatedAction {
    fn to_string(&self) -> String {
        match self {
            TeamcreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum TeamdeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for TeamdeletedAction {
    fn to_string(&self) -> String {
        match self {
            TeamdeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum TeameditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for TeameditedAction {
    fn to_string(&self) -> String {
        match self {
            TeameditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeameditedChangesDescription {
    #[doc = "The previous version of the description if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeameditedChangesName {
    #[doc = "The previous version of the name if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeameditedChangesPrivacy {
    #[doc = "The previous version of the team's privacy if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeameditedChangesRepositoryPermissionsFrom {
    #[doc = "The previous version of the team member's `admin` permission on a repository, if the action was `edited`."]
    pub admin: Option<bool>,
    #[doc = "The previous version of the team member's `pull` permission on a repository, if the action was `edited`."]
    pub pull: Option<bool>,
    #[doc = "The previous version of the team member's `push` permission on a repository, if the action was `edited`."]
    pub push: Option<bool>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeameditedChangesRepositoryPermissions {
    pub from: TeameditedChangesRepositoryPermissionsFrom,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeameditedChangesRepository {
    pub permissions: TeameditedChangesRepositoryPermissions,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeameditedChanges {
    pub description: Option<TeameditedChangesDescription>,
    pub name: Option<TeameditedChangesName>,
    pub privacy: Option<TeameditedChangesPrivacy>,
    pub repository: Option<TeameditedChangesRepository>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum TeamremovedFromRepositoryAction {
    #[serde(rename = "removed_from_repository")]
    RemovedFromRepository,
}
impl ToString for TeamremovedFromRepositoryAction {
    fn to_string(&self) -> String {
        match self {
            TeamremovedFromRepositoryAction::RemovedFromRepository => {
                "removed_from_repository".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum UserType {
    Bot,
    User,
    Organization,
}
impl ToString for UserType {
    fn to_string(&self) -> String {
        match self {
            UserType::Bot => "Bot".to_string(),
            UserType::User => "User".to_string(),
            UserType::Organization => "Organization".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WatchstartedAction {
    #[serde(rename = "started")]
    Started,
}
impl ToString for WatchstartedAction {
    fn to_string(&self) -> String {
        match self {
            WatchstartedAction::Started => "started".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WebhookEventsVariant0Item {
    #[serde(rename = "check_run")]
    CheckRun,
    #[serde(rename = "check_suite")]
    CheckSuite,
    #[serde(rename = "code_scanning_alert")]
    CodeScanningAlert,
    #[serde(rename = "commit_comment")]
    CommitComment,
    #[serde(rename = "content_reference")]
    ContentReference,
    #[serde(rename = "create")]
    Create,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "deployment")]
    Deployment,
    #[serde(rename = "deployment_review")]
    DeploymentReview,
    #[serde(rename = "deployment_status")]
    DeploymentStatus,
    #[serde(rename = "deploy_key")]
    DeployKey,
    #[serde(rename = "discussion")]
    Discussion,
    #[serde(rename = "discussion_comment")]
    DiscussionComment,
    #[serde(rename = "fork")]
    Fork,
    #[serde(rename = "gollum")]
    Gollum,
    #[serde(rename = "issues")]
    Issues,
    #[serde(rename = "issue_comment")]
    IssueComment,
    #[serde(rename = "label")]
    Label,
    #[serde(rename = "member")]
    Member,
    #[serde(rename = "membership")]
    Membership,
    #[serde(rename = "meta")]
    Meta,
    #[serde(rename = "milestone")]
    Milestone,
    #[serde(rename = "organization")]
    Organization,
    #[serde(rename = "org_block")]
    OrgBlock,
    #[serde(rename = "page_build")]
    PageBuild,
    #[serde(rename = "project")]
    Project,
    #[serde(rename = "project_card")]
    ProjectCard,
    #[serde(rename = "project_column")]
    ProjectColumn,
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "pull_request")]
    PullRequest,
    #[serde(rename = "pull_request_review")]
    PullRequestReview,
    #[serde(rename = "pull_request_review_comment")]
    PullRequestReviewComment,
    #[serde(rename = "push")]
    Push,
    #[serde(rename = "registry_package")]
    RegistryPackage,
    #[serde(rename = "release")]
    Release,
    #[serde(rename = "repository")]
    Repository,
    #[serde(rename = "repository_dispatch")]
    RepositoryDispatch,
    #[serde(rename = "repository_import")]
    RepositoryImport,
    #[serde(rename = "repository_vulnerability_alert")]
    RepositoryVulnerabilityAlert,
    #[serde(rename = "secret_scanning_alert")]
    SecretScanningAlert,
    #[serde(rename = "star")]
    Star,
    #[serde(rename = "status")]
    Status,
    #[serde(rename = "team")]
    Team,
    #[serde(rename = "team_add")]
    TeamAdd,
    #[serde(rename = "watch")]
    Watch,
    #[serde(rename = "workflow_dispatch")]
    WorkflowDispatch,
    #[serde(rename = "workflow_run")]
    WorkflowRun,
}
impl ToString for WebhookEventsVariant0Item {
    fn to_string(&self) -> String {
        match self {
            WebhookEventsVariant0Item::CheckRun => "check_run".to_string(),
            WebhookEventsVariant0Item::CheckSuite => "check_suite".to_string(),
            WebhookEventsVariant0Item::CodeScanningAlert => "code_scanning_alert".to_string(),
            WebhookEventsVariant0Item::CommitComment => "commit_comment".to_string(),
            WebhookEventsVariant0Item::ContentReference => "content_reference".to_string(),
            WebhookEventsVariant0Item::Create => "create".to_string(),
            WebhookEventsVariant0Item::Delete => "delete".to_string(),
            WebhookEventsVariant0Item::Deployment => "deployment".to_string(),
            WebhookEventsVariant0Item::DeploymentReview => "deployment_review".to_string(),
            WebhookEventsVariant0Item::DeploymentStatus => "deployment_status".to_string(),
            WebhookEventsVariant0Item::DeployKey => "deploy_key".to_string(),
            WebhookEventsVariant0Item::Discussion => "discussion".to_string(),
            WebhookEventsVariant0Item::DiscussionComment => "discussion_comment".to_string(),
            WebhookEventsVariant0Item::Fork => "fork".to_string(),
            WebhookEventsVariant0Item::Gollum => "gollum".to_string(),
            WebhookEventsVariant0Item::Issues => "issues".to_string(),
            WebhookEventsVariant0Item::IssueComment => "issue_comment".to_string(),
            WebhookEventsVariant0Item::Label => "label".to_string(),
            WebhookEventsVariant0Item::Member => "member".to_string(),
            WebhookEventsVariant0Item::Membership => "membership".to_string(),
            WebhookEventsVariant0Item::Meta => "meta".to_string(),
            WebhookEventsVariant0Item::Milestone => "milestone".to_string(),
            WebhookEventsVariant0Item::Organization => "organization".to_string(),
            WebhookEventsVariant0Item::OrgBlock => "org_block".to_string(),
            WebhookEventsVariant0Item::PageBuild => "page_build".to_string(),
            WebhookEventsVariant0Item::Project => "project".to_string(),
            WebhookEventsVariant0Item::ProjectCard => "project_card".to_string(),
            WebhookEventsVariant0Item::ProjectColumn => "project_column".to_string(),
            WebhookEventsVariant0Item::Public => "public".to_string(),
            WebhookEventsVariant0Item::PullRequest => "pull_request".to_string(),
            WebhookEventsVariant0Item::PullRequestReview => "pull_request_review".to_string(),
            WebhookEventsVariant0Item::PullRequestReviewComment => {
                "pull_request_review_comment".to_string()
            }
            WebhookEventsVariant0Item::Push => "push".to_string(),
            WebhookEventsVariant0Item::RegistryPackage => "registry_package".to_string(),
            WebhookEventsVariant0Item::Release => "release".to_string(),
            WebhookEventsVariant0Item::Repository => "repository".to_string(),
            WebhookEventsVariant0Item::RepositoryDispatch => "repository_dispatch".to_string(),
            WebhookEventsVariant0Item::RepositoryImport => "repository_import".to_string(),
            WebhookEventsVariant0Item::RepositoryVulnerabilityAlert => {
                "repository_vulnerability_alert".to_string()
            }
            WebhookEventsVariant0Item::SecretScanningAlert => "secret_scanning_alert".to_string(),
            WebhookEventsVariant0Item::Star => "star".to_string(),
            WebhookEventsVariant0Item::Status => "status".to_string(),
            WebhookEventsVariant0Item::Team => "team".to_string(),
            WebhookEventsVariant0Item::TeamAdd => "team_add".to_string(),
            WebhookEventsVariant0Item::Watch => "watch".to_string(),
            WebhookEventsVariant0Item::WorkflowDispatch => "workflow_dispatch".to_string(),
            WebhookEventsVariant0Item::WorkflowRun => "workflow_run".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowJobConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
}
impl ToString for WorkflowJobConclusion {
    fn to_string(&self) -> String {
        match self {
            WorkflowJobConclusion::Success => "success".to_string(),
            WorkflowJobConclusion::Failure => "failure".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowJobStatus {
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for WorkflowJobStatus {
    fn to_string(&self) -> String {
        match self {
            WorkflowJobStatus::Queued => "queued".to_string(),
            WorkflowJobStatus::InProgress => "in_progress".to_string(),
            WorkflowJobStatus::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowRunConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
}
impl ToString for WorkflowRunConclusion {
    fn to_string(&self) -> String {
        match self {
            WorkflowRunConclusion::Success => "success".to_string(),
            WorkflowRunConclusion::Failure => "failure".to_string(),
            WorkflowRunConclusion::Neutral => "neutral".to_string(),
            WorkflowRunConclusion::Cancelled => "cancelled".to_string(),
            WorkflowRunConclusion::TimedOut => "timed_out".to_string(),
            WorkflowRunConclusion::ActionRequired => "action_required".to_string(),
            WorkflowRunConclusion::Stale => "stale".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowRunPullRequestsItemBase {
    pub repo: RepoRef,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowRunPullRequestsItemHead {
    pub repo: RepoRef,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowRunPullRequestsItem {
    pub base: WorkflowRunPullRequestsItemBase,
    pub head: WorkflowRunPullRequestsItemHead,
    pub id: f64,
    pub number: f64,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowRunStatus {
    #[serde(rename = "requested")]
    Requested,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "queued")]
    Queued,
}
impl ToString for WorkflowRunStatus {
    fn to_string(&self) -> String {
        match self {
            WorkflowRunStatus::Requested => "requested".to_string(),
            WorkflowRunStatus::InProgress => "in_progress".to_string(),
            WorkflowRunStatus::Completed => "completed".to_string(),
            WorkflowRunStatus::Queued => "queued".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowStepCompletedConclusion {
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "skipped")]
    Skipped,
    #[serde(rename = "success")]
    Success,
}
impl ToString for WorkflowStepCompletedConclusion {
    fn to_string(&self) -> String {
        match self {
            WorkflowStepCompletedConclusion::Failure => "failure".to_string(),
            WorkflowStepCompletedConclusion::Skipped => "skipped".to_string(),
            WorkflowStepCompletedConclusion::Success => "success".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowStepCompletedStatus {
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for WorkflowStepCompletedStatus {
    fn to_string(&self) -> String {
        match self {
            WorkflowStepCompletedStatus::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowStepInProgressStatus {
    #[serde(rename = "in_progress")]
    InProgress,
}
impl ToString for WorkflowStepInProgressStatus {
    fn to_string(&self) -> String {
        match self {
            WorkflowStepInProgressStatus::InProgress => "in_progress".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum WorkflowDispatcheventInputs {
    Variant0(serde_json::Value),
    Variant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowJobcompletedAction {
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for WorkflowJobcompletedAction {
    fn to_string(&self) -> String {
        match self {
            WorkflowJobcompletedAction::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowJobcompletedWorkflowJobVariant1Conclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
}
impl ToString for WorkflowJobcompletedWorkflowJobVariant1Conclusion {
    fn to_string(&self) -> String {
        match self {
            WorkflowJobcompletedWorkflowJobVariant1Conclusion::Success => "success".to_string(),
            WorkflowJobcompletedWorkflowJobVariant1Conclusion::Failure => "failure".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowJobcompletedWorkflowJobVariant1 {
    pub conclusion: WorkflowJobcompletedWorkflowJobVariant1Conclusion,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowJobcompletedWorkflowJob {
    #[serde(flatten)]
    pub variant_0: WorkflowJob,
    #[serde(flatten)]
    pub variant_1: WorkflowJobcompletedWorkflowJobVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowJobqueuedAction {
    #[serde(rename = "queued")]
    Queued,
}
impl ToString for WorkflowJobqueuedAction {
    fn to_string(&self) -> String {
        match self {
            WorkflowJobqueuedAction::Queued => "queued".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowJobqueuedWorkflowJobStatus {
    #[serde(rename = "queued")]
    Queued,
}
impl ToString for WorkflowJobqueuedWorkflowJobStatus {
    fn to_string(&self) -> String {
        match self {
            WorkflowJobqueuedWorkflowJobStatus::Queued => "queued".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowJobqueuedWorkflowJob {
    pub check_run_url: String,
    pub completed_at: (),
    pub conclusion: (),
    pub head_sha: String,
    pub html_url: String,
    pub id: u64,
    pub labels: Vec<String>,
    pub name: String,
    pub node_id: String,
    pub run_id: f64,
    pub run_url: String,
    pub started_at: chrono::DateTime<chrono::offset::Utc>,
    pub status: WorkflowJobqueuedWorkflowJobStatus,
    pub steps: Vec<WorkflowStep>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowJobstartedAction {
    #[serde(rename = "started")]
    Started,
}
impl ToString for WorkflowJobstartedAction {
    fn to_string(&self) -> String {
        match self {
            WorkflowJobstartedAction::Started => "started".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowJobstartedWorkflowJobVariant1 {
    pub completed_at: (),
    pub conclusion: (),
    pub steps: Vec<WorkflowStepInProgress>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowJobstartedWorkflowJob {
    #[serde(flatten)]
    pub variant_0: WorkflowJob,
    #[serde(flatten)]
    pub variant_1: WorkflowJobstartedWorkflowJobVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowRuncompletedAction {
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for WorkflowRuncompletedAction {
    fn to_string(&self) -> String {
        match self {
            WorkflowRuncompletedAction::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowRuncompletedWorkflowRunVariant1Conclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
}
impl ToString for WorkflowRuncompletedWorkflowRunVariant1Conclusion {
    fn to_string(&self) -> String {
        match self {
            WorkflowRuncompletedWorkflowRunVariant1Conclusion::Success => "success".to_string(),
            WorkflowRuncompletedWorkflowRunVariant1Conclusion::Failure => "failure".to_string(),
            WorkflowRuncompletedWorkflowRunVariant1Conclusion::Neutral => "neutral".to_string(),
            WorkflowRuncompletedWorkflowRunVariant1Conclusion::Cancelled => "cancelled".to_string(),
            WorkflowRuncompletedWorkflowRunVariant1Conclusion::TimedOut => "timed_out".to_string(),
            WorkflowRuncompletedWorkflowRunVariant1Conclusion::ActionRequired => {
                "action_required".to_string()
            }
            WorkflowRuncompletedWorkflowRunVariant1Conclusion::Stale => "stale".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowRuncompletedWorkflowRunVariant1 {
    pub conclusion: WorkflowRuncompletedWorkflowRunVariant1Conclusion,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowRuncompletedWorkflowRun {
    #[serde(flatten)]
    pub variant_0: WorkflowRun,
    #[serde(flatten)]
    pub variant_1: WorkflowRuncompletedWorkflowRunVariant1,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowRunrequestedAction {
    #[serde(rename = "requested")]
    Requested,
}
impl ToString for WorkflowRunrequestedAction {
    fn to_string(&self) -> String {
        match self {
            WorkflowRunrequestedAction::Requested => "requested".to_string(),
        }
    }
}
