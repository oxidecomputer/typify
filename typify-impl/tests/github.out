#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AlertInstance {
    #[doc = "Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name."]
    pub analysis_key: String,
    pub classifications: Option<Vec<String>>,
    pub commit_sha: Option<String>,
    #[doc = "Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed."]
    pub environment: String,
    pub location: Option<AlertInstanceLocation>,
    pub message: Option<AlertInstanceMessage>,
    #[doc = "The full Git reference, formatted as `refs/heads/<branch name>`."]
    #[serde(rename = "ref")]
    pub rref: String,
    #[doc = "State of a code scanning alert."]
    pub state: AlertInstanceState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct App {
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub description: Option<String>,
    #[doc = "The list of events for the GitHub app"]
    pub events: Option<Vec<AppEventsItem>>,
    pub external_url: String,
    pub html_url: String,
    #[doc = "Unique identifier of the GitHub app"]
    pub id: u64,
    #[doc = "The name of the GitHub app"]
    pub name: String,
    pub node_id: String,
    pub owner: User,
    pub permissions: Option<AppPermissions>,
    #[doc = "The slug name of the GitHub app"]
    pub slug: Option<String>,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AuthorAssociation {
    #[serde(rename = "COLLABORATOR")]
    Collaborator,
    #[serde(rename = "CONTRIBUTOR")]
    Contributor,
    #[serde(rename = "FIRST_TIMER")]
    FirstTimer,
    #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
    FirstTimeContributor,
    #[serde(rename = "MANNEQUIN")]
    Mannequin,
    #[serde(rename = "MEMBER")]
    Member,
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "OWNER")]
    Owner,
}
impl ToString for AuthorAssociation {
    fn to_string(&self) -> String {
        match self {
            AuthorAssociation::Collaborator => "COLLABORATOR".to_string(),
            AuthorAssociation::Contributor => "CONTRIBUTOR".to_string(),
            AuthorAssociation::FirstTimer => "FIRST_TIMER".to_string(),
            AuthorAssociation::FirstTimeContributor => "FIRST_TIME_CONTRIBUTOR".to_string(),
            AuthorAssociation::Mannequin => "MANNEQUIN".to_string(),
            AuthorAssociation::Member => "MEMBER".to_string(),
            AuthorAssociation::None => "NONE".to_string(),
            AuthorAssociation::Owner => "OWNER".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BranchProtectionRule {
    pub admin_enforced: bool,
    pub allow_deletions_enforcement_level: BranchProtectionRuleAllowDeletionsEnforcementLevel,
    pub allow_force_pushes_enforcement_level: BranchProtectionRuleAllowForcePushesEnforcementLevel,
    pub authorized_actor_names: Vec<String>,
    pub authorized_actors_only: bool,
    pub authorized_dismissal_actors_only: bool,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub dismiss_stale_reviews_on_push: bool,
    pub id: u64,
    pub ignore_approvals_from_contributors: bool,
    pub linear_history_requirement_enforcement_level:
        BranchProtectionRuleLinearHistoryRequirementEnforcementLevel,
    pub merge_queue_enforcement_level: BranchProtectionRuleMergeQueueEnforcementLevel,
    pub name: String,
    pub pull_request_reviews_enforcement_level:
        BranchProtectionRulePullRequestReviewsEnforcementLevel,
    pub repository_id: u64,
    pub require_code_owner_review: bool,
    pub required_approving_review_count: u64,
    pub required_conversation_resolution_level:
        BranchProtectionRuleRequiredConversationResolutionLevel,
    pub required_deployments_enforcement_level:
        BranchProtectionRuleRequiredDeploymentsEnforcementLevel,
    pub required_status_checks: Vec<String>,
    pub required_status_checks_enforcement_level:
        BranchProtectionRuleRequiredStatusChecksEnforcementLevel,
    pub signature_requirement_enforcement_level:
        BranchProtectionRuleSignatureRequirementEnforcementLevel,
    pub strict_required_status_checks_policy: bool,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BranchProtectionRuleCreated {
    pub action: BranchProtectionRuleCreatedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub rule: BranchProtectionRule,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BranchProtectionRuleDeleted {
    pub action: BranchProtectionRuleDeletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub rule: BranchProtectionRule,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BranchProtectionRuleEdited {
    pub action: BranchProtectionRuleEditedAction,
    pub changes: BranchProtectionRuleEditedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub rule: BranchProtectionRule,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum BranchProtectionRuleEvent {
    Created(BranchProtectionRuleCreated),
    Deleted(BranchProtectionRuleDeleted),
    Edited(BranchProtectionRuleEdited),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunDeployment {
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub description: Option<String>,
    pub environment: String,
    pub id: u64,
    pub node_id: String,
    pub original_environment: String,
    pub repository_url: String,
    pub statuses_url: String,
    pub task: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunPullRequest {
    pub base: CheckRunPullRequestBase,
    pub head: CheckRunPullRequestHead,
    pub id: u64,
    pub number: u64,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunCompleted {
    pub action: CheckRunCompletedAction,
    pub check_run: CheckRunCompletedCheckRun,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[doc = "The action requested by the user."]
    pub requested_action: Option<CheckRunCompletedRequestedAction>,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunCreated {
    pub action: CheckRunCreatedAction,
    pub check_run: CheckRunCreatedCheckRun,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[doc = "The action requested by the user."]
    pub requested_action: Option<CheckRunCreatedRequestedAction>,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunRequestedAction {
    pub action: CheckRunRequestedActionAction,
    pub check_run: CheckRunRequestedActionCheckRun,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub requested_action: CheckRunRequestedActionRequestedAction,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunRerequested {
    pub action: CheckRunRerequestedAction,
    pub check_run: CheckRunRerequestedCheckRun,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[doc = "The action requested by the user."]
    pub requested_action: Option<CheckRunRerequestedRequestedAction>,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum CheckRunEvent {
    Completed(CheckRunCompleted),
    Created(CheckRunCreated),
    RequestedAction(CheckRunRequestedAction),
    Rerequested(CheckRunRerequested),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckSuiteCompleted {
    pub action: CheckSuiteCompletedAction,
    pub check_suite: CheckSuiteCompletedCheckSuite,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckSuiteRequested {
    pub action: CheckSuiteRequestedAction,
    pub check_suite: CheckSuiteRequestedCheckSuite,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckSuiteRerequested {
    pub action: CheckSuiteRerequestedAction,
    pub check_suite: CheckSuiteRerequestedCheckSuite,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum CheckSuiteEvent {
    Completed(CheckSuiteCompleted),
    Requested(CheckSuiteRequested),
    Rerequested(CheckSuiteRerequested),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertAppearedInBranch {
    pub action: CodeScanningAlertAppearedInBranchAction,
    pub alert: CodeScanningAlertAppearedInBranchAlert,
    #[doc = "The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    pub commit_oid: String,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[doc = "The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: GithubOrg,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertClosedByUser {
    pub action: CodeScanningAlertClosedByUserAction,
    pub alert: CodeScanningAlertClosedByUserAlert,
    #[doc = "The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    pub commit_oid: String,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[doc = "The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertCreated {
    pub action: CodeScanningAlertCreatedAction,
    pub alert: CodeScanningAlertCreatedAlert,
    #[doc = "The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    pub commit_oid: String,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[doc = "The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: GithubOrg,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertFixed {
    pub action: CodeScanningAlertFixedAction,
    pub alert: CodeScanningAlertFixedAlert,
    #[doc = "The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    pub commit_oid: String,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[doc = "The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: GithubOrg,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertReopened {
    pub action: CodeScanningAlertReopenedAction,
    pub alert: CodeScanningAlertReopenedAlert,
    #[doc = "The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    pub commit_oid: String,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[doc = "The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: GithubOrg,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertReopenedByUser {
    pub action: CodeScanningAlertReopenedByUserAction,
    pub alert: CodeScanningAlertReopenedByUserAlert,
    #[doc = "The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    pub commit_oid: String,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[doc = "The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."]
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum CodeScanningAlertEvent {
    AppearedInBranch(CodeScanningAlertAppearedInBranch),
    ClosedByUser(CodeScanningAlertClosedByUser),
    Created(CodeScanningAlertCreated),
    Fixed(CodeScanningAlertFixed),
    Reopened(CodeScanningAlertReopened),
    ReopenedByUser(CodeScanningAlertReopenedByUser),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Commit {
    #[doc = "An array of files added in the commit."]
    pub added: Vec<String>,
    pub author: Committer,
    pub committer: Committer,
    #[doc = "Whether this commit is distinct from any that have been pushed before."]
    pub distinct: bool,
    pub id: String,
    #[doc = "The commit message."]
    pub message: String,
    #[doc = "An array of files modified by the commit."]
    pub modified: Vec<String>,
    #[doc = "An array of files removed in the commit."]
    pub removed: Vec<String>,
    #[doc = "The ISO 8601 timestamp of the commit."]
    pub timestamp: String,
    pub tree_id: String,
    #[doc = "URL that points to the commit API resource."]
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CommitSimple {
    pub author: Committer,
    pub committer: Committer,
    pub id: String,
    pub message: String,
    pub timestamp: String,
    pub tree_id: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CommitCommentCreated {
    #[doc = "The action performed. Can be `created`."]
    pub action: CommitCommentCreatedAction,
    pub comment: CommitCommentCreatedComment,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CommitCommentEvent(CommitCommentCreated);
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Committer {
    pub date: Option<chrono::DateTime<chrono::offset::Utc>>,
    #[doc = "The git author's email address."]
    pub email: Option<String>,
    #[doc = "The git author's name."]
    pub name: String,
    pub username: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ContentReferenceCreated {
    pub action: ContentReferenceCreatedAction,
    pub content_reference: ContentReferenceCreatedContentReference,
    pub installation: InstallationLite,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ContentReferenceEvent(ContentReferenceCreated);
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CreateEvent {
    #[doc = "The repository's current description."]
    pub description: Option<String>,
    pub installation: Option<InstallationLite>,
    #[doc = "The name of the repository's default branch (usually `main`)."]
    pub master_branch: String,
    pub organization: Option<Organization>,
    #[doc = "The pusher type for the event. Can be either `user` or a deploy key."]
    pub pusher_type: String,
    #[doc = "The type of Git ref object created in the repository. Can be either `branch` or `tag`."]
    pub ref_type: CreateEventRefType,
    pub repository: Repository,
    #[doc = "The [`git ref`](https://docs.github.com/en/rest/reference/git#get-a-reference) resource."]
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeleteEvent {
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    #[doc = "The pusher type for the event. Can be either `user` or a deploy key."]
    pub pusher_type: String,
    #[doc = "The type of Git ref object deleted in the repository. Can be either `branch` or `tag`."]
    pub ref_type: DeleteEventRefType,
    pub repository: Repository,
    #[doc = "The [`git ref`](https://docs.github.com/en/rest/reference/git#get-a-reference) resource."]
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeployKeyCreated {
    pub action: DeployKeyCreatedAction,
    pub installation: Option<InstallationLite>,
    pub key: DeployKeyCreatedKey,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeployKeyDeleted {
    pub action: DeployKeyDeletedAction,
    pub installation: Option<InstallationLite>,
    pub key: DeployKeyDeletedKey,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum DeployKeyEvent {
    Created(DeployKeyCreated),
    Deleted(DeployKeyDeleted),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeploymentCreated {
    pub action: DeploymentCreatedAction,
    pub deployment: DeploymentCreatedDeployment,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    pub workflow: (),
    pub workflow_run: (),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeploymentEvent(DeploymentCreated);
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeploymentStatusCreated {
    pub action: DeploymentStatusCreatedAction,
    pub deployment: DeploymentStatusCreatedDeployment,
    pub deployment_status: DeploymentStatusCreatedDeploymentStatus,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeploymentStatusEvent(DeploymentStatusCreated);
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Discussion {
    pub active_lock_reason: Option<String>,
    pub answer_chosen_at: Option<String>,
    pub answer_chosen_by: Option<User>,
    pub answer_html_url: Option<String>,
    pub author_association: AuthorAssociation,
    pub body: String,
    pub category: DiscussionCategory,
    pub comments: u64,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub html_url: String,
    pub id: u64,
    pub locked: bool,
    pub node_id: String,
    pub number: u64,
    pub repository_url: String,
    pub state: DiscussionState,
    pub title: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionAnswered {
    pub action: DiscussionAnsweredAction,
    pub answer: DiscussionAnsweredAnswer,
    pub discussion: DiscussionAnsweredDiscussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCategoryChanged {
    pub action: DiscussionCategoryChangedAction,
    pub changes: DiscussionCategoryChangedChanges,
    pub discussion: Discussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCreated {
    pub action: DiscussionCreatedAction,
    pub discussion: DiscussionCreatedDiscussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionDeleted {
    pub action: DiscussionDeletedAction,
    pub discussion: Discussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionEdited {
    pub action: DiscussionEditedAction,
    pub changes: Option<DiscussionEditedChanges>,
    pub discussion: Discussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionLabeled {
    pub action: DiscussionLabeledAction,
    pub discussion: Discussion,
    pub installation: Option<InstallationLite>,
    pub label: Label,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionLocked {
    pub action: DiscussionLockedAction,
    pub discussion: DiscussionLockedDiscussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionPinned {
    pub action: DiscussionPinnedAction,
    pub discussion: Discussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionTransferred {
    pub action: DiscussionTransferredAction,
    pub changes: DiscussionTransferredChanges,
    pub discussion: Discussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionUnanswered {
    pub action: DiscussionUnansweredAction,
    pub discussion: DiscussionUnansweredDiscussion,
    pub installation: Option<InstallationLite>,
    pub old_answer: DiscussionUnansweredOldAnswer,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionUnlabeled {
    pub action: DiscussionUnlabeledAction,
    pub discussion: Discussion,
    pub installation: Option<InstallationLite>,
    pub label: Label,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionUnlocked {
    pub action: DiscussionUnlockedAction,
    pub discussion: DiscussionUnlockedDiscussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionUnpinned {
    pub action: DiscussionUnpinnedAction,
    pub discussion: Discussion,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCommentCreated {
    pub action: DiscussionCommentCreatedAction,
    pub comment: DiscussionCommentCreatedComment,
    pub discussion: Discussion,
    pub installation: InstallationLite,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCommentDeleted {
    pub action: DiscussionCommentDeletedAction,
    pub comment: DiscussionCommentDeletedComment,
    pub discussion: Discussion,
    pub installation: InstallationLite,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCommentEdited {
    pub action: DiscussionCommentEditedAction,
    pub changes: DiscussionCommentEditedChanges,
    pub comment: DiscussionCommentEditedComment,
    pub discussion: Discussion,
    pub installation: InstallationLite,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum DiscussionCommentEvent {
    Created(DiscussionCommentCreated),
    Deleted(DiscussionCommentDeleted),
    Edited(DiscussionCommentEdited),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum DiscussionEvent {
    Answered(DiscussionAnswered),
    CategoryChanged(DiscussionCategoryChanged),
    Created(DiscussionCreated),
    Deleted(DiscussionDeleted),
    Edited(DiscussionEdited),
    Labeled(DiscussionLabeled),
    Locked(DiscussionLocked),
    Pinned(DiscussionPinned),
    Transferred(DiscussionTransferred),
    Unanswered(DiscussionUnanswered),
    Unlabeled(DiscussionUnlabeled),
    Unlocked(DiscussionUnlocked),
    Unpinned(DiscussionUnpinned),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ForkEvent {
    #[doc = "The created [`repository`](https://docs.github.com/en/rest/reference/repos#get-a-repository) resource."]
    pub forkee: ForkEventForkee,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GithubOrg {
    pub avatar_url: String,
    pub email: Option<()>,
    pub events_url: String,
    pub followers_url: String,
    pub following_url: String,
    pub gists_url: String,
    pub gravatar_id: String,
    pub html_url: String,
    pub id: u64,
    pub login: String,
    pub name: Option<String>,
    pub node_id: String,
    pub organizations_url: String,
    pub received_events_url: String,
    pub repos_url: String,
    pub site_admin: bool,
    pub starred_url: String,
    pub subscriptions_url: String,
    #[serde(rename = "type")]
    pub ttype: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GithubAppAuthorizationRevoked {
    pub action: GithubAppAuthorizationRevokedAction,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GithubAppAuthorizationEvent(GithubAppAuthorizationRevoked);
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GollumEvent {
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    #[doc = "The pages that were updated."]
    pub pages: Vec<GollumEventPagesItem>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Installation {
    pub access_tokens_url: String,
    pub account: User,
    pub app_id: u64,
    pub app_slug: Option<String>,
    pub created_at: InstallationCreatedAt,
    pub events: Vec<InstallationEventsItem>,
    pub has_multiple_single_files: Option<bool>,
    pub html_url: String,
    #[doc = "The ID of the installation."]
    pub id: u64,
    pub permissions: InstallationPermissions,
    pub repositories_url: String,
    #[doc = "Describe whether all repositories have been selected or there's a selection involved"]
    pub repository_selection: InstallationRepositorySelection,
    pub single_file_name: Option<String>,
    pub single_file_paths: Option<Vec<String>>,
    pub suspended_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    pub suspended_by: Option<User>,
    #[doc = "The ID of the user or organization this token is being scoped to."]
    pub target_id: u64,
    pub target_type: InstallationTargetType,
    pub updated_at: InstallationUpdatedAt,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationCreated {
    pub action: InstallationCreatedAction,
    pub installation: Installation,
    #[doc = "An array of repository objects that the installation can access."]
    pub repositories: Option<Vec<InstallationCreatedRepositoriesItem>>,
    pub requester: Option<User>,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationDeleted {
    pub action: InstallationDeletedAction,
    pub installation: Installation,
    #[doc = "An array of repository objects that the installation can access."]
    pub repositories: Option<Vec<InstallationDeletedRepositoriesItem>>,
    pub requester: Option<()>,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationNewPermissionsAccepted {
    pub action: InstallationNewPermissionsAcceptedAction,
    pub installation: Installation,
    #[doc = "An array of repository objects that the installation can access."]
    pub repositories: Option<Vec<InstallationNewPermissionsAcceptedRepositoriesItem>>,
    pub requester: Option<()>,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationSuspend {
    pub action: InstallationSuspendAction,
    pub installation: InstallationSuspendInstallation,
    #[doc = "An array of repository objects that the installation can access."]
    pub repositories: Option<Vec<InstallationSuspendRepositoriesItem>>,
    pub requester: Option<()>,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationUnsuspend {
    pub action: InstallationUnsuspendAction,
    pub installation: InstallationUnsuspendInstallation,
    #[doc = "An array of repository objects that the installation can access."]
    pub repositories: Option<Vec<InstallationUnsuspendRepositoriesItem>>,
    pub requester: Option<()>,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationLite {
    #[doc = "The ID of the installation."]
    pub id: u64,
    pub node_id: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum InstallationEvent {
    Created(InstallationCreated),
    Deleted(InstallationDeleted),
    NewPermissionsAccepted(InstallationNewPermissionsAccepted),
    Suspend(InstallationSuspend),
    Unsuspend(InstallationUnsuspend),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationRepositoriesAdded {
    pub action: InstallationRepositoriesAddedAction,
    pub installation: Installation,
    #[doc = "An array of repository objects, which were added to the installation."]
    pub repositories_added: Vec<InstallationRepositoriesAddedRepositoriesAddedItem>,
    #[doc = "An array of repository objects, which were removed from the installation."]
    pub repositories_removed: Vec<InstallationRepositoriesAddedRepositoriesRemovedItem>,
    #[doc = "Describe whether all repositories have been selected or there's a selection involved"]
    pub repository_selection: InstallationRepositoriesAddedRepositorySelection,
    pub requester: Option<User>,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationRepositoriesRemoved {
    pub action: InstallationRepositoriesRemovedAction,
    pub installation: Installation,
    #[doc = "An array of repository objects, which were added to the installation."]
    pub repositories_added: Vec<InstallationRepositoriesRemovedRepositoriesAddedItem>,
    #[doc = "An array of repository objects, which were removed from the installation."]
    pub repositories_removed: Vec<InstallationRepositoriesRemovedRepositoriesRemovedItem>,
    #[doc = "Describe whether all repositories have been selected or there's a selection involved"]
    pub repository_selection: InstallationRepositoriesRemovedRepositorySelection,
    pub requester: Option<User>,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum InstallationRepositoriesEvent {
    Added(InstallationRepositoriesAdded),
    Removed(InstallationRepositoriesRemoved),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Issue {
    pub active_lock_reason: Option<IssueActiveLockReason>,
    pub assignee: Option<User>,
    pub assignees: Vec<User>,
    pub author_association: AuthorAssociation,
    #[doc = "Contents of the issue"]
    pub body: Option<String>,
    pub closed_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    pub comments: u64,
    pub comments_url: String,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub events_url: String,
    pub html_url: String,
    pub id: u64,
    pub labels: Option<Vec<Label>>,
    pub labels_url: String,
    pub locked: Option<bool>,
    pub milestone: Option<Milestone>,
    pub node_id: String,
    pub number: u64,
    pub performed_via_github_app: Option<App>,
    pub pull_request: Option<IssuePullRequest>,
    pub repository_url: String,
    #[doc = "State of the issue; either 'open' or 'closed'"]
    pub state: Option<IssueState>,
    #[doc = "Title of the issue"]
    pub title: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "URL for the issue"]
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueComment {
    pub author_association: AuthorAssociation,
    #[doc = "Contents of the issue comment"]
    pub body: String,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub html_url: String,
    #[doc = "Unique identifier of the issue comment"]
    pub id: u64,
    pub issue_url: String,
    pub node_id: String,
    pub performed_via_github_app: Option<App>,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "URL for the issue comment"]
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentCreated {
    pub action: IssueCommentCreatedAction,
    pub comment: IssueComment,
    pub installation: Option<InstallationLite>,
    #[doc = "The [issue](https://docs.github.com/en/rest/reference/issues) the comment belongs to."]
    pub issue: IssueCommentCreatedIssue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentDeleted {
    pub action: IssueCommentDeletedAction,
    pub comment: IssueComment,
    pub installation: Option<InstallationLite>,
    #[doc = "The [issue](https://docs.github.com/en/rest/reference/issues) the comment belongs to."]
    pub issue: IssueCommentDeletedIssue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentEdited {
    pub action: IssueCommentEditedAction,
    pub changes: IssueCommentEditedChanges,
    pub comment: IssueComment,
    pub installation: Option<InstallationLite>,
    #[doc = "The [issue](https://docs.github.com/en/rest/reference/issues) the comment belongs to."]
    pub issue: IssueCommentEditedIssue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum IssueCommentEvent {
    Created(IssueCommentCreated),
    Deleted(IssueCommentDeleted),
    Edited(IssueCommentEdited),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesAssigned {
    #[doc = "The action that was performed."]
    pub action: IssuesAssignedAction,
    #[doc = "The optional user who was assigned or unassigned from the issue."]
    pub assignee: Option<User>,
    pub installation: Option<InstallationLite>,
    pub issue: Issue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesClosed {
    #[doc = "The action that was performed."]
    pub action: IssuesClosedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The [issue](https://docs.github.com/en/rest/reference/issues) itself."]
    pub issue: IssuesClosedIssue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesDeleted {
    pub action: IssuesDeletedAction,
    pub installation: Option<InstallationLite>,
    pub issue: Issue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesDemilestoned {
    pub action: IssuesDemilestonedAction,
    pub installation: Option<InstallationLite>,
    pub issue: IssuesDemilestonedIssue,
    pub milestone: Milestone,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesEdited {
    pub action: IssuesEditedAction,
    pub changes: IssuesEditedChanges,
    pub installation: Option<InstallationLite>,
    pub issue: Issue,
    pub label: Option<Label>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesLabeled {
    pub action: IssuesLabeledAction,
    pub installation: Option<InstallationLite>,
    pub issue: Issue,
    #[doc = "The label that was added to the issue."]
    pub label: Option<Label>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesLocked {
    pub action: IssuesLockedAction,
    pub installation: Option<InstallationLite>,
    pub issue: IssuesLockedIssue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesMilestoned {
    pub action: IssuesMilestonedAction,
    pub installation: Option<InstallationLite>,
    pub issue: IssuesMilestonedIssue,
    pub milestone: Milestone,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesOpened {
    pub action: IssuesOpenedAction,
    pub changes: Option<IssuesOpenedChanges>,
    pub installation: Option<InstallationLite>,
    pub issue: IssuesOpenedIssue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesPinned {
    pub action: IssuesPinnedAction,
    pub installation: Option<InstallationLite>,
    pub issue: Issue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesReopened {
    pub action: IssuesReopenedAction,
    pub installation: Option<InstallationLite>,
    pub issue: IssuesReopenedIssue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesTransferred {
    pub action: IssuesTransferredAction,
    pub changes: IssuesTransferredChanges,
    pub installation: Option<InstallationLite>,
    pub issue: Issue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesUnassigned {
    #[doc = "The action that was performed."]
    pub action: IssuesUnassignedAction,
    #[doc = "The optional user who was assigned or unassigned from the issue."]
    pub assignee: Option<User>,
    pub installation: Option<InstallationLite>,
    pub issue: Issue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesUnlabeled {
    pub action: IssuesUnlabeledAction,
    pub installation: Option<InstallationLite>,
    pub issue: Issue,
    #[doc = "The label that was removed from the issue."]
    pub label: Option<Label>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesUnlocked {
    pub action: IssuesUnlockedAction,
    pub installation: Option<InstallationLite>,
    pub issue: IssuesUnlockedIssue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesUnpinned {
    pub action: IssuesUnpinnedAction,
    pub installation: Option<InstallationLite>,
    pub issue: Issue,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum IssuesEvent {
    Assigned(IssuesAssigned),
    Closed(IssuesClosed),
    Deleted(IssuesDeleted),
    Demilestoned(IssuesDemilestoned),
    Edited(IssuesEdited),
    Labeled(IssuesLabeled),
    Locked(IssuesLocked),
    Milestoned(IssuesMilestoned),
    Opened(IssuesOpened),
    Pinned(IssuesPinned),
    Reopened(IssuesReopened),
    Transferred(IssuesTransferred),
    Unassigned(IssuesUnassigned),
    Unlabeled(IssuesUnlabeled),
    Unlocked(IssuesUnlocked),
    Unpinned(IssuesUnpinned),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Label {
    #[doc = "6-character hex code, without the leading #, identifying the color"]
    pub color: String,
    pub default: bool,
    pub description: Option<String>,
    pub id: u64,
    #[doc = "The name of the label."]
    pub name: String,
    pub node_id: String,
    #[doc = "URL for the label"]
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct LabelCreated {
    pub action: LabelCreatedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The label that was added."]
    pub label: Label,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct LabelDeleted {
    pub action: LabelDeletedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The label that was removed."]
    pub label: Label,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct LabelEdited {
    pub action: LabelEditedAction,
    pub changes: Option<LabelEditedChanges>,
    pub installation: Option<InstallationLite>,
    #[doc = "The label that was edited."]
    pub label: Label,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum LabelEvent {
    Created(LabelCreated),
    Deleted(LabelDeleted),
    Edited(LabelEdited),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct License {
    pub key: String,
    pub name: String,
    pub node_id: String,
    pub spdx_id: String,
    pub url: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Link {
    pub href: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchase {
    pub account: MarketplacePurchaseAccount,
    pub billing_cycle: String,
    pub free_trial_ends_on: (),
    pub next_billing_date: Option<String>,
    pub on_free_trial: bool,
    pub plan: MarketplacePurchasePlan,
    pub unit_count: u64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchaseCancelled {
    pub action: MarketplacePurchaseCancelledAction,
    pub effective_date: String,
    pub marketplace_purchase: MarketplacePurchaseCancelledMarketplacePurchase,
    pub previous_marketplace_purchase: Option<MarketplacePurchase>,
    pub sender: MarketplacePurchaseCancelledSender,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchaseChanged {
    pub action: MarketplacePurchaseChangedAction,
    pub effective_date: String,
    pub marketplace_purchase: MarketplacePurchaseChangedMarketplacePurchase,
    pub previous_marketplace_purchase: Option<MarketplacePurchase>,
    pub sender: MarketplacePurchaseChangedSender,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasePendingChange {
    pub action: MarketplacePurchasePendingChangeAction,
    pub effective_date: String,
    pub marketplace_purchase: MarketplacePurchasePendingChangeMarketplacePurchase,
    pub previous_marketplace_purchase: Option<MarketplacePurchase>,
    pub sender: MarketplacePurchasePendingChangeSender,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasePendingChangeCancelled {
    pub action: MarketplacePurchasePendingChangeCancelledAction,
    pub effective_date: String,
    pub marketplace_purchase: MarketplacePurchasePendingChangeCancelledMarketplacePurchase,
    pub previous_marketplace_purchase: Option<MarketplacePurchase>,
    pub sender: MarketplacePurchasePendingChangeCancelledSender,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasePurchased {
    pub action: MarketplacePurchasePurchasedAction,
    pub effective_date: String,
    pub marketplace_purchase: MarketplacePurchasePurchasedMarketplacePurchase,
    pub previous_marketplace_purchase: Option<MarketplacePurchase>,
    pub sender: MarketplacePurchasePurchasedSender,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum MarketplacePurchaseEvent {
    Cancelled(MarketplacePurchaseCancelled),
    Changed(MarketplacePurchaseChanged),
    PendingChange(MarketplacePurchasePendingChange),
    PendingChangeCancelled(MarketplacePurchasePendingChangeCancelled),
    Purchased(MarketplacePurchasePurchased),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MemberAdded {
    pub action: MemberAddedAction,
    pub changes: Option<MemberAddedChanges>,
    pub installation: Option<InstallationLite>,
    #[doc = "The user that was added."]
    pub member: User,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MemberEdited {
    pub action: MemberEditedAction,
    pub changes: MemberEditedChanges,
    pub installation: Option<InstallationLite>,
    #[doc = "The user who's permissions are changed."]
    pub member: User,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MemberRemoved {
    pub action: MemberRemovedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The user that was removed."]
    pub member: User,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum MemberEvent {
    Added(MemberAdded),
    Edited(MemberEdited),
    Removed(MemberRemoved),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Membership {
    pub organization_url: String,
    pub role: String,
    pub state: String,
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MembershipAdded {
    pub action: MembershipAddedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The [user](https://docs.github.com/en/rest/reference/users) that was added or removed."]
    pub member: User,
    pub organization: Organization,
    #[doc = "The scope of the membership. Currently, can only be `team`."]
    pub scope: MembershipAddedScope,
    pub sender: User,
    #[doc = "The [team](https://docs.github.com/en/rest/reference/teams) for the membership."]
    pub team: Team,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MembershipRemoved {
    pub action: MembershipRemovedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The [user](https://docs.github.com/en/rest/reference/users) that was added or removed."]
    pub member: User,
    pub organization: Organization,
    #[doc = "The scope of the membership. Currently, can only be `team`."]
    pub scope: MembershipRemovedScope,
    pub sender: User,
    #[doc = "The [team](https://docs.github.com/en/rest/reference/teams) for the membership."]
    pub team: MembershipRemovedTeam,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum MembershipEvent {
    Added(MembershipAdded),
    Removed(MembershipRemoved),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MetaDeleted {
    pub action: MetaDeletedAction,
    pub hook: MetaDeletedHook,
    #[doc = "The id of the modified webhook."]
    pub hook_id: u64,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MetaEvent(MetaDeleted);
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Milestone {
    pub closed_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    pub closed_issues: u64,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub creator: User,
    pub description: Option<String>,
    pub due_on: Option<chrono::DateTime<chrono::offset::Utc>>,
    pub html_url: String,
    pub id: u64,
    pub labels_url: String,
    pub node_id: String,
    #[doc = "The number of the milestone."]
    pub number: u64,
    pub open_issues: u64,
    #[doc = "The state of the milestone."]
    pub state: MilestoneState,
    #[doc = "The title of the milestone."]
    pub title: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneClosed {
    pub action: MilestoneClosedAction,
    pub installation: Option<InstallationLite>,
    pub milestone: MilestoneClosedMilestone,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneCreated {
    pub action: MilestoneCreatedAction,
    pub installation: Option<InstallationLite>,
    pub milestone: MilestoneCreatedMilestone,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneDeleted {
    pub action: MilestoneDeletedAction,
    pub installation: Option<InstallationLite>,
    pub milestone: Milestone,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneEdited {
    pub action: MilestoneEditedAction,
    pub changes: MilestoneEditedChanges,
    pub installation: Option<InstallationLite>,
    pub milestone: Milestone,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneOpened {
    pub action: MilestoneOpenedAction,
    pub installation: Option<InstallationLite>,
    pub milestone: MilestoneOpenedMilestone,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum MilestoneEvent {
    Closed(MilestoneClosed),
    Created(MilestoneCreated),
    Deleted(MilestoneDeleted),
    Edited(MilestoneEdited),
    Opened(MilestoneOpened),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OrgBlockBlocked {
    pub action: OrgBlockBlockedAction,
    #[doc = "Information about the user that was blocked or unblocked."]
    pub blocked_user: User,
    pub installation: Option<InstallationLite>,
    pub organization: Organization,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OrgBlockUnblocked {
    pub action: OrgBlockUnblockedAction,
    #[doc = "Information about the user that was blocked or unblocked."]
    pub blocked_user: User,
    pub installation: Option<InstallationLite>,
    pub organization: Organization,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum OrgBlockEvent {
    Blocked(OrgBlockBlocked),
    Unblocked(OrgBlockUnblocked),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Organization {
    pub avatar_url: String,
    pub description: Option<String>,
    pub events_url: String,
    pub hooks_url: String,
    pub html_url: Option<String>,
    pub id: u64,
    pub issues_url: String,
    pub login: String,
    pub members_url: String,
    pub node_id: String,
    pub public_members_url: String,
    pub repos_url: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OrganizationDeleted {
    pub action: OrganizationDeletedAction,
    pub installation: Option<InstallationLite>,
    pub membership: Membership,
    pub organization: Organization,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OrganizationMemberAdded {
    pub action: OrganizationMemberAddedAction,
    pub installation: Option<InstallationLite>,
    pub membership: Membership,
    pub organization: Organization,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OrganizationMemberInvited {
    pub action: OrganizationMemberInvitedAction,
    pub installation: Option<InstallationLite>,
    pub invitation: OrganizationMemberInvitedInvitation,
    pub organization: Organization,
    pub sender: User,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OrganizationMemberRemoved {
    pub action: OrganizationMemberRemovedAction,
    pub installation: Option<InstallationLite>,
    pub membership: Membership,
    pub organization: Organization,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OrganizationRenamed {
    pub action: OrganizationRenamedAction,
    pub installation: Option<InstallationLite>,
    pub membership: Membership,
    pub organization: Organization,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum OrganizationEvent {
    Deleted(OrganizationDeleted),
    MemberAdded(OrganizationMemberAdded),
    MemberInvited(OrganizationMemberInvited),
    MemberRemoved(OrganizationMemberRemoved),
    Renamed(OrganizationRenamed),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackagePublished {
    pub action: PackagePublishedAction,
    pub organization: Option<Organization>,
    pub package: PackagePublishedPackage,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackageUpdated {
    pub action: PackageUpdatedAction,
    pub organization: Option<Organization>,
    pub package: PackageUpdatedPackage,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PackageEvent {
    Published(PackagePublished),
    Updated(PackageUpdated),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PageBuildEvent {
    pub build: PageBuildEventBuild,
    pub id: u64,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PingEvent {
    pub hook: PingEventHook,
    #[doc = "The ID of the webhook that triggered the ping."]
    pub hook_id: u64,
    pub organization: Option<Organization>,
    pub repository: Option<Repository>,
    pub sender: Option<User>,
    pub zen: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Project {
    #[doc = "Body of the project"]
    pub body: Option<String>,
    pub columns_url: String,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub creator: User,
    pub html_url: String,
    pub id: u64,
    #[doc = "Name of the project"]
    pub name: String,
    pub node_id: String,
    pub number: u64,
    pub owner_url: String,
    #[doc = "State of the project; either 'open' or 'closed'"]
    pub state: ProjectState,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectClosed {
    pub action: ProjectClosedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project: Project,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCreated {
    pub action: ProjectCreatedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project: Project,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectDeleted {
    pub action: ProjectDeletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project: Project,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectEdited {
    pub action: ProjectEditedAction,
    pub changes: ProjectEditedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project: Project,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectReopened {
    pub action: ProjectReopenedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project: Project,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCard {
    pub after_id: Option<()>,
    #[doc = "Whether or not the card is archived"]
    pub archived: bool,
    pub column_id: u64,
    pub column_url: String,
    pub content_url: Option<String>,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub creator: User,
    #[doc = "The project card's ID"]
    pub id: u64,
    pub node_id: String,
    pub note: Option<String>,
    pub project_url: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectColumn {
    pub cards_url: String,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The unique identifier of the project column"]
    pub id: u64,
    #[doc = "Name of the project column"]
    pub name: String,
    pub node_id: String,
    pub project_url: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardConverted {
    pub action: ProjectCardConvertedAction,
    pub changes: ProjectCardConvertedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project_card: ProjectCard,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardCreated {
    pub action: ProjectCardCreatedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project_card: ProjectCard,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardDeleted {
    pub action: ProjectCardDeletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project_card: ProjectCard,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardEdited {
    pub action: ProjectCardEditedAction,
    pub changes: ProjectCardEditedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project_card: ProjectCard,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardMoved {
    pub action: ProjectCardMovedAction,
    pub changes: ProjectCardMovedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project_card: ProjectCardMovedProjectCard,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum ProjectCardEvent {
    Converted(ProjectCardConverted),
    Created(ProjectCardCreated),
    Deleted(ProjectCardDeleted),
    Edited(ProjectCardEdited),
    Moved(ProjectCardMoved),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectColumnCreated {
    pub action: ProjectColumnCreatedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project_column: ProjectColumn,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectColumnDeleted {
    pub action: ProjectColumnDeletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project_column: ProjectColumn,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectColumnEdited {
    pub action: ProjectColumnEditedAction,
    pub changes: ProjectColumnEditedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project_column: ProjectColumn,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectColumnMoved {
    pub action: ProjectColumnMovedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub project_column: ProjectColumn,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum ProjectColumnEvent {
    Created(ProjectColumnCreated),
    Deleted(ProjectColumnDeleted),
    Edited(ProjectColumnEdited),
    Moved(ProjectColumnMoved),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum ProjectEvent {
    Closed(ProjectClosed),
    Created(ProjectCreated),
    Deleted(ProjectDeleted),
    Edited(ProjectEdited),
    Reopened(ProjectReopened),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PublicEvent {
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: PublicEventRepository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequest {
    pub active_lock_reason: Option<PullRequestActiveLockReason>,
    pub additions: u64,
    pub assignee: Option<User>,
    pub assignees: Vec<User>,
    pub author_association: AuthorAssociation,
    pub auto_merge: (),
    pub base: PullRequestBase,
    pub body: Option<String>,
    pub changed_files: u64,
    pub closed_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    pub comments: u64,
    pub comments_url: String,
    pub commits: u64,
    pub commits_url: String,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub deletions: u64,
    pub diff_url: String,
    #[doc = "Indicates whether or not the pull request is a draft."]
    pub draft: bool,
    pub head: PullRequestHead,
    pub html_url: String,
    pub id: u64,
    pub issue_url: String,
    pub labels: Vec<Label>,
    #[serde(rename = "_links")]
    pub links: PullRequestLinks,
    pub locked: bool,
    #[doc = "Indicates whether maintainers can modify the pull request."]
    pub maintainer_can_modify: bool,
    pub merge_commit_sha: Option<String>,
    pub mergeable: Option<bool>,
    pub mergeable_state: String,
    pub merged: Option<bool>,
    pub merged_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    pub merged_by: Option<User>,
    pub milestone: Option<Milestone>,
    pub node_id: String,
    #[doc = "Number uniquely identifying the pull request within its repository."]
    pub number: u64,
    pub patch_url: String,
    pub rebaseable: Option<bool>,
    pub requested_reviewers: Vec<PullRequestRequestedReviewersItem>,
    pub requested_teams: Vec<Team>,
    pub review_comment_url: String,
    pub review_comments: u64,
    pub review_comments_url: String,
    #[doc = "State of this Pull Request. Either `open` or `closed`."]
    pub state: PullRequestState,
    pub statuses_url: String,
    #[doc = "The title of the pull request."]
    pub title: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewComment {
    pub author_association: AuthorAssociation,
    #[doc = "The text of the comment."]
    pub body: String,
    #[doc = "The SHA of the commit to which the comment applies."]
    pub commit_id: String,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The diff of the line that the comment refers to."]
    pub diff_hunk: String,
    #[doc = "HTML URL for the pull request review comment."]
    pub html_url: String,
    #[doc = "The ID of the pull request review comment."]
    pub id: u64,
    #[doc = "The comment ID to reply to."]
    pub in_reply_to_id: Option<u64>,
    #[doc = "The line of the blob to which the comment applies. The last line of the range for a multi-line comment"]
    pub line: Option<u64>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentLinks,
    #[doc = "The node ID of the pull request review comment."]
    pub node_id: String,
    #[doc = "The SHA of the original commit to which the comment applies."]
    pub original_commit_id: String,
    #[doc = "The line of the blob to which the comment applies. The last line of the range for a multi-line comment"]
    pub original_line: u64,
    #[doc = "The index of the original line in the diff to which the comment applies."]
    pub original_position: u64,
    #[doc = "The first line of the range for a multi-line comment."]
    pub original_start_line: Option<u64>,
    #[doc = "The relative path of the file to which the comment applies."]
    pub path: String,
    #[doc = "The line index in the diff to which the comment applies."]
    pub position: Option<u64>,
    #[doc = "The ID of the pull request review to which the comment belongs."]
    pub pull_request_review_id: u64,
    #[doc = "URL for the pull request that the review comment belongs to."]
    pub pull_request_url: String,
    #[doc = "The side of the first line of the range for a multi-line comment."]
    pub side: PullRequestReviewCommentSide,
    #[doc = "The first line of the range for a multi-line comment."]
    pub start_line: Option<u64>,
    #[doc = "The side of the first line of the range for a multi-line comment."]
    pub start_side: Option<PullRequestReviewCommentStartSide>,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "URL for the pull request review comment"]
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestAssigned {
    pub action: PullRequestAssignedAction,
    pub assignee: User,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestAutoMergeDisabled {
    pub action: PullRequestAutoMergeDisabledAction,
    pub installation: Option<InstallationLite>,
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestAutoMergeEnabled {
    pub action: PullRequestAutoMergeEnabledAction,
    pub installation: Option<InstallationLite>,
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestClosed {
    pub action: PullRequestClosedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequestClosedPullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestConvertedToDraft {
    pub action: PullRequestConvertedToDraftAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequestConvertedToDraftPullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestEdited {
    pub action: PullRequestEditedAction,
    pub changes: PullRequestEditedChanges,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestLabeled {
    pub action: PullRequestLabeledAction,
    pub installation: Option<InstallationLite>,
    pub label: Label,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestLocked {
    pub action: PullRequestLockedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestOpened {
    pub action: PullRequestOpenedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequestOpenedPullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReadyForReview {
    pub action: PullRequestReadyForReviewAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequestReadyForReviewPullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReopened {
    pub action: PullRequestReopenedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequestReopenedPullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestReviewRequestRemoved {
    Variant0 {
        action: PullRequestReviewRequestRemovedVariant0Action,
        installation: Option<InstallationLite>,
        #[doc = "The pull request number."]
        number: u64,
        organization: Option<Organization>,
        pull_request: PullRequest,
        repository: Repository,
        requested_reviewer: User,
        sender: User,
    },
    Variant1 {
        action: PullRequestReviewRequestRemovedVariant1Action,
        installation: Option<InstallationLite>,
        #[doc = "The pull request number."]
        number: u64,
        organization: Option<Organization>,
        pull_request: PullRequest,
        repository: Repository,
        requested_team: Team,
        sender: User,
    },
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestReviewRequested {
    Variant0 {
        action: PullRequestReviewRequestedVariant0Action,
        installation: Option<InstallationLite>,
        #[doc = "The pull request number."]
        number: u64,
        organization: Option<Organization>,
        pull_request: PullRequest,
        repository: Repository,
        requested_reviewer: User,
        sender: User,
    },
    Variant1 {
        action: PullRequestReviewRequestedVariant1Action,
        installation: Option<InstallationLite>,
        #[doc = "The pull request number."]
        number: u64,
        organization: Option<Organization>,
        pull_request: PullRequest,
        repository: Repository,
        requested_team: Team,
        sender: User,
    },
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestSynchronize {
    pub action: PullRequestSynchronizeAction,
    pub after: String,
    pub before: String,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestUnassigned {
    pub action: PullRequestUnassignedAction,
    pub assignee: User,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestUnlabeled {
    pub action: PullRequestUnlabeledAction,
    pub installation: Option<InstallationLite>,
    pub label: Label,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestUnlocked {
    pub action: PullRequestUnlockedAction,
    pub installation: Option<InstallationLite>,
    #[doc = "The pull request number."]
    pub number: u64,
    pub organization: Option<Organization>,
    pub pull_request: PullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestEvent {
    Assigned(PullRequestAssigned),
    AutoMergeDisabled(PullRequestAutoMergeDisabled),
    AutoMergeEnabled(PullRequestAutoMergeEnabled),
    Closed(PullRequestClosed),
    ConvertedToDraft(PullRequestConvertedToDraft),
    Edited(PullRequestEdited),
    Labeled(PullRequestLabeled),
    Locked(PullRequestLocked),
    Opened(PullRequestOpened),
    ReadyForReview(PullRequestReadyForReview),
    Reopened(PullRequestReopened),
    ReviewRequestRemoved(PullRequestReviewRequestRemoved),
    ReviewRequested(PullRequestReviewRequested),
    Synchronize(PullRequestSynchronize),
    Unassigned(PullRequestUnassigned),
    Unlabeled(PullRequestUnlabeled),
    Unlocked(PullRequestUnlocked),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewDismissed {
    pub action: PullRequestReviewDismissedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub pull_request: SimplePullRequest,
    pub repository: Repository,
    pub review: PullRequestReviewDismissedReview,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewEdited {
    pub action: PullRequestReviewEditedAction,
    pub changes: PullRequestReviewEditedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub pull_request: SimplePullRequest,
    pub repository: Repository,
    pub review: PullRequestReviewEditedReview,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewSubmitted {
    pub action: PullRequestReviewSubmittedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub pull_request: SimplePullRequest,
    pub repository: Repository,
    pub review: PullRequestReviewSubmittedReview,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentCreated {
    pub action: PullRequestReviewCommentCreatedAction,
    pub comment: PullRequestReviewComment,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub pull_request: PullRequestReviewCommentCreatedPullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentDeleted {
    pub action: PullRequestReviewCommentDeletedAction,
    pub comment: PullRequestReviewComment,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub pull_request: PullRequestReviewCommentDeletedPullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentEdited {
    pub action: PullRequestReviewCommentEditedAction,
    pub changes: PullRequestReviewCommentEditedChanges,
    pub comment: PullRequestReviewComment,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub pull_request: PullRequestReviewCommentEditedPullRequest,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestReviewCommentEvent {
    Created(PullRequestReviewCommentCreated),
    Deleted(PullRequestReviewCommentDeleted),
    Edited(PullRequestReviewCommentEdited),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestReviewEvent {
    Dismissed(PullRequestReviewDismissed),
    Edited(PullRequestReviewEdited),
    Submitted(PullRequestReviewSubmitted),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PushEvent {
    #[doc = "The SHA of the most recent commit on `ref` after the push."]
    pub after: String,
    pub base_ref: Option<String>,
    #[doc = "The SHA of the most recent commit on `ref` before the push."]
    pub before: String,
    #[doc = "An array of commit objects describing the pushed commits."]
    pub commits: Vec<Commit>,
    pub compare: String,
    pub created: bool,
    pub deleted: bool,
    pub forced: bool,
    pub head_commit: Option<Commit>,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub pusher: Committer,
    pub repository: Repository,
    #[doc = "The full git ref that was pushed. Example: `refs/heads/main`."]
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Release {
    pub assets: Vec<ReleaseAsset>,
    pub assets_url: String,
    pub author: User,
    pub body: String,
    pub created_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    #[doc = "Wether the release is a draft or published"]
    pub draft: bool,
    pub html_url: String,
    pub id: u64,
    pub name: String,
    pub node_id: String,
    #[doc = "Whether the release is identified as a prerelease or a full release."]
    pub prerelease: bool,
    pub published_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    #[doc = "The name of the tag."]
    pub tag_name: String,
    pub tarball_url: Option<String>,
    #[doc = "Specifies the commitish value that determines where the Git tag is created from."]
    pub target_commitish: String,
    pub upload_url: String,
    pub url: String,
    pub zipball_url: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleaseCreated {
    pub action: ReleaseCreatedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub release: Release,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleaseDeleted {
    pub action: ReleaseDeletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub release: Release,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleaseEdited {
    pub action: ReleaseEditedAction,
    pub changes: ReleaseEditedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub release: Release,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleasePrereleased {
    pub action: ReleasePrereleasedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub release: ReleasePrereleasedRelease,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleasePublished {
    pub action: ReleasePublishedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub release: ReleasePublishedRelease,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleaseReleased {
    pub action: ReleaseReleasedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub release: Release,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleaseUnpublished {
    pub action: ReleaseUnpublishedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub release: ReleaseUnpublishedRelease,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleaseAsset {
    pub browser_download_url: String,
    pub content_type: String,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub download_count: u64,
    pub id: u64,
    pub label: Option<String>,
    #[doc = "The file name of the asset."]
    pub name: String,
    pub node_id: String,
    pub size: u64,
    #[doc = "State of the release asset."]
    pub state: ReleaseAssetState,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub uploader: Option<User>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum ReleaseEvent {
    Created(ReleaseCreated),
    Deleted(ReleaseDeleted),
    Edited(ReleaseEdited),
    Prereleased(ReleasePrereleased),
    Published(ReleasePublished),
    Released(ReleaseReleased),
    Unpublished(ReleaseUnpublished),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepoRef {
    pub id: u64,
    pub name: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Repository {
    #[doc = "Whether to allow auto-merge for pull requests."]
    pub allow_auto_merge: Option<bool>,
    #[doc = "Whether to allow private forks"]
    pub allow_forking: Option<bool>,
    #[doc = "Whether to allow merge commits for pull requests."]
    pub allow_merge_commit: Option<bool>,
    #[doc = "Whether to allow rebase merges for pull requests."]
    pub allow_rebase_merge: Option<bool>,
    #[doc = "Whether to allow squash merges for pull requests."]
    pub allow_squash_merge: Option<bool>,
    pub archive_url: String,
    #[doc = "Whether the repository is archived."]
    pub archived: bool,
    pub assignees_url: String,
    pub blobs_url: String,
    pub branches_url: String,
    pub clone_url: String,
    pub collaborators_url: String,
    pub comments_url: String,
    pub commits_url: String,
    pub compare_url: String,
    pub contents_url: String,
    pub contributors_url: String,
    pub created_at: RepositoryCreatedAt,
    #[doc = "The default branch of the repository."]
    pub default_branch: String,
    #[doc = "Whether to delete head branches when pull requests are merged"]
    pub delete_branch_on_merge: Option<bool>,
    pub deployments_url: String,
    pub description: Option<String>,
    #[doc = "Returns whether or not this repository is disabled."]
    pub disabled: Option<bool>,
    pub downloads_url: String,
    pub events_url: String,
    pub fork: bool,
    pub forks: u64,
    pub forks_count: u64,
    pub forks_url: String,
    pub full_name: String,
    pub git_commits_url: String,
    pub git_refs_url: String,
    pub git_tags_url: String,
    pub git_url: String,
    #[doc = "Whether downloads are enabled."]
    pub has_downloads: bool,
    #[doc = "Whether issues are enabled."]
    pub has_issues: bool,
    pub has_pages: bool,
    #[doc = "Whether projects are enabled."]
    pub has_projects: bool,
    #[doc = "Whether the wiki is enabled."]
    pub has_wiki: bool,
    pub homepage: Option<String>,
    pub hooks_url: String,
    pub html_url: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    pub issue_comment_url: String,
    pub issue_events_url: String,
    pub issues_url: String,
    pub keys_url: String,
    pub labels_url: String,
    pub language: Option<String>,
    pub languages_url: String,
    pub license: Option<License>,
    pub master_branch: Option<String>,
    pub merges_url: String,
    pub milestones_url: String,
    pub mirror_url: Option<String>,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    pub notifications_url: String,
    pub open_issues: u64,
    pub open_issues_count: u64,
    pub organization: Option<String>,
    pub owner: User,
    pub permissions: Option<RepositoryPermissions>,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
    pub public: Option<bool>,
    pub pulls_url: String,
    pub pushed_at: RepositoryPushedAt,
    pub releases_url: String,
    pub size: u64,
    pub ssh_url: String,
    pub stargazers: Option<u64>,
    pub stargazers_count: u64,
    pub stargazers_url: String,
    pub statuses_url: String,
    pub subscribers_url: String,
    pub subscription_url: String,
    pub svn_url: String,
    pub tags_url: String,
    pub teams_url: String,
    pub trees_url: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
    pub watchers: u64,
    pub watchers_count: u64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryArchived {
    pub action: RepositoryArchivedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: RepositoryArchivedRepository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryCreated {
    pub action: RepositoryCreatedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryDeleted {
    pub action: RepositoryDeletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryEdited {
    pub action: RepositoryEditedAction,
    pub changes: RepositoryEditedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryPrivatized {
    pub action: RepositoryPrivatizedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: RepositoryPrivatizedRepository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryPublicized {
    pub action: RepositoryPublicizedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: RepositoryPublicizedRepository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryRenamed {
    pub action: RepositoryRenamedAction,
    pub changes: RepositoryRenamedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryTransferred {
    pub action: RepositoryTransferredAction,
    pub changes: RepositoryTransferredChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryUnarchived {
    pub action: RepositoryUnarchivedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: RepositoryUnarchivedRepository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryLite {
    pub archive_url: String,
    pub assignees_url: String,
    pub blobs_url: String,
    pub branches_url: String,
    pub collaborators_url: String,
    pub comments_url: String,
    pub commits_url: String,
    pub compare_url: String,
    pub contents_url: String,
    pub contributors_url: String,
    pub deployments_url: String,
    pub description: Option<String>,
    pub downloads_url: String,
    pub events_url: String,
    pub fork: bool,
    pub forks_url: String,
    pub full_name: String,
    pub git_commits_url: String,
    pub git_refs_url: String,
    pub git_tags_url: String,
    pub hooks_url: String,
    pub html_url: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    pub issue_comment_url: String,
    pub issue_events_url: String,
    pub issues_url: String,
    pub keys_url: String,
    pub labels_url: String,
    pub languages_url: String,
    pub merges_url: String,
    pub milestones_url: String,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    pub notifications_url: String,
    pub owner: User,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
    pub pulls_url: String,
    pub releases_url: String,
    pub stargazers_url: String,
    pub statuses_url: String,
    pub subscribers_url: String,
    pub subscription_url: String,
    pub tags_url: String,
    pub teams_url: String,
    pub trees_url: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryDispatchOnDemandTest {
    pub action: RepositoryDispatchOnDemandTestAction,
    pub branch: String,
    pub client_payload: serde_json::Value,
    pub installation: InstallationLite,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryDispatchEvent(RepositoryDispatchOnDemandTest);
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum RepositoryEvent {
    Archived(RepositoryArchived),
    Created(RepositoryCreated),
    Deleted(RepositoryDeleted),
    Edited(RepositoryEdited),
    Privatized(RepositoryPrivatized),
    Publicized(RepositoryPublicized),
    Renamed(RepositoryRenamed),
    Transferred(RepositoryTransferred),
    Unarchived(RepositoryUnarchived),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryImportEvent {
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    pub status: RepositoryImportEventStatus,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryVulnerabilityAlertCreate {
    pub action: RepositoryVulnerabilityAlertCreateAction,
    pub alert: RepositoryVulnerabilityAlertCreateAlert,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryVulnerabilityAlertDismiss {
    pub action: RepositoryVulnerabilityAlertDismissAction,
    pub alert: RepositoryVulnerabilityAlertDismissAlert,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryVulnerabilityAlertResolve {
    pub action: RepositoryVulnerabilityAlertResolveAction,
    pub alert: RepositoryVulnerabilityAlertResolveAlert,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum RepositoryVulnerabilityAlertEvent {
    Create(RepositoryVulnerabilityAlertCreate),
    Dismiss(RepositoryVulnerabilityAlertDismiss),
    Resolve(RepositoryVulnerabilityAlertResolve),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecretScanningAlertCreated {
    pub action: SecretScanningAlertCreatedAction,
    pub alert: SecretScanningAlertCreatedAlert,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecretScanningAlertReopened {
    pub action: SecretScanningAlertReopenedAction,
    pub alert: SecretScanningAlertReopenedAlert,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecretScanningAlertResolved {
    pub action: SecretScanningAlertResolvedAction,
    pub alert: SecretScanningAlertResolvedAlert,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum SecretScanningAlertEvent {
    Created(SecretScanningAlertCreated),
    Reopened(SecretScanningAlertReopened),
    Resolved(SecretScanningAlertResolved),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryPerformed {
    pub action: SecurityAdvisoryPerformedAction,
    pub security_advisory: SecurityAdvisoryPerformedSecurityAdvisory,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryPublished {
    pub action: SecurityAdvisoryPublishedAction,
    pub security_advisory: SecurityAdvisoryPublishedSecurityAdvisory,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryUpdated {
    pub action: SecurityAdvisoryUpdatedAction,
    pub security_advisory: SecurityAdvisoryUpdatedSecurityAdvisory,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryWithdrawn {
    pub action: SecurityAdvisoryWithdrawnAction,
    pub security_advisory: SecurityAdvisoryWithdrawnSecurityAdvisory,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum SecurityAdvisoryEvent {
    Performed(SecurityAdvisoryPerformed),
    Published(SecurityAdvisoryPublished),
    Updated(SecurityAdvisoryUpdated),
    Withdrawn(SecurityAdvisoryWithdrawn),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SimplePullRequest {
    pub active_lock_reason: Option<SimplePullRequestActiveLockReason>,
    pub assignee: Option<User>,
    pub assignees: Vec<User>,
    pub author_association: AuthorAssociation,
    pub auto_merge: (),
    pub base: SimplePullRequestBase,
    pub body: String,
    pub closed_at: Option<String>,
    pub comments_url: String,
    pub commits_url: String,
    pub created_at: String,
    pub diff_url: String,
    pub draft: bool,
    pub head: SimplePullRequestHead,
    pub html_url: String,
    pub id: u64,
    pub issue_url: String,
    pub labels: Vec<Label>,
    #[serde(rename = "_links")]
    pub links: SimplePullRequestLinks,
    pub locked: bool,
    pub merge_commit_sha: Option<String>,
    pub merged_at: Option<String>,
    pub milestone: Option<Milestone>,
    pub node_id: String,
    pub number: u64,
    pub patch_url: String,
    pub requested_reviewers: Vec<SimplePullRequestRequestedReviewersItem>,
    pub requested_teams: Vec<Team>,
    pub review_comment_url: String,
    pub review_comments_url: String,
    pub state: SimplePullRequestState,
    pub statuses_url: String,
    pub title: String,
    pub updated_at: String,
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipCancelled {
    pub action: SponsorshipCancelledAction,
    pub sender: User,
    pub sponsorship: SponsorshipCancelledSponsorship,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipCreated {
    pub action: SponsorshipCreatedAction,
    pub sender: User,
    pub sponsorship: SponsorshipCreatedSponsorship,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipEdited {
    pub action: SponsorshipEditedAction,
    pub changes: SponsorshipEditedChanges,
    pub sender: User,
    pub sponsorship: SponsorshipEditedSponsorship,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipPendingCancellation {
    pub action: SponsorshipPendingCancellationAction,
    #[doc = "The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect."]
    pub effective_date: Option<String>,
    pub sender: User,
    pub sponsorship: SponsorshipPendingCancellationSponsorship,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipPendingTierChange {
    pub action: SponsorshipPendingTierChangeAction,
    pub changes: SponsorshipPendingTierChangeChanges,
    #[doc = "The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect."]
    pub effective_date: Option<String>,
    pub sender: User,
    pub sponsorship: SponsorshipPendingTierChangeSponsorship,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipTierChanged {
    pub action: SponsorshipTierChangedAction,
    pub changes: SponsorshipTierChangedChanges,
    pub sender: User,
    pub sponsorship: SponsorshipTierChangedSponsorship,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipTier {
    pub created_at: String,
    pub description: String,
    pub is_custom_ammount: bool,
    pub is_one_time: bool,
    pub monthly_price_in_cents: u64,
    pub monthly_price_in_dollars: u64,
    pub name: String,
    pub node_id: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum SponsorshipEvent {
    Cancelled(SponsorshipCancelled),
    Created(SponsorshipCreated),
    Edited(SponsorshipEdited),
    PendingCancellation(SponsorshipPendingCancellation),
    PendingTierChange(SponsorshipPendingTierChange),
    TierChanged(SponsorshipTierChanged),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StarCreated {
    pub action: StarCreatedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    #[doc = "The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action."]
    pub starred_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StarDeleted {
    pub action: StarDeletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    #[doc = "The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action."]
    pub starred_at: (),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum StarEvent {
    Created(StarCreated),
    Deleted(StarDeleted),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatusEvent {
    pub avatar_url: Option<String>,
    #[doc = "An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches."]
    pub branches: Vec<StatusEventBranchesItem>,
    pub commit: StatusEventCommit,
    pub context: String,
    pub created_at: String,
    #[doc = "The optional human-readable description added to the status."]
    pub description: Option<String>,
    #[doc = "The unique identifier of the status."]
    pub id: u64,
    pub installation: Option<InstallationLite>,
    pub name: String,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    #[doc = "The Commit SHA."]
    pub sha: String,
    #[doc = "The new state. Can be `pending`, `success`, `failure`, or `error`."]
    pub state: StatusEventState,
    #[doc = "The optional link added to the status."]
    pub target_url: Option<String>,
    pub updated_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Team {
    #[doc = "Description of the team"]
    pub description: Option<String>,
    pub html_url: String,
    #[doc = "Unique identifier of the team"]
    pub id: u64,
    pub members_url: String,
    #[doc = "Name of the team"]
    pub name: String,
    pub node_id: String,
    pub parent: Option<TeamParent>,
    #[doc = "Permission that the team will have for its repositories"]
    pub permission: String,
    pub privacy: TeamPrivacy,
    pub repositories_url: String,
    pub slug: String,
    #[doc = "URL for the team"]
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeamAddedToRepository {
    pub action: TeamAddedToRepositoryAction,
    pub installation: Option<InstallationLite>,
    pub organization: Organization,
    pub repository: Option<Repository>,
    pub sender: User,
    pub team: Team,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeamCreated {
    pub action: TeamCreatedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Organization,
    pub repository: Option<Repository>,
    pub sender: User,
    pub team: Team,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeamDeleted {
    pub action: TeamDeletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Organization,
    pub repository: Option<Repository>,
    pub sender: User,
    pub team: Team,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeamEdited {
    pub action: TeamEditedAction,
    pub changes: TeamEditedChanges,
    pub installation: Option<InstallationLite>,
    pub organization: Organization,
    pub repository: Option<Repository>,
    pub sender: User,
    pub team: Team,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeamRemovedFromRepository {
    pub action: TeamRemovedFromRepositoryAction,
    pub installation: Option<InstallationLite>,
    pub organization: Organization,
    pub repository: Option<Repository>,
    pub sender: User,
    pub team: Team,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeamAddEvent {
    pub installation: Option<InstallationLite>,
    pub organization: Organization,
    pub repository: Repository,
    pub sender: User,
    pub team: Team,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum TeamEvent {
    AddedToRepository(TeamAddedToRepository),
    Created(TeamCreated),
    Deleted(TeamDeleted),
    Edited(TeamEdited),
    RemovedFromRepository(TeamRemovedFromRepository),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct User {
    pub avatar_url: String,
    pub email: Option<String>,
    pub events_url: String,
    pub followers_url: String,
    pub following_url: String,
    pub gists_url: String,
    pub gravatar_id: String,
    pub html_url: String,
    pub id: u64,
    pub login: String,
    pub name: Option<String>,
    pub node_id: String,
    pub organizations_url: String,
    pub received_events_url: String,
    pub repos_url: String,
    pub site_admin: bool,
    pub starred_url: String,
    pub subscriptions_url: String,
    #[serde(rename = "type")]
    pub ttype: UserType,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WatchStarted {
    pub action: WatchStartedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WatchEvent(WatchStarted);
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum WebhookEvents {
    Variant0(Vec<WebhookEventsVariant0Item>),
    Variant1(Vec<String>),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Workflow {
    pub badge_url: String,
    pub created_at: String,
    pub html_url: String,
    pub id: u64,
    pub name: String,
    pub node_id: String,
    pub path: String,
    pub state: String,
    pub updated_at: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowJob {
    pub check_run_url: String,
    pub completed_at: Option<String>,
    pub conclusion: Option<WorkflowJobConclusion>,
    pub head_sha: String,
    pub html_url: String,
    pub id: u64,
    pub labels: Vec<String>,
    pub name: String,
    pub node_id: String,
    pub run_id: f64,
    pub run_url: String,
    pub started_at: String,
    pub status: WorkflowJobStatus,
    pub steps: Vec<WorkflowStep>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowRun {
    pub artifacts_url: String,
    pub cancel_url: String,
    pub check_suite_id: u64,
    pub check_suite_node_id: String,
    pub check_suite_url: String,
    pub conclusion: Option<WorkflowRunConclusion>,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub event: String,
    pub head_branch: String,
    pub head_commit: CommitSimple,
    pub head_repository: RepositoryLite,
    pub head_sha: String,
    pub html_url: String,
    pub id: u64,
    pub jobs_url: String,
    pub logs_url: String,
    pub name: String,
    pub node_id: String,
    pub pull_requests: Vec<WorkflowRunPullRequestsItem>,
    pub repository: RepositoryLite,
    pub rerun_url: String,
    pub run_number: u64,
    pub status: WorkflowRunStatus,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
    pub workflow_id: u64,
    pub workflow_url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum WorkflowStep {
    InProgress(WorkflowStepInProgress),
    Completed(WorkflowStepCompleted),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowStepCompleted {
    pub completed_at: String,
    pub conclusion: WorkflowStepCompletedConclusion,
    pub name: String,
    pub number: u64,
    pub started_at: String,
    pub status: WorkflowStepCompletedStatus,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowStepInProgress {
    pub completed_at: (),
    pub conclusion: (),
    pub name: String,
    pub number: u64,
    pub started_at: String,
    pub status: WorkflowStepInProgressStatus,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowDispatchEvent {
    pub inputs: Option<serde_json::Value>,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sender: User,
    pub workflow: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowJobCompleted {
    pub action: WorkflowJobCompletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    pub workflow_job: WorkflowJobCompletedWorkflowJob,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowJobQueued {
    pub action: WorkflowJobQueuedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    pub workflow_job: WorkflowJobQueuedWorkflowJob,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowJobStarted {
    pub action: WorkflowJobStartedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    pub workflow_job: WorkflowJobStartedWorkflowJob,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum WorkflowJobEvent {
    Completed(WorkflowJobCompleted),
    Queued(WorkflowJobQueued),
    Started(WorkflowJobStarted),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowRunCompleted {
    pub action: WorkflowRunCompletedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    pub workflow: Workflow,
    pub workflow_run: WorkflowRunCompletedWorkflowRun,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowRunRequested {
    pub action: WorkflowRunRequestedAction,
    pub installation: Option<InstallationLite>,
    pub organization: Option<Organization>,
    pub repository: Repository,
    pub sender: User,
    pub workflow: Workflow,
    pub workflow_run: WorkflowRun,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum WorkflowRunEvent {
    Completed(WorkflowRunCompleted),
    Requested(WorkflowRunRequested),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AlertInstanceLocation {
    pub end_column: Option<u64>,
    pub end_line: Option<u64>,
    pub path: Option<String>,
    pub start_column: Option<u64>,
    pub start_line: Option<u64>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AlertInstanceMessage {
    pub text: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AlertInstanceState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "dismissed")]
    Dismissed,
    #[serde(rename = "fixed")]
    Fixed,
}
impl ToString for AlertInstanceState {
    fn to_string(&self) -> String {
        match self {
            AlertInstanceState::Open => "open".to_string(),
            AlertInstanceState::Dismissed => "dismissed".to_string(),
            AlertInstanceState::Fixed => "fixed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppEventsItem {
    #[serde(rename = "check_run")]
    CheckRun,
    #[serde(rename = "check_suite")]
    CheckSuite,
    #[serde(rename = "code_scanning_alert")]
    CodeScanningAlert,
    #[serde(rename = "commit_comment")]
    CommitComment,
    #[serde(rename = "content_reference")]
    ContentReference,
    #[serde(rename = "create")]
    Create,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "deployment")]
    Deployment,
    #[serde(rename = "deployment_review")]
    DeploymentReview,
    #[serde(rename = "deployment_status")]
    DeploymentStatus,
    #[serde(rename = "deploy_key")]
    DeployKey,
    #[serde(rename = "discussion")]
    Discussion,
    #[serde(rename = "discussion_comment")]
    DiscussionComment,
    #[serde(rename = "fork")]
    Fork,
    #[serde(rename = "gollum")]
    Gollum,
    #[serde(rename = "issues")]
    Issues,
    #[serde(rename = "issue_comment")]
    IssueComment,
    #[serde(rename = "label")]
    Label,
    #[serde(rename = "member")]
    Member,
    #[serde(rename = "membership")]
    Membership,
    #[serde(rename = "milestone")]
    Milestone,
    #[serde(rename = "organization")]
    Organization,
    #[serde(rename = "org_block")]
    OrgBlock,
    #[serde(rename = "page_build")]
    PageBuild,
    #[serde(rename = "project")]
    Project,
    #[serde(rename = "project_card")]
    ProjectCard,
    #[serde(rename = "project_column")]
    ProjectColumn,
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "pull_request")]
    PullRequest,
    #[serde(rename = "pull_request_review")]
    PullRequestReview,
    #[serde(rename = "pull_request_review_comment")]
    PullRequestReviewComment,
    #[serde(rename = "push")]
    Push,
    #[serde(rename = "registry_package")]
    RegistryPackage,
    #[serde(rename = "release")]
    Release,
    #[serde(rename = "repository")]
    Repository,
    #[serde(rename = "repository_dispatch")]
    RepositoryDispatch,
    #[serde(rename = "secret_scanning_alert")]
    SecretScanningAlert,
    #[serde(rename = "star")]
    Star,
    #[serde(rename = "status")]
    Status,
    #[serde(rename = "team")]
    Team,
    #[serde(rename = "team_add")]
    TeamAdd,
    #[serde(rename = "watch")]
    Watch,
    #[serde(rename = "workflow_dispatch")]
    WorkflowDispatch,
    #[serde(rename = "workflow_run")]
    WorkflowRun,
}
impl ToString for AppEventsItem {
    fn to_string(&self) -> String {
        match self {
            AppEventsItem::CheckRun => "check_run".to_string(),
            AppEventsItem::CheckSuite => "check_suite".to_string(),
            AppEventsItem::CodeScanningAlert => "code_scanning_alert".to_string(),
            AppEventsItem::CommitComment => "commit_comment".to_string(),
            AppEventsItem::ContentReference => "content_reference".to_string(),
            AppEventsItem::Create => "create".to_string(),
            AppEventsItem::Delete => "delete".to_string(),
            AppEventsItem::Deployment => "deployment".to_string(),
            AppEventsItem::DeploymentReview => "deployment_review".to_string(),
            AppEventsItem::DeploymentStatus => "deployment_status".to_string(),
            AppEventsItem::DeployKey => "deploy_key".to_string(),
            AppEventsItem::Discussion => "discussion".to_string(),
            AppEventsItem::DiscussionComment => "discussion_comment".to_string(),
            AppEventsItem::Fork => "fork".to_string(),
            AppEventsItem::Gollum => "gollum".to_string(),
            AppEventsItem::Issues => "issues".to_string(),
            AppEventsItem::IssueComment => "issue_comment".to_string(),
            AppEventsItem::Label => "label".to_string(),
            AppEventsItem::Member => "member".to_string(),
            AppEventsItem::Membership => "membership".to_string(),
            AppEventsItem::Milestone => "milestone".to_string(),
            AppEventsItem::Organization => "organization".to_string(),
            AppEventsItem::OrgBlock => "org_block".to_string(),
            AppEventsItem::PageBuild => "page_build".to_string(),
            AppEventsItem::Project => "project".to_string(),
            AppEventsItem::ProjectCard => "project_card".to_string(),
            AppEventsItem::ProjectColumn => "project_column".to_string(),
            AppEventsItem::Public => "public".to_string(),
            AppEventsItem::PullRequest => "pull_request".to_string(),
            AppEventsItem::PullRequestReview => "pull_request_review".to_string(),
            AppEventsItem::PullRequestReviewComment => "pull_request_review_comment".to_string(),
            AppEventsItem::Push => "push".to_string(),
            AppEventsItem::RegistryPackage => "registry_package".to_string(),
            AppEventsItem::Release => "release".to_string(),
            AppEventsItem::Repository => "repository".to_string(),
            AppEventsItem::RepositoryDispatch => "repository_dispatch".to_string(),
            AppEventsItem::SecretScanningAlert => "secret_scanning_alert".to_string(),
            AppEventsItem::Star => "star".to_string(),
            AppEventsItem::Status => "status".to_string(),
            AppEventsItem::Team => "team".to_string(),
            AppEventsItem::TeamAdd => "team_add".to_string(),
            AppEventsItem::Watch => "watch".to_string(),
            AppEventsItem::WorkflowDispatch => "workflow_dispatch".to_string(),
            AppEventsItem::WorkflowRun => "workflow_run".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsActions {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsActions {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsActions::Read => "read".to_string(),
            AppPermissionsActions::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsAdministration {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsAdministration {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsAdministration::Read => "read".to_string(),
            AppPermissionsAdministration::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsChecks {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsChecks {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsChecks::Read => "read".to_string(),
            AppPermissionsChecks::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsContentReferences {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsContentReferences {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsContentReferences::Read => "read".to_string(),
            AppPermissionsContentReferences::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsContents {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsContents {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsContents::Read => "read".to_string(),
            AppPermissionsContents::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsDeployments {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsDeployments {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsDeployments::Read => "read".to_string(),
            AppPermissionsDeployments::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsDiscussions {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsDiscussions {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsDiscussions::Read => "read".to_string(),
            AppPermissionsDiscussions::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsEmails {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsEmails {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsEmails::Read => "read".to_string(),
            AppPermissionsEmails::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsEnvironments {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsEnvironments {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsEnvironments::Read => "read".to_string(),
            AppPermissionsEnvironments::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsIssues {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsIssues {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsIssues::Read => "read".to_string(),
            AppPermissionsIssues::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsMembers {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsMembers {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsMembers::Read => "read".to_string(),
            AppPermissionsMembers::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsMetadata {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsMetadata {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsMetadata::Read => "read".to_string(),
            AppPermissionsMetadata::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsOrganizationAdministration {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsOrganizationAdministration {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsOrganizationAdministration::Read => "read".to_string(),
            AppPermissionsOrganizationAdministration::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsOrganizationHooks {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsOrganizationHooks {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsOrganizationHooks::Read => "read".to_string(),
            AppPermissionsOrganizationHooks::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsOrganizationPackages {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsOrganizationPackages {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsOrganizationPackages::Read => "read".to_string(),
            AppPermissionsOrganizationPackages::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsOrganizationPlan {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsOrganizationPlan {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsOrganizationPlan::Read => "read".to_string(),
            AppPermissionsOrganizationPlan::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsOrganizationProjects {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsOrganizationProjects {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsOrganizationProjects::Read => "read".to_string(),
            AppPermissionsOrganizationProjects::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsOrganizationSecrets {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsOrganizationSecrets {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsOrganizationSecrets::Read => "read".to_string(),
            AppPermissionsOrganizationSecrets::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsOrganizationSelfHostedRunners {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsOrganizationSelfHostedRunners {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsOrganizationSelfHostedRunners::Read => "read".to_string(),
            AppPermissionsOrganizationSelfHostedRunners::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsOrganizationUserBlocking {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsOrganizationUserBlocking {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsOrganizationUserBlocking::Read => "read".to_string(),
            AppPermissionsOrganizationUserBlocking::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsPackages {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsPackages {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsPackages::Read => "read".to_string(),
            AppPermissionsPackages::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsPages {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsPages {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsPages::Read => "read".to_string(),
            AppPermissionsPages::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsPullRequests {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsPullRequests {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsPullRequests::Read => "read".to_string(),
            AppPermissionsPullRequests::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsRepositoryHooks {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsRepositoryHooks {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsRepositoryHooks::Read => "read".to_string(),
            AppPermissionsRepositoryHooks::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsRepositoryProjects {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsRepositoryProjects {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsRepositoryProjects::Read => "read".to_string(),
            AppPermissionsRepositoryProjects::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsSecretScanningAlerts {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsSecretScanningAlerts {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsSecretScanningAlerts::Read => "read".to_string(),
            AppPermissionsSecretScanningAlerts::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsSecrets {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsSecrets {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsSecrets::Read => "read".to_string(),
            AppPermissionsSecrets::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsSecurityEvents {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsSecurityEvents {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsSecurityEvents::Read => "read".to_string(),
            AppPermissionsSecurityEvents::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsSecurityScanningAlert {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsSecurityScanningAlert {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsSecurityScanningAlert::Read => "read".to_string(),
            AppPermissionsSecurityScanningAlert::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsSingleFile {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsSingleFile {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsSingleFile::Read => "read".to_string(),
            AppPermissionsSingleFile::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsStatuses {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsStatuses {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsStatuses::Read => "read".to_string(),
            AppPermissionsStatuses::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsTeamDiscussions {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsTeamDiscussions {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsTeamDiscussions::Read => "read".to_string(),
            AppPermissionsTeamDiscussions::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsVulnerabilityAlerts {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsVulnerabilityAlerts {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsVulnerabilityAlerts::Read => "read".to_string(),
            AppPermissionsVulnerabilityAlerts::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum AppPermissionsWorkflows {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for AppPermissionsWorkflows {
    fn to_string(&self) -> String {
        match self {
            AppPermissionsWorkflows::Read => "read".to_string(),
            AppPermissionsWorkflows::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AppPermissions {
    pub actions: Option<AppPermissionsActions>,
    pub administration: Option<AppPermissionsAdministration>,
    pub checks: Option<AppPermissionsChecks>,
    pub content_references: Option<AppPermissionsContentReferences>,
    pub contents: Option<AppPermissionsContents>,
    pub deployments: Option<AppPermissionsDeployments>,
    pub discussions: Option<AppPermissionsDiscussions>,
    pub emails: Option<AppPermissionsEmails>,
    pub environments: Option<AppPermissionsEnvironments>,
    pub issues: Option<AppPermissionsIssues>,
    pub members: Option<AppPermissionsMembers>,
    pub metadata: Option<AppPermissionsMetadata>,
    pub organization_administration: Option<AppPermissionsOrganizationAdministration>,
    pub organization_hooks: Option<AppPermissionsOrganizationHooks>,
    pub organization_packages: Option<AppPermissionsOrganizationPackages>,
    pub organization_plan: Option<AppPermissionsOrganizationPlan>,
    pub organization_projects: Option<AppPermissionsOrganizationProjects>,
    pub organization_secrets: Option<AppPermissionsOrganizationSecrets>,
    pub organization_self_hosted_runners: Option<AppPermissionsOrganizationSelfHostedRunners>,
    pub organization_user_blocking: Option<AppPermissionsOrganizationUserBlocking>,
    pub packages: Option<AppPermissionsPackages>,
    pub pages: Option<AppPermissionsPages>,
    pub pull_requests: Option<AppPermissionsPullRequests>,
    pub repository_hooks: Option<AppPermissionsRepositoryHooks>,
    pub repository_projects: Option<AppPermissionsRepositoryProjects>,
    pub secret_scanning_alerts: Option<AppPermissionsSecretScanningAlerts>,
    pub secrets: Option<AppPermissionsSecrets>,
    pub security_events: Option<AppPermissionsSecurityEvents>,
    pub security_scanning_alert: Option<AppPermissionsSecurityScanningAlert>,
    pub single_file: Option<AppPermissionsSingleFile>,
    pub statuses: Option<AppPermissionsStatuses>,
    pub team_discussions: Option<AppPermissionsTeamDiscussions>,
    pub vulnerability_alerts: Option<AppPermissionsVulnerabilityAlerts>,
    pub workflows: Option<AppPermissionsWorkflows>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleAllowDeletionsEnforcementLevel {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "everyone")]
    Everyone,
}
impl ToString for BranchProtectionRuleAllowDeletionsEnforcementLevel {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleAllowDeletionsEnforcementLevel::Off => "off".to_string(),
            BranchProtectionRuleAllowDeletionsEnforcementLevel::NonAdmins => {
                "non_admins".to_string()
            }
            BranchProtectionRuleAllowDeletionsEnforcementLevel::Everyone => "everyone".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleAllowForcePushesEnforcementLevel {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "everyone")]
    Everyone,
}
impl ToString for BranchProtectionRuleAllowForcePushesEnforcementLevel {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleAllowForcePushesEnforcementLevel::Off => "off".to_string(),
            BranchProtectionRuleAllowForcePushesEnforcementLevel::NonAdmins => {
                "non_admins".to_string()
            }
            BranchProtectionRuleAllowForcePushesEnforcementLevel::Everyone => {
                "everyone".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleLinearHistoryRequirementEnforcementLevel {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "everyone")]
    Everyone,
}
impl ToString for BranchProtectionRuleLinearHistoryRequirementEnforcementLevel {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleLinearHistoryRequirementEnforcementLevel::Off => "off".to_string(),
            BranchProtectionRuleLinearHistoryRequirementEnforcementLevel::NonAdmins => {
                "non_admins".to_string()
            }
            BranchProtectionRuleLinearHistoryRequirementEnforcementLevel::Everyone => {
                "everyone".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleMergeQueueEnforcementLevel {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "everyone")]
    Everyone,
}
impl ToString for BranchProtectionRuleMergeQueueEnforcementLevel {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleMergeQueueEnforcementLevel::Off => "off".to_string(),
            BranchProtectionRuleMergeQueueEnforcementLevel::NonAdmins => "non_admins".to_string(),
            BranchProtectionRuleMergeQueueEnforcementLevel::Everyone => "everyone".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRulePullRequestReviewsEnforcementLevel {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "everyone")]
    Everyone,
}
impl ToString for BranchProtectionRulePullRequestReviewsEnforcementLevel {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRulePullRequestReviewsEnforcementLevel::Off => "off".to_string(),
            BranchProtectionRulePullRequestReviewsEnforcementLevel::NonAdmins => {
                "non_admins".to_string()
            }
            BranchProtectionRulePullRequestReviewsEnforcementLevel::Everyone => {
                "everyone".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleRequiredConversationResolutionLevel {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "everyone")]
    Everyone,
}
impl ToString for BranchProtectionRuleRequiredConversationResolutionLevel {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleRequiredConversationResolutionLevel::Off => "off".to_string(),
            BranchProtectionRuleRequiredConversationResolutionLevel::NonAdmins => {
                "non_admins".to_string()
            }
            BranchProtectionRuleRequiredConversationResolutionLevel::Everyone => {
                "everyone".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleRequiredDeploymentsEnforcementLevel {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "everyone")]
    Everyone,
}
impl ToString for BranchProtectionRuleRequiredDeploymentsEnforcementLevel {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleRequiredDeploymentsEnforcementLevel::Off => "off".to_string(),
            BranchProtectionRuleRequiredDeploymentsEnforcementLevel::NonAdmins => {
                "non_admins".to_string()
            }
            BranchProtectionRuleRequiredDeploymentsEnforcementLevel::Everyone => {
                "everyone".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleRequiredStatusChecksEnforcementLevel {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "everyone")]
    Everyone,
}
impl ToString for BranchProtectionRuleRequiredStatusChecksEnforcementLevel {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleRequiredStatusChecksEnforcementLevel::Off => "off".to_string(),
            BranchProtectionRuleRequiredStatusChecksEnforcementLevel::NonAdmins => {
                "non_admins".to_string()
            }
            BranchProtectionRuleRequiredStatusChecksEnforcementLevel::Everyone => {
                "everyone".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleSignatureRequirementEnforcementLevel {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "everyone")]
    Everyone,
}
impl ToString for BranchProtectionRuleSignatureRequirementEnforcementLevel {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleSignatureRequirementEnforcementLevel::Off => "off".to_string(),
            BranchProtectionRuleSignatureRequirementEnforcementLevel::NonAdmins => {
                "non_admins".to_string()
            }
            BranchProtectionRuleSignatureRequirementEnforcementLevel::Everyone => {
                "everyone".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for BranchProtectionRuleCreatedAction {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for BranchProtectionRuleDeletedAction {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum BranchProtectionRuleEditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for BranchProtectionRuleEditedAction {
    fn to_string(&self) -> String {
        match self {
            BranchProtectionRuleEditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BranchProtectionRuleEditedChangesAuthorizedActorNames {
    pub from: Vec<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BranchProtectionRuleEditedChangesAuthorizedActorsOnly {
    pub from: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BranchProtectionRuleEditedChanges {
    pub authorized_actor_names: Option<BranchProtectionRuleEditedChangesAuthorizedActorNames>,
    pub authorized_actors_only: Option<BranchProtectionRuleEditedChangesAuthorizedActorsOnly>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunPullRequestBase {
    pub repo: RepoRef,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunPullRequestHead {
    pub repo: RepoRef,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunCompletedAction {
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for CheckRunCompletedAction {
    fn to_string(&self) -> String {
        match self {
            CheckRunCompletedAction::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunCompletedCheckRunCheckSuiteConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
}
impl ToString for CheckRunCompletedCheckRunCheckSuiteConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckRunCompletedCheckRunCheckSuiteConclusion::Success => "success".to_string(),
            CheckRunCompletedCheckRunCheckSuiteConclusion::Failure => "failure".to_string(),
            CheckRunCompletedCheckRunCheckSuiteConclusion::Neutral => "neutral".to_string(),
            CheckRunCompletedCheckRunCheckSuiteConclusion::Cancelled => "cancelled".to_string(),
            CheckRunCompletedCheckRunCheckSuiteConclusion::TimedOut => "timed_out".to_string(),
            CheckRunCompletedCheckRunCheckSuiteConclusion::ActionRequired => {
                "action_required".to_string()
            }
            CheckRunCompletedCheckRunCheckSuiteConclusion::Stale => "stale".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunCompletedCheckRunCheckSuiteStatus {
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "queued")]
    Queued,
}
impl ToString for CheckRunCompletedCheckRunCheckSuiteStatus {
    fn to_string(&self) -> String {
        match self {
            CheckRunCompletedCheckRunCheckSuiteStatus::InProgress => "in_progress".to_string(),
            CheckRunCompletedCheckRunCheckSuiteStatus::Completed => "completed".to_string(),
            CheckRunCompletedCheckRunCheckSuiteStatus::Queued => "queued".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunCompletedCheckRunCheckSuite {
    pub after: Option<String>,
    pub app: App,
    pub before: Option<String>,
    pub conclusion: Option<CheckRunCompletedCheckRunCheckSuiteConclusion>,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub deployment: Option<CheckRunDeployment>,
    pub head_branch: Option<String>,
    #[doc = "The SHA of the head commit that is being checked."]
    pub head_sha: String,
    #[doc = "The id of the check suite that this check run is part of."]
    pub id: u64,
    pub node_id: Option<String>,
    #[doc = "An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty."]
    pub pull_requests: Vec<CheckRunPullRequest>,
    pub status: CheckRunCompletedCheckRunCheckSuiteStatus,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunCompletedCheckRunConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
    #[serde(rename = "skipped")]
    Skipped,
}
impl ToString for CheckRunCompletedCheckRunConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckRunCompletedCheckRunConclusion::Success => "success".to_string(),
            CheckRunCompletedCheckRunConclusion::Failure => "failure".to_string(),
            CheckRunCompletedCheckRunConclusion::Neutral => "neutral".to_string(),
            CheckRunCompletedCheckRunConclusion::Cancelled => "cancelled".to_string(),
            CheckRunCompletedCheckRunConclusion::TimedOut => "timed_out".to_string(),
            CheckRunCompletedCheckRunConclusion::ActionRequired => "action_required".to_string(),
            CheckRunCompletedCheckRunConclusion::Stale => "stale".to_string(),
            CheckRunCompletedCheckRunConclusion::Skipped => "skipped".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunCompletedCheckRunOutput {
    pub annotations_count: u64,
    pub annotations_url: String,
    pub summary: Option<String>,
    pub text: Option<String>,
    pub title: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunCompletedCheckRunStatus {
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for CheckRunCompletedCheckRunStatus {
    fn to_string(&self) -> String {
        match self {
            CheckRunCompletedCheckRunStatus::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunCompletedCheckRun {
    pub app: App,
    pub check_suite: CheckRunCompletedCheckRunCheckSuite,
    #[doc = "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub completed_at: String,
    #[doc = "The result of the completed check run. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed."]
    pub conclusion: Option<CheckRunCompletedCheckRunConclusion>,
    pub details_url: Option<String>,
    pub external_id: String,
    #[doc = "The SHA of the commit that is being checked."]
    pub head_sha: String,
    pub html_url: String,
    #[doc = "The id of the check."]
    pub id: u64,
    #[doc = "The name of the check run."]
    pub name: String,
    pub node_id: Option<String>,
    pub output: CheckRunCompletedCheckRunOutput,
    pub pull_requests: Vec<CheckRunPullRequest>,
    #[doc = "The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub started_at: String,
    #[doc = "The current status of the check run. Can be `queued`, `in_progress`, or `completed`."]
    pub status: CheckRunCompletedCheckRunStatus,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunCompletedRequestedAction {
    #[doc = "The integrator reference of the action requested by the user."]
    pub identifier: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for CheckRunCreatedAction {
    fn to_string(&self) -> String {
        match self {
            CheckRunCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunCreatedCheckRunCheckSuiteConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
}
impl ToString for CheckRunCreatedCheckRunCheckSuiteConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckRunCreatedCheckRunCheckSuiteConclusion::Success => "success".to_string(),
            CheckRunCreatedCheckRunCheckSuiteConclusion::Failure => "failure".to_string(),
            CheckRunCreatedCheckRunCheckSuiteConclusion::Neutral => "neutral".to_string(),
            CheckRunCreatedCheckRunCheckSuiteConclusion::Cancelled => "cancelled".to_string(),
            CheckRunCreatedCheckRunCheckSuiteConclusion::TimedOut => "timed_out".to_string(),
            CheckRunCreatedCheckRunCheckSuiteConclusion::ActionRequired => {
                "action_required".to_string()
            }
            CheckRunCreatedCheckRunCheckSuiteConclusion::Stale => "stale".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunCreatedCheckRunCheckSuiteStatus {
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for CheckRunCreatedCheckRunCheckSuiteStatus {
    fn to_string(&self) -> String {
        match self {
            CheckRunCreatedCheckRunCheckSuiteStatus::Queued => "queued".to_string(),
            CheckRunCreatedCheckRunCheckSuiteStatus::InProgress => "in_progress".to_string(),
            CheckRunCreatedCheckRunCheckSuiteStatus::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunCreatedCheckRunCheckSuite {
    pub after: Option<String>,
    pub app: App,
    pub before: Option<String>,
    pub conclusion: Option<CheckRunCreatedCheckRunCheckSuiteConclusion>,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub deployment: Option<CheckRunDeployment>,
    pub head_branch: Option<String>,
    #[doc = "The SHA of the head commit that is being checked."]
    pub head_sha: String,
    #[doc = "The id of the check suite that this check run is part of."]
    pub id: u64,
    pub node_id: Option<String>,
    #[doc = "An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty."]
    pub pull_requests: Vec<CheckRunPullRequest>,
    pub status: CheckRunCreatedCheckRunCheckSuiteStatus,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunCreatedCheckRunConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
    #[serde(rename = "skipped")]
    Skipped,
}
impl ToString for CheckRunCreatedCheckRunConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckRunCreatedCheckRunConclusion::Success => "success".to_string(),
            CheckRunCreatedCheckRunConclusion::Failure => "failure".to_string(),
            CheckRunCreatedCheckRunConclusion::Neutral => "neutral".to_string(),
            CheckRunCreatedCheckRunConclusion::Cancelled => "cancelled".to_string(),
            CheckRunCreatedCheckRunConclusion::TimedOut => "timed_out".to_string(),
            CheckRunCreatedCheckRunConclusion::ActionRequired => "action_required".to_string(),
            CheckRunCreatedCheckRunConclusion::Stale => "stale".to_string(),
            CheckRunCreatedCheckRunConclusion::Skipped => "skipped".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunCreatedCheckRunOutput {
    pub annotations_count: u64,
    pub annotations_url: String,
    pub summary: Option<String>,
    pub text: Option<String>,
    pub title: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunCreatedCheckRunStatus {
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for CheckRunCreatedCheckRunStatus {
    fn to_string(&self) -> String {
        match self {
            CheckRunCreatedCheckRunStatus::Queued => "queued".to_string(),
            CheckRunCreatedCheckRunStatus::InProgress => "in_progress".to_string(),
            CheckRunCreatedCheckRunStatus::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunCreatedCheckRun {
    pub app: App,
    pub check_suite: CheckRunCreatedCheckRunCheckSuite,
    #[doc = "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub completed_at: Option<String>,
    #[doc = "The result of the completed check run. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed."]
    pub conclusion: Option<CheckRunCreatedCheckRunConclusion>,
    pub details_url: Option<String>,
    pub external_id: String,
    #[doc = "The SHA of the commit that is being checked."]
    pub head_sha: String,
    pub html_url: String,
    #[doc = "The id of the check."]
    pub id: u64,
    #[doc = "The name of the check run."]
    pub name: String,
    pub node_id: Option<String>,
    pub output: CheckRunCreatedCheckRunOutput,
    pub pull_requests: Vec<CheckRunPullRequest>,
    #[doc = "The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub started_at: String,
    #[doc = "The current status of the check run. Can be `queued`, `in_progress`, or `completed`."]
    pub status: CheckRunCreatedCheckRunStatus,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunCreatedRequestedAction {
    #[doc = "The integrator reference of the action requested by the user."]
    pub identifier: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunRequestedActionAction {
    #[serde(rename = "requested_action")]
    RequestedAction,
}
impl ToString for CheckRunRequestedActionAction {
    fn to_string(&self) -> String {
        match self {
            CheckRunRequestedActionAction::RequestedAction => "requested_action".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunRequestedActionCheckRunCheckSuiteConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
}
impl ToString for CheckRunRequestedActionCheckRunCheckSuiteConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckRunRequestedActionCheckRunCheckSuiteConclusion::Success => "success".to_string(),
            CheckRunRequestedActionCheckRunCheckSuiteConclusion::Failure => "failure".to_string(),
            CheckRunRequestedActionCheckRunCheckSuiteConclusion::Neutral => "neutral".to_string(),
            CheckRunRequestedActionCheckRunCheckSuiteConclusion::Cancelled => {
                "cancelled".to_string()
            }
            CheckRunRequestedActionCheckRunCheckSuiteConclusion::TimedOut => {
                "timed_out".to_string()
            }
            CheckRunRequestedActionCheckRunCheckSuiteConclusion::ActionRequired => {
                "action_required".to_string()
            }
            CheckRunRequestedActionCheckRunCheckSuiteConclusion::Stale => "stale".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunRequestedActionCheckRunCheckSuiteStatus {
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for CheckRunRequestedActionCheckRunCheckSuiteStatus {
    fn to_string(&self) -> String {
        match self {
            CheckRunRequestedActionCheckRunCheckSuiteStatus::Queued => "queued".to_string(),
            CheckRunRequestedActionCheckRunCheckSuiteStatus::InProgress => {
                "in_progress".to_string()
            }
            CheckRunRequestedActionCheckRunCheckSuiteStatus::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunRequestedActionCheckRunCheckSuite {
    pub after: Option<String>,
    pub app: App,
    pub before: Option<String>,
    pub conclusion: Option<CheckRunRequestedActionCheckRunCheckSuiteConclusion>,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub deployment: Option<CheckRunDeployment>,
    pub head_branch: Option<String>,
    #[doc = "The SHA of the head commit that is being checked."]
    pub head_sha: String,
    #[doc = "The id of the check suite that this check run is part of."]
    pub id: u64,
    pub node_id: Option<String>,
    #[doc = "An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty."]
    pub pull_requests: Vec<CheckRunPullRequest>,
    pub status: CheckRunRequestedActionCheckRunCheckSuiteStatus,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunRequestedActionCheckRunConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
    #[serde(rename = "skipped")]
    Skipped,
}
impl ToString for CheckRunRequestedActionCheckRunConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckRunRequestedActionCheckRunConclusion::Success => "success".to_string(),
            CheckRunRequestedActionCheckRunConclusion::Failure => "failure".to_string(),
            CheckRunRequestedActionCheckRunConclusion::Neutral => "neutral".to_string(),
            CheckRunRequestedActionCheckRunConclusion::Cancelled => "cancelled".to_string(),
            CheckRunRequestedActionCheckRunConclusion::TimedOut => "timed_out".to_string(),
            CheckRunRequestedActionCheckRunConclusion::ActionRequired => {
                "action_required".to_string()
            }
            CheckRunRequestedActionCheckRunConclusion::Stale => "stale".to_string(),
            CheckRunRequestedActionCheckRunConclusion::Skipped => "skipped".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunRequestedActionCheckRunOutput {
    pub annotations_count: u64,
    pub annotations_url: String,
    pub summary: Option<String>,
    pub text: Option<String>,
    pub title: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunRequestedActionCheckRunStatus {
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for CheckRunRequestedActionCheckRunStatus {
    fn to_string(&self) -> String {
        match self {
            CheckRunRequestedActionCheckRunStatus::Queued => "queued".to_string(),
            CheckRunRequestedActionCheckRunStatus::InProgress => "in_progress".to_string(),
            CheckRunRequestedActionCheckRunStatus::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunRequestedActionCheckRun {
    pub app: App,
    pub check_suite: CheckRunRequestedActionCheckRunCheckSuite,
    #[doc = "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub completed_at: Option<String>,
    #[doc = "The result of the completed check run. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed."]
    pub conclusion: Option<CheckRunRequestedActionCheckRunConclusion>,
    pub details_url: Option<String>,
    pub external_id: String,
    #[doc = "The SHA of the commit that is being checked."]
    pub head_sha: String,
    pub html_url: String,
    #[doc = "The id of the check."]
    pub id: u64,
    #[doc = "The name of the check run."]
    pub name: String,
    pub node_id: Option<String>,
    pub output: CheckRunRequestedActionCheckRunOutput,
    pub pull_requests: Vec<CheckRunPullRequest>,
    #[doc = "The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub started_at: String,
    #[doc = "The current status of the check run. Can be `queued`, `in_progress`, or `completed`."]
    pub status: CheckRunRequestedActionCheckRunStatus,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunRequestedActionRequestedAction {
    #[doc = "The integrator reference of the action requested by the user."]
    pub identifier: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunRerequestedAction {
    #[serde(rename = "rerequested")]
    Rerequested,
}
impl ToString for CheckRunRerequestedAction {
    fn to_string(&self) -> String {
        match self {
            CheckRunRerequestedAction::Rerequested => "rerequested".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunRerequestedCheckRunCheckSuiteConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
}
impl ToString for CheckRunRerequestedCheckRunCheckSuiteConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckRunRerequestedCheckRunCheckSuiteConclusion::Success => "success".to_string(),
            CheckRunRerequestedCheckRunCheckSuiteConclusion::Failure => "failure".to_string(),
            CheckRunRerequestedCheckRunCheckSuiteConclusion::Neutral => "neutral".to_string(),
            CheckRunRerequestedCheckRunCheckSuiteConclusion::Cancelled => "cancelled".to_string(),
            CheckRunRerequestedCheckRunCheckSuiteConclusion::TimedOut => "timed_out".to_string(),
            CheckRunRerequestedCheckRunCheckSuiteConclusion::ActionRequired => {
                "action_required".to_string()
            }
            CheckRunRerequestedCheckRunCheckSuiteConclusion::Stale => "stale".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunRerequestedCheckRunCheckSuiteStatus {
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for CheckRunRerequestedCheckRunCheckSuiteStatus {
    fn to_string(&self) -> String {
        match self {
            CheckRunRerequestedCheckRunCheckSuiteStatus::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunRerequestedCheckRunCheckSuite {
    pub after: Option<String>,
    pub app: App,
    pub before: Option<String>,
    pub conclusion: CheckRunRerequestedCheckRunCheckSuiteConclusion,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub deployment: Option<CheckRunDeployment>,
    pub head_branch: Option<String>,
    #[doc = "The SHA of the head commit that is being checked."]
    pub head_sha: String,
    #[doc = "The id of the check suite that this check run is part of."]
    pub id: u64,
    pub node_id: Option<String>,
    #[doc = "An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty."]
    pub pull_requests: Vec<CheckRunPullRequest>,
    pub status: CheckRunRerequestedCheckRunCheckSuiteStatus,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunRerequestedCheckRunConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
    #[serde(rename = "skipped")]
    Skipped,
}
impl ToString for CheckRunRerequestedCheckRunConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckRunRerequestedCheckRunConclusion::Success => "success".to_string(),
            CheckRunRerequestedCheckRunConclusion::Failure => "failure".to_string(),
            CheckRunRerequestedCheckRunConclusion::Neutral => "neutral".to_string(),
            CheckRunRerequestedCheckRunConclusion::Cancelled => "cancelled".to_string(),
            CheckRunRerequestedCheckRunConclusion::TimedOut => "timed_out".to_string(),
            CheckRunRerequestedCheckRunConclusion::ActionRequired => "action_required".to_string(),
            CheckRunRerequestedCheckRunConclusion::Stale => "stale".to_string(),
            CheckRunRerequestedCheckRunConclusion::Skipped => "skipped".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunRerequestedCheckRunOutput {
    pub annotations_count: u64,
    pub annotations_url: String,
    pub summary: Option<String>,
    pub text: Option<String>,
    pub title: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckRunRerequestedCheckRunStatus {
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for CheckRunRerequestedCheckRunStatus {
    fn to_string(&self) -> String {
        match self {
            CheckRunRerequestedCheckRunStatus::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunRerequestedCheckRun {
    pub app: App,
    pub check_suite: CheckRunRerequestedCheckRunCheckSuite,
    #[doc = "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub completed_at: String,
    #[doc = "The result of the completed check run. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has `completed`."]
    pub conclusion: Option<CheckRunRerequestedCheckRunConclusion>,
    pub details_url: Option<String>,
    pub external_id: String,
    #[doc = "The SHA of the commit that is being checked."]
    pub head_sha: String,
    pub html_url: String,
    #[doc = "The id of the check."]
    pub id: u64,
    #[doc = "The name of the check."]
    pub name: String,
    pub node_id: Option<String>,
    pub output: CheckRunRerequestedCheckRunOutput,
    pub pull_requests: Vec<CheckRunPullRequest>,
    #[doc = "The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub started_at: String,
    #[doc = "The phase of the lifecycle that the check is currently in."]
    pub status: CheckRunRerequestedCheckRunStatus,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckRunRerequestedRequestedAction {
    #[doc = "The integrator reference of the action requested by the user."]
    pub identifier: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckSuiteCompletedAction {
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for CheckSuiteCompletedAction {
    fn to_string(&self) -> String {
        match self {
            CheckSuiteCompletedAction::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckSuiteCompletedCheckSuiteConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
}
impl ToString for CheckSuiteCompletedCheckSuiteConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckSuiteCompletedCheckSuiteConclusion::Success => "success".to_string(),
            CheckSuiteCompletedCheckSuiteConclusion::Failure => "failure".to_string(),
            CheckSuiteCompletedCheckSuiteConclusion::Neutral => "neutral".to_string(),
            CheckSuiteCompletedCheckSuiteConclusion::Cancelled => "cancelled".to_string(),
            CheckSuiteCompletedCheckSuiteConclusion::TimedOut => "timed_out".to_string(),
            CheckSuiteCompletedCheckSuiteConclusion::ActionRequired => {
                "action_required".to_string()
            }
            CheckSuiteCompletedCheckSuiteConclusion::Stale => "stale".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckSuiteCompletedCheckSuiteStatus {
    #[serde(rename = "requested")]
    Requested,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "queued")]
    Queued,
}
impl ToString for CheckSuiteCompletedCheckSuiteStatus {
    fn to_string(&self) -> String {
        match self {
            CheckSuiteCompletedCheckSuiteStatus::Requested => "requested".to_string(),
            CheckSuiteCompletedCheckSuiteStatus::InProgress => "in_progress".to_string(),
            CheckSuiteCompletedCheckSuiteStatus::Completed => "completed".to_string(),
            CheckSuiteCompletedCheckSuiteStatus::Queued => "queued".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckSuiteCompletedCheckSuite {
    pub after: String,
    pub app: App,
    pub before: Option<String>,
    pub check_runs_url: String,
    #[doc = "The summary conclusion for all check runs that are part of the check suite. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has `completed`."]
    pub conclusion: Option<CheckSuiteCompletedCheckSuiteConclusion>,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The head branch name the changes are on."]
    pub head_branch: Option<String>,
    pub head_commit: CommitSimple,
    #[doc = "The SHA of the head commit that is being checked."]
    pub head_sha: String,
    pub id: u64,
    pub latest_check_runs_count: u64,
    pub node_id: String,
    #[doc = "An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty."]
    pub pull_requests: Vec<CheckRunPullRequest>,
    #[doc = "The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`."]
    pub status: Option<CheckSuiteCompletedCheckSuiteStatus>,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "URL that points to the check suite API resource."]
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckSuiteRequestedAction {
    #[serde(rename = "requested")]
    Requested,
}
impl ToString for CheckSuiteRequestedAction {
    fn to_string(&self) -> String {
        match self {
            CheckSuiteRequestedAction::Requested => "requested".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckSuiteRequestedCheckSuiteConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
}
impl ToString for CheckSuiteRequestedCheckSuiteConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckSuiteRequestedCheckSuiteConclusion::Success => "success".to_string(),
            CheckSuiteRequestedCheckSuiteConclusion::Failure => "failure".to_string(),
            CheckSuiteRequestedCheckSuiteConclusion::Neutral => "neutral".to_string(),
            CheckSuiteRequestedCheckSuiteConclusion::Cancelled => "cancelled".to_string(),
            CheckSuiteRequestedCheckSuiteConclusion::TimedOut => "timed_out".to_string(),
            CheckSuiteRequestedCheckSuiteConclusion::ActionRequired => {
                "action_required".to_string()
            }
            CheckSuiteRequestedCheckSuiteConclusion::Stale => "stale".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckSuiteRequestedCheckSuiteStatus {
    #[serde(rename = "requested")]
    Requested,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "queued")]
    Queued,
}
impl ToString for CheckSuiteRequestedCheckSuiteStatus {
    fn to_string(&self) -> String {
        match self {
            CheckSuiteRequestedCheckSuiteStatus::Requested => "requested".to_string(),
            CheckSuiteRequestedCheckSuiteStatus::InProgress => "in_progress".to_string(),
            CheckSuiteRequestedCheckSuiteStatus::Completed => "completed".to_string(),
            CheckSuiteRequestedCheckSuiteStatus::Queued => "queued".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckSuiteRequestedCheckSuite {
    pub after: String,
    pub app: App,
    pub before: Option<String>,
    pub check_runs_url: String,
    #[doc = "The summary conclusion for all check runs that are part of the check suite. Can be one of `success`, `failure`,` neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed."]
    pub conclusion: Option<CheckSuiteRequestedCheckSuiteConclusion>,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The head branch name the changes are on."]
    pub head_branch: Option<String>,
    pub head_commit: CommitSimple,
    #[doc = "The SHA of the head commit that is being checked."]
    pub head_sha: String,
    pub id: u64,
    pub latest_check_runs_count: u64,
    pub node_id: String,
    #[doc = "An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty."]
    pub pull_requests: Vec<CheckRunPullRequest>,
    #[doc = "The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`."]
    pub status: Option<CheckSuiteRequestedCheckSuiteStatus>,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "URL that points to the check suite API resource."]
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckSuiteRerequestedAction {
    #[serde(rename = "rerequested")]
    Rerequested,
}
impl ToString for CheckSuiteRerequestedAction {
    fn to_string(&self) -> String {
        match self {
            CheckSuiteRerequestedAction::Rerequested => "rerequested".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckSuiteRerequestedCheckSuiteConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
}
impl ToString for CheckSuiteRerequestedCheckSuiteConclusion {
    fn to_string(&self) -> String {
        match self {
            CheckSuiteRerequestedCheckSuiteConclusion::Success => "success".to_string(),
            CheckSuiteRerequestedCheckSuiteConclusion::Failure => "failure".to_string(),
            CheckSuiteRerequestedCheckSuiteConclusion::Neutral => "neutral".to_string(),
            CheckSuiteRerequestedCheckSuiteConclusion::Cancelled => "cancelled".to_string(),
            CheckSuiteRerequestedCheckSuiteConclusion::TimedOut => "timed_out".to_string(),
            CheckSuiteRerequestedCheckSuiteConclusion::ActionRequired => {
                "action_required".to_string()
            }
            CheckSuiteRerequestedCheckSuiteConclusion::Stale => "stale".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CheckSuiteRerequestedCheckSuiteStatus {
    #[serde(rename = "requested")]
    Requested,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "queued")]
    Queued,
}
impl ToString for CheckSuiteRerequestedCheckSuiteStatus {
    fn to_string(&self) -> String {
        match self {
            CheckSuiteRerequestedCheckSuiteStatus::Requested => "requested".to_string(),
            CheckSuiteRerequestedCheckSuiteStatus::InProgress => "in_progress".to_string(),
            CheckSuiteRerequestedCheckSuiteStatus::Completed => "completed".to_string(),
            CheckSuiteRerequestedCheckSuiteStatus::Queued => "queued".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CheckSuiteRerequestedCheckSuite {
    pub after: String,
    pub app: App,
    pub before: Option<String>,
    pub check_runs_url: String,
    #[doc = "The summary conclusion for all check runs that are part of the check suite. Can be one of `success`, `failure`,` neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed."]
    pub conclusion: Option<CheckSuiteRerequestedCheckSuiteConclusion>,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The head branch name the changes are on."]
    pub head_branch: Option<String>,
    pub head_commit: CommitSimple,
    #[doc = "The SHA of the head commit that is being checked."]
    pub head_sha: String,
    pub id: u64,
    pub latest_check_runs_count: u64,
    pub node_id: String,
    #[doc = "An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty."]
    pub pull_requests: Vec<CheckRunPullRequest>,
    #[doc = "The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`."]
    pub status: Option<CheckSuiteRerequestedCheckSuiteStatus>,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "URL that points to the check suite API resource."]
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertAppearedInBranchAction {
    #[serde(rename = "appeared_in_branch")]
    AppearedInBranch,
}
impl ToString for CodeScanningAlertAppearedInBranchAction {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertAppearedInBranchAction::AppearedInBranch => {
                "appeared_in_branch".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertAppearedInBranchAlertDismissedReason {
    #[serde(rename = "false positive")]
    FalsePositive,
    #[serde(rename = "won't fix")]
    WontFix,
    #[serde(rename = "used in tests")]
    UsedInTests,
}
impl ToString for CodeScanningAlertAppearedInBranchAlertDismissedReason {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertAppearedInBranchAlertDismissedReason::FalsePositive => {
                "false positive".to_string()
            }
            CodeScanningAlertAppearedInBranchAlertDismissedReason::WontFix => {
                "won't fix".to_string()
            }
            CodeScanningAlertAppearedInBranchAlertDismissedReason::UsedInTests => {
                "used in tests".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertAppearedInBranchAlertRuleSeverity {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "note")]
    Note,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
}
impl ToString for CodeScanningAlertAppearedInBranchAlertRuleSeverity {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertAppearedInBranchAlertRuleSeverity::None => "none".to_string(),
            CodeScanningAlertAppearedInBranchAlertRuleSeverity::Note => "note".to_string(),
            CodeScanningAlertAppearedInBranchAlertRuleSeverity::Warning => "warning".to_string(),
            CodeScanningAlertAppearedInBranchAlertRuleSeverity::Error => "error".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertAppearedInBranchAlertRule {
    #[doc = "A short description of the rule used to detect the alert."]
    pub description: String,
    #[doc = "A unique identifier for the rule used to detect the alert."]
    pub id: String,
    #[doc = "The severity of the alert."]
    pub severity: Option<CodeScanningAlertAppearedInBranchAlertRuleSeverity>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertAppearedInBranchAlertState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "dismissed")]
    Dismissed,
    #[serde(rename = "fixed")]
    Fixed,
}
impl ToString for CodeScanningAlertAppearedInBranchAlertState {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertAppearedInBranchAlertState::Open => "open".to_string(),
            CodeScanningAlertAppearedInBranchAlertState::Dismissed => "dismissed".to_string(),
            CodeScanningAlertAppearedInBranchAlertState::Fixed => "fixed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertAppearedInBranchAlertTool {
    #[doc = "The name of the tool used to generate the code scanning analysis alert."]
    pub name: String,
    #[doc = "The version of the tool used to detect the alert."]
    pub version: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertAppearedInBranchAlert {
    #[doc = "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`"]
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub dismissed_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    pub dismissed_by: Option<User>,
    #[doc = "The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`."]
    pub dismissed_reason: Option<CodeScanningAlertAppearedInBranchAlertDismissedReason>,
    #[doc = "The GitHub URL of the alert resource."]
    pub html_url: String,
    pub instances: Vec<AlertInstance>,
    pub most_recent_instance: Option<AlertInstance>,
    #[doc = "The code scanning alert number."]
    pub number: u64,
    pub rule: CodeScanningAlertAppearedInBranchAlertRule,
    #[doc = "State of a code scanning alert."]
    pub state: CodeScanningAlertAppearedInBranchAlertState,
    pub tool: CodeScanningAlertAppearedInBranchAlertTool,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertClosedByUserAction {
    #[serde(rename = "closed_by_user")]
    ClosedByUser,
}
impl ToString for CodeScanningAlertClosedByUserAction {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertClosedByUserAction::ClosedByUser => "closed_by_user".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertClosedByUserAlertDismissedReason {
    #[serde(rename = "false positive")]
    FalsePositive,
    #[serde(rename = "won't fix")]
    WontFix,
    #[serde(rename = "used in tests")]
    UsedInTests,
}
impl ToString for CodeScanningAlertClosedByUserAlertDismissedReason {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertClosedByUserAlertDismissedReason::FalsePositive => {
                "false positive".to_string()
            }
            CodeScanningAlertClosedByUserAlertDismissedReason::WontFix => "won't fix".to_string(),
            CodeScanningAlertClosedByUserAlertDismissedReason::UsedInTests => {
                "used in tests".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertClosedByUserAlertInstancesItemState {
    #[serde(rename = "dismissed")]
    Dismissed,
}
impl ToString for CodeScanningAlertClosedByUserAlertInstancesItemState {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertClosedByUserAlertInstancesItemState::Dismissed => {
                "dismissed".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertClosedByUserAlertInstancesItem {
    #[serde(flatten)]
    pub alert_instance: AlertInstance,
    pub state: CodeScanningAlertClosedByUserAlertInstancesItemState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertClosedByUserAlertRuleSeverity {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "note")]
    Note,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
}
impl ToString for CodeScanningAlertClosedByUserAlertRuleSeverity {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertClosedByUserAlertRuleSeverity::None => "none".to_string(),
            CodeScanningAlertClosedByUserAlertRuleSeverity::Note => "note".to_string(),
            CodeScanningAlertClosedByUserAlertRuleSeverity::Warning => "warning".to_string(),
            CodeScanningAlertClosedByUserAlertRuleSeverity::Error => "error".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertClosedByUserAlertRule {
    #[doc = "A short description of the rule used to detect the alert."]
    pub description: String,
    pub full_description: Option<String>,
    pub help: Option<()>,
    #[doc = "A unique identifier for the rule used to detect the alert."]
    pub id: String,
    pub name: Option<String>,
    #[doc = "The severity of the alert."]
    pub severity: Option<CodeScanningAlertClosedByUserAlertRuleSeverity>,
    pub tags: Option<()>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertClosedByUserAlertState {
    #[serde(rename = "dismissed")]
    Dismissed,
}
impl ToString for CodeScanningAlertClosedByUserAlertState {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertClosedByUserAlertState::Dismissed => "dismissed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertClosedByUserAlertTool {
    pub guid: Option<String>,
    #[doc = "The name of the tool used to generate the code scanning analysis alert."]
    pub name: String,
    #[doc = "The version of the tool used to detect the alert."]
    pub version: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertClosedByUserAlert {
    #[doc = "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`"]
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub dismissed_at: chrono::DateTime<chrono::offset::Utc>,
    pub dismissed_by: User,
    #[doc = "The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`."]
    pub dismissed_reason: Option<CodeScanningAlertClosedByUserAlertDismissedReason>,
    #[doc = "The GitHub URL of the alert resource."]
    pub html_url: String,
    pub instances: Vec<CodeScanningAlertClosedByUserAlertInstancesItem>,
    pub most_recent_instance: Option<AlertInstance>,
    #[doc = "The code scanning alert number."]
    pub number: u64,
    pub rule: CodeScanningAlertClosedByUserAlertRule,
    #[doc = "State of a code scanning alert."]
    pub state: CodeScanningAlertClosedByUserAlertState,
    pub tool: CodeScanningAlertClosedByUserAlertTool,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for CodeScanningAlertCreatedAction {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertCreatedAlertInstancesItemState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "dismissed")]
    Dismissed,
}
impl ToString for CodeScanningAlertCreatedAlertInstancesItemState {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertCreatedAlertInstancesItemState::Open => "open".to_string(),
            CodeScanningAlertCreatedAlertInstancesItemState::Dismissed => "dismissed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertCreatedAlertInstancesItem {
    #[serde(flatten)]
    pub alert_instance: AlertInstance,
    pub state: CodeScanningAlertCreatedAlertInstancesItemState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertCreatedAlertRuleSeverity {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "note")]
    Note,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
}
impl ToString for CodeScanningAlertCreatedAlertRuleSeverity {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertCreatedAlertRuleSeverity::None => "none".to_string(),
            CodeScanningAlertCreatedAlertRuleSeverity::Note => "note".to_string(),
            CodeScanningAlertCreatedAlertRuleSeverity::Warning => "warning".to_string(),
            CodeScanningAlertCreatedAlertRuleSeverity::Error => "error".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertCreatedAlertRule {
    #[doc = "A short description of the rule used to detect the alert."]
    pub description: String,
    pub full_description: Option<String>,
    pub help: Option<()>,
    #[doc = "A unique identifier for the rule used to detect the alert."]
    pub id: String,
    pub name: Option<String>,
    #[doc = "The severity of the alert."]
    pub severity: Option<CodeScanningAlertCreatedAlertRuleSeverity>,
    pub tags: Option<()>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertCreatedAlertState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "dismissed")]
    Dismissed,
}
impl ToString for CodeScanningAlertCreatedAlertState {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertCreatedAlertState::Open => "open".to_string(),
            CodeScanningAlertCreatedAlertState::Dismissed => "dismissed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertCreatedAlertTool {
    pub guid: Option<String>,
    #[doc = "The name of the tool used to generate the code scanning analysis alert."]
    pub name: String,
    #[doc = "The version of the tool used to detect the alert."]
    pub version: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertCreatedAlert {
    #[doc = "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`"]
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub dismissed_at: (),
    pub dismissed_by: (),
    #[doc = "The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`."]
    pub dismissed_reason: (),
    #[doc = "The GitHub URL of the alert resource."]
    pub html_url: String,
    pub instances: Vec<CodeScanningAlertCreatedAlertInstancesItem>,
    pub most_recent_instance: Option<AlertInstance>,
    #[doc = "The code scanning alert number."]
    pub number: u64,
    pub rule: CodeScanningAlertCreatedAlertRule,
    #[doc = "State of a code scanning alert."]
    pub state: CodeScanningAlertCreatedAlertState,
    pub tool: CodeScanningAlertCreatedAlertTool,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertFixedAction {
    #[serde(rename = "fixed")]
    Fixed,
}
impl ToString for CodeScanningAlertFixedAction {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertFixedAction::Fixed => "fixed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertFixedAlertDismissedReason {
    #[serde(rename = "false positive")]
    FalsePositive,
    #[serde(rename = "won't fix")]
    WontFix,
    #[serde(rename = "used in tests")]
    UsedInTests,
}
impl ToString for CodeScanningAlertFixedAlertDismissedReason {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertFixedAlertDismissedReason::FalsePositive => {
                "false positive".to_string()
            }
            CodeScanningAlertFixedAlertDismissedReason::WontFix => "won't fix".to_string(),
            CodeScanningAlertFixedAlertDismissedReason::UsedInTests => "used in tests".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertFixedAlertInstancesItemState {
    #[serde(rename = "fixed")]
    Fixed,
}
impl ToString for CodeScanningAlertFixedAlertInstancesItemState {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertFixedAlertInstancesItemState::Fixed => "fixed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertFixedAlertInstancesItem {
    #[serde(flatten)]
    pub alert_instance: AlertInstance,
    pub state: CodeScanningAlertFixedAlertInstancesItemState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertFixedAlertRuleSeverity {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "note")]
    Note,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
}
impl ToString for CodeScanningAlertFixedAlertRuleSeverity {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertFixedAlertRuleSeverity::None => "none".to_string(),
            CodeScanningAlertFixedAlertRuleSeverity::Note => "note".to_string(),
            CodeScanningAlertFixedAlertRuleSeverity::Warning => "warning".to_string(),
            CodeScanningAlertFixedAlertRuleSeverity::Error => "error".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertFixedAlertRule {
    #[doc = "A short description of the rule used to detect the alert."]
    pub description: String,
    pub full_description: Option<String>,
    pub help: Option<()>,
    #[doc = "A unique identifier for the rule used to detect the alert."]
    pub id: String,
    pub name: Option<String>,
    #[doc = "The severity of the alert."]
    pub severity: Option<CodeScanningAlertFixedAlertRuleSeverity>,
    pub tags: Option<()>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertFixedAlertState {
    #[serde(rename = "fixed")]
    Fixed,
}
impl ToString for CodeScanningAlertFixedAlertState {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertFixedAlertState::Fixed => "fixed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertFixedAlertTool {
    pub guid: Option<String>,
    #[doc = "The name of the tool used to generate the code scanning analysis alert."]
    pub name: String,
    #[doc = "The version of the tool used to detect the alert."]
    pub version: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertFixedAlert {
    #[doc = "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`"]
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub dismissed_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    pub dismissed_by: Option<User>,
    #[doc = "The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`."]
    pub dismissed_reason: Option<CodeScanningAlertFixedAlertDismissedReason>,
    #[doc = "The GitHub URL of the alert resource."]
    pub html_url: String,
    pub instances: Vec<CodeScanningAlertFixedAlertInstancesItem>,
    pub instances_url: Option<String>,
    pub most_recent_instance: Option<AlertInstance>,
    #[doc = "The code scanning alert number."]
    pub number: u64,
    pub rule: CodeScanningAlertFixedAlertRule,
    #[doc = "State of a code scanning alert."]
    pub state: CodeScanningAlertFixedAlertState,
    pub tool: CodeScanningAlertFixedAlertTool,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertReopenedAction {
    #[serde(rename = "reopened")]
    Reopened,
}
impl ToString for CodeScanningAlertReopenedAction {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertReopenedAction::Reopened => "reopened".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertReopenedAlertInstancesItemState {
    #[serde(rename = "open")]
    Open,
}
impl ToString for CodeScanningAlertReopenedAlertInstancesItemState {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertReopenedAlertInstancesItemState::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertReopenedAlertInstancesItem {
    #[serde(flatten)]
    pub alert_instance: AlertInstance,
    pub state: CodeScanningAlertReopenedAlertInstancesItemState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertReopenedAlertRuleSeverity {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "note")]
    Note,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
}
impl ToString for CodeScanningAlertReopenedAlertRuleSeverity {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertReopenedAlertRuleSeverity::None => "none".to_string(),
            CodeScanningAlertReopenedAlertRuleSeverity::Note => "note".to_string(),
            CodeScanningAlertReopenedAlertRuleSeverity::Warning => "warning".to_string(),
            CodeScanningAlertReopenedAlertRuleSeverity::Error => "error".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertReopenedAlertRule {
    #[doc = "A short description of the rule used to detect the alert."]
    pub description: String,
    pub full_description: Option<String>,
    pub help: Option<()>,
    #[doc = "A unique identifier for the rule used to detect the alert."]
    pub id: String,
    pub name: Option<String>,
    #[doc = "The severity of the alert."]
    pub severity: Option<CodeScanningAlertReopenedAlertRuleSeverity>,
    pub tags: Option<()>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertReopenedAlertState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "dismissed")]
    Dismissed,
    #[serde(rename = "fixed")]
    Fixed,
}
impl ToString for CodeScanningAlertReopenedAlertState {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertReopenedAlertState::Open => "open".to_string(),
            CodeScanningAlertReopenedAlertState::Dismissed => "dismissed".to_string(),
            CodeScanningAlertReopenedAlertState::Fixed => "fixed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertReopenedAlertTool {
    pub guid: Option<String>,
    #[doc = "The name of the tool used to generate the code scanning analysis alert."]
    pub name: String,
    #[doc = "The version of the tool used to detect the alert."]
    pub version: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertReopenedAlert {
    #[doc = "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`"]
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub dismissed_at: (),
    pub dismissed_by: (),
    #[doc = "The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`."]
    pub dismissed_reason: (),
    #[doc = "The GitHub URL of the alert resource."]
    pub html_url: String,
    pub instances: Vec<CodeScanningAlertReopenedAlertInstancesItem>,
    pub most_recent_instance: Option<AlertInstance>,
    #[doc = "The code scanning alert number."]
    pub number: u64,
    pub rule: CodeScanningAlertReopenedAlertRule,
    #[doc = "State of a code scanning alert."]
    pub state: CodeScanningAlertReopenedAlertState,
    pub tool: CodeScanningAlertReopenedAlertTool,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertReopenedByUserAction {
    #[serde(rename = "reopened_by_user")]
    ReopenedByUser,
}
impl ToString for CodeScanningAlertReopenedByUserAction {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertReopenedByUserAction::ReopenedByUser => "reopened_by_user".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertReopenedByUserAlertInstancesItemState {
    #[serde(rename = "open")]
    Open,
}
impl ToString for CodeScanningAlertReopenedByUserAlertInstancesItemState {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertReopenedByUserAlertInstancesItemState::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertReopenedByUserAlertInstancesItem {
    #[serde(flatten)]
    pub alert_instance: AlertInstance,
    pub state: CodeScanningAlertReopenedByUserAlertInstancesItemState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertReopenedByUserAlertRuleSeverity {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "note")]
    Note,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
}
impl ToString for CodeScanningAlertReopenedByUserAlertRuleSeverity {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertReopenedByUserAlertRuleSeverity::None => "none".to_string(),
            CodeScanningAlertReopenedByUserAlertRuleSeverity::Note => "note".to_string(),
            CodeScanningAlertReopenedByUserAlertRuleSeverity::Warning => "warning".to_string(),
            CodeScanningAlertReopenedByUserAlertRuleSeverity::Error => "error".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertReopenedByUserAlertRule {
    #[doc = "A short description of the rule used to detect the alert."]
    pub description: String,
    #[doc = "A unique identifier for the rule used to detect the alert."]
    pub id: String,
    #[doc = "The severity of the alert."]
    pub severity: Option<CodeScanningAlertReopenedByUserAlertRuleSeverity>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CodeScanningAlertReopenedByUserAlertState {
    #[serde(rename = "open")]
    Open,
}
impl ToString for CodeScanningAlertReopenedByUserAlertState {
    fn to_string(&self) -> String {
        match self {
            CodeScanningAlertReopenedByUserAlertState::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertReopenedByUserAlertTool {
    #[doc = "The name of the tool used to generate the code scanning analysis alert."]
    pub name: String,
    #[doc = "The version of the tool used to detect the alert."]
    pub version: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CodeScanningAlertReopenedByUserAlert {
    #[doc = "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`"]
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    #[doc = "The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."]
    pub dismissed_at: (),
    pub dismissed_by: (),
    #[doc = "The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`."]
    pub dismissed_reason: (),
    #[doc = "The GitHub URL of the alert resource."]
    pub html_url: String,
    pub instances: Vec<CodeScanningAlertReopenedByUserAlertInstancesItem>,
    pub most_recent_instance: Option<AlertInstance>,
    #[doc = "The code scanning alert number."]
    pub number: u64,
    pub rule: CodeScanningAlertReopenedByUserAlertRule,
    #[doc = "State of a code scanning alert."]
    pub state: CodeScanningAlertReopenedByUserAlertState,
    pub tool: CodeScanningAlertReopenedByUserAlertTool,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CommitCommentCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for CommitCommentCreatedAction {
    fn to_string(&self) -> String {
        match self {
            CommitCommentCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CommitCommentCreatedComment {
    pub author_association: AuthorAssociation,
    #[doc = "The text of the comment."]
    pub body: String,
    #[doc = "The SHA of the commit to which the comment applies."]
    pub commit_id: String,
    pub created_at: String,
    pub html_url: String,
    #[doc = "The ID of the commit comment."]
    pub id: u64,
    #[doc = "The line of the blob to which the comment applies. The last line of the range for a multi-line comment"]
    pub line: Option<u64>,
    #[doc = "The node ID of the commit comment."]
    pub node_id: String,
    #[doc = "The relative path of the file to which the comment applies."]
    pub path: Option<String>,
    #[doc = "The line index in the diff to which the comment applies."]
    pub position: Option<u64>,
    pub updated_at: String,
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ContentReferenceCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for ContentReferenceCreatedAction {
    fn to_string(&self) -> String {
        match self {
            ContentReferenceCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ContentReferenceCreatedContentReference {
    pub id: u64,
    pub node_id: String,
    pub reference: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum CreateEventRefType {
    #[serde(rename = "tag")]
    Tag,
    #[serde(rename = "branch")]
    Branch,
}
impl ToString for CreateEventRefType {
    fn to_string(&self) -> String {
        match self {
            CreateEventRefType::Tag => "tag".to_string(),
            CreateEventRefType::Branch => "branch".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DeleteEventRefType {
    #[serde(rename = "tag")]
    Tag,
    #[serde(rename = "branch")]
    Branch,
}
impl ToString for DeleteEventRefType {
    fn to_string(&self) -> String {
        match self {
            DeleteEventRefType::Tag => "tag".to_string(),
            DeleteEventRefType::Branch => "branch".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DeployKeyCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for DeployKeyCreatedAction {
    fn to_string(&self) -> String {
        match self {
            DeployKeyCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeployKeyCreatedKey {
    pub created_at: String,
    pub id: u64,
    pub key: String,
    pub read_only: bool,
    pub title: String,
    pub url: String,
    pub verified: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DeployKeyDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for DeployKeyDeletedAction {
    fn to_string(&self) -> String {
        match self {
            DeployKeyDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeployKeyDeletedKey {
    pub created_at: String,
    pub id: u64,
    pub key: String,
    pub read_only: bool,
    pub title: String,
    pub url: String,
    pub verified: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DeploymentCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for DeploymentCreatedAction {
    fn to_string(&self) -> String {
        match self {
            DeploymentCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeploymentCreatedDeploymentPayload {}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeploymentCreatedDeployment {
    pub created_at: String,
    pub creator: User,
    pub description: (),
    pub environment: String,
    pub id: u64,
    pub node_id: String,
    pub original_environment: String,
    pub payload: DeploymentCreatedDeploymentPayload,
    pub performed_via_github_app: Option<App>,
    pub repository_url: String,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub statuses_url: String,
    pub task: String,
    pub updated_at: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DeploymentStatusCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for DeploymentStatusCreatedAction {
    fn to_string(&self) -> String {
        match self {
            DeploymentStatusCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeploymentStatusCreatedDeploymentPayload {}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeploymentStatusCreatedDeployment {
    pub created_at: String,
    pub creator: User,
    pub description: (),
    pub environment: String,
    pub id: u64,
    pub node_id: String,
    pub original_environment: String,
    pub payload: DeploymentStatusCreatedDeploymentPayload,
    pub performed_via_github_app: Option<App>,
    pub repository_url: String,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub statuses_url: String,
    pub task: String,
    pub updated_at: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeploymentStatusCreatedDeploymentStatus {
    pub created_at: String,
    pub creator: User,
    pub deployment_url: String,
    #[doc = "The optional human-readable description added to the status."]
    pub description: String,
    pub environment: String,
    pub id: u64,
    pub node_id: String,
    pub performed_via_github_app: Option<App>,
    pub repository_url: String,
    #[doc = "The new state. Can be `pending`, `success`, `failure`, or `error`."]
    pub state: String,
    #[doc = "The optional link added to the status."]
    pub target_url: String,
    pub updated_at: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCategory {
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub description: String,
    pub emoji: String,
    pub id: u64,
    pub is_answerable: bool,
    pub name: String,
    pub repository_id: u64,
    pub slug: String,
    pub updated_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "locked")]
    Locked,
    #[serde(rename = "converting")]
    Converting,
}
impl ToString for DiscussionState {
    fn to_string(&self) -> String {
        match self {
            DiscussionState::Open => "open".to_string(),
            DiscussionState::Locked => "locked".to_string(),
            DiscussionState::Converting => "converting".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionAnsweredAction {
    #[serde(rename = "answered")]
    Answered,
}
impl ToString for DiscussionAnsweredAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionAnsweredAction::Answered => "answered".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionAnsweredAnswer {
    pub author_association: AuthorAssociation,
    pub body: String,
    pub child_comment_count: u64,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub discussion_id: u64,
    pub html_url: String,
    pub id: u64,
    pub node_id: String,
    pub parent_id: (),
    pub repository_url: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionAnsweredDiscussionCategory {
    pub is_answerable: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionAnsweredDiscussion {
    #[serde(flatten)]
    pub discussion: Discussion,
    pub answer_chosen_at: chrono::DateTime<chrono::offset::Utc>,
    pub answer_chosen_by: User,
    pub answer_html_url: String,
    pub category: DiscussionAnsweredDiscussionCategory,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionCategoryChangedAction {
    #[serde(rename = "category_changed")]
    CategoryChanged,
}
impl ToString for DiscussionCategoryChangedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionCategoryChangedAction::CategoryChanged => "category_changed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCategoryChangedChangesCategoryFrom {
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub description: String,
    pub emoji: String,
    pub id: u64,
    pub is_answerable: bool,
    pub name: String,
    pub repository_id: u64,
    pub slug: String,
    pub updated_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCategoryChangedChangesCategory {
    pub from: DiscussionCategoryChangedChangesCategoryFrom,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCategoryChangedChanges {
    pub category: DiscussionCategoryChangedChangesCategory,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for DiscussionCreatedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionCreatedDiscussionState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "converting")]
    Converting,
}
impl ToString for DiscussionCreatedDiscussionState {
    fn to_string(&self) -> String {
        match self {
            DiscussionCreatedDiscussionState::Open => "open".to_string(),
            DiscussionCreatedDiscussionState::Converting => "converting".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCreatedDiscussion {
    #[serde(flatten)]
    pub discussion: Discussion,
    pub answer_chosen_at: (),
    pub answer_chosen_by: (),
    pub answer_html_url: (),
    pub locked: bool,
    pub state: DiscussionCreatedDiscussionState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for DiscussionDeletedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionEditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for DiscussionEditedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionEditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionEditedChangesBody {
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionEditedChangesTitle {
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionEditedChanges {
    pub body: Option<DiscussionEditedChangesBody>,
    pub title: Option<DiscussionEditedChangesTitle>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionLabeledAction {
    #[serde(rename = "labeled")]
    Labeled,
}
impl ToString for DiscussionLabeledAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionLabeledAction::Labeled => "labeled".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionLockedAction {
    #[serde(rename = "locked")]
    Locked,
}
impl ToString for DiscussionLockedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionLockedAction::Locked => "locked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionLockedDiscussionState {
    #[serde(rename = "locked")]
    Locked,
}
impl ToString for DiscussionLockedDiscussionState {
    fn to_string(&self) -> String {
        match self {
            DiscussionLockedDiscussionState::Locked => "locked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionLockedDiscussion {
    #[serde(flatten)]
    pub discussion: Discussion,
    pub locked: bool,
    pub state: DiscussionLockedDiscussionState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionPinnedAction {
    #[serde(rename = "pinned")]
    Pinned,
}
impl ToString for DiscussionPinnedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionPinnedAction::Pinned => "pinned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionTransferredAction {
    #[serde(rename = "transferred")]
    Transferred,
}
impl ToString for DiscussionTransferredAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionTransferredAction::Transferred => "transferred".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionTransferredChanges {
    pub new_discussion: Discussion,
    pub new_repository: Repository,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionUnansweredAction {
    #[serde(rename = "unanswered")]
    Unanswered,
}
impl ToString for DiscussionUnansweredAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionUnansweredAction::Unanswered => "unanswered".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionUnansweredDiscussionCategory {
    pub is_answerable: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionUnansweredDiscussion {
    #[serde(flatten)]
    pub discussion: Discussion,
    pub answer_chosen_at: (),
    pub answer_chosen_by: (),
    pub answer_html_url: (),
    pub category: DiscussionUnansweredDiscussionCategory,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionUnansweredOldAnswer {
    pub author_association: AuthorAssociation,
    pub body: String,
    pub child_comment_count: u64,
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub discussion_id: u64,
    pub html_url: String,
    pub id: u64,
    pub node_id: String,
    pub parent_id: (),
    pub repository_url: String,
    pub updated_at: chrono::DateTime<chrono::offset::Utc>,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionUnlabeledAction {
    #[serde(rename = "unlabeled")]
    Unlabeled,
}
impl ToString for DiscussionUnlabeledAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionUnlabeledAction::Unlabeled => "unlabeled".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionUnlockedAction {
    #[serde(rename = "unlocked")]
    Unlocked,
}
impl ToString for DiscussionUnlockedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionUnlockedAction::Unlocked => "unlocked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionUnlockedDiscussionState {
    #[serde(rename = "open")]
    Open,
}
impl ToString for DiscussionUnlockedDiscussionState {
    fn to_string(&self) -> String {
        match self {
            DiscussionUnlockedDiscussionState::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionUnlockedDiscussion {
    #[serde(flatten)]
    pub discussion: Discussion,
    pub locked: bool,
    pub state: DiscussionUnlockedDiscussionState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionUnpinnedAction {
    #[serde(rename = "unpinned")]
    Unpinned,
}
impl ToString for DiscussionUnpinnedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionUnpinnedAction::Unpinned => "unpinned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionCommentCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for DiscussionCommentCreatedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionCommentCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCommentCreatedComment {
    pub author_association: AuthorAssociation,
    pub body: String,
    pub child_comment_count: u64,
    pub created_at: String,
    pub discussion_id: u64,
    pub html_url: String,
    pub id: u64,
    pub node_id: String,
    pub parent_id: Option<u64>,
    pub repository_url: String,
    pub updated_at: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionCommentDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for DiscussionCommentDeletedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionCommentDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCommentDeletedComment {
    pub author_association: AuthorAssociation,
    pub body: String,
    pub child_comment_count: u64,
    pub created_at: String,
    pub discussion_id: u64,
    pub html_url: String,
    pub id: u64,
    pub node_id: String,
    pub parent_id: Option<u64>,
    pub repository_url: String,
    pub updated_at: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum DiscussionCommentEditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for DiscussionCommentEditedAction {
    fn to_string(&self) -> String {
        match self {
            DiscussionCommentEditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCommentEditedChangesBody {
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCommentEditedChanges {
    pub body: DiscussionCommentEditedChangesBody,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DiscussionCommentEditedComment {
    pub author_association: AuthorAssociation,
    pub body: String,
    pub child_comment_count: u64,
    pub created_at: String,
    pub discussion_id: u64,
    pub html_url: String,
    pub id: u64,
    pub node_id: String,
    pub parent_id: Option<u64>,
    pub repository_url: String,
    pub updated_at: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ForkEventForkee {
    #[serde(flatten)]
    pub repository: Repository,
    pub fork: Option<bool>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum GithubAppAuthorizationRevokedAction {
    #[serde(rename = "revoked")]
    Revoked,
}
impl ToString for GithubAppAuthorizationRevokedAction {
    fn to_string(&self) -> String {
        match self {
            GithubAppAuthorizationRevokedAction::Revoked => "revoked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum GollumEventPagesItemAction {
    #[serde(rename = "created")]
    Created,
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for GollumEventPagesItemAction {
    fn to_string(&self) -> String {
        match self {
            GollumEventPagesItemAction::Created => "created".to_string(),
            GollumEventPagesItemAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GollumEventPagesItem {
    #[doc = "The action that was performed on the page. Can be `created` or `edited`."]
    pub action: GollumEventPagesItemAction,
    #[doc = "Points to the HTML wiki page."]
    pub html_url: String,
    #[doc = "The name of the page."]
    pub page_name: String,
    #[doc = "The latest commit SHA of the page."]
    pub sha: String,
    pub summary: (),
    #[doc = "The current page title."]
    pub title: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum InstallationCreatedAt {
    Variant0(chrono::DateTime<chrono::offset::Utc>),
    Variant1(u64),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationEventsItem {
    #[serde(rename = "check_run")]
    CheckRun,
    #[serde(rename = "check_suite")]
    CheckSuite,
    #[serde(rename = "code_scanning_alert")]
    CodeScanningAlert,
    #[serde(rename = "commit_comment")]
    CommitComment,
    #[serde(rename = "content_reference")]
    ContentReference,
    #[serde(rename = "create")]
    Create,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "deployment")]
    Deployment,
    #[serde(rename = "deployment_review")]
    DeploymentReview,
    #[serde(rename = "deployment_status")]
    DeploymentStatus,
    #[serde(rename = "deploy_key")]
    DeployKey,
    #[serde(rename = "discussion")]
    Discussion,
    #[serde(rename = "discussion_comment")]
    DiscussionComment,
    #[serde(rename = "fork")]
    Fork,
    #[serde(rename = "gollum")]
    Gollum,
    #[serde(rename = "issues")]
    Issues,
    #[serde(rename = "issue_comment")]
    IssueComment,
    #[serde(rename = "label")]
    Label,
    #[serde(rename = "member")]
    Member,
    #[serde(rename = "membership")]
    Membership,
    #[serde(rename = "merge_queue_entry")]
    MergeQueueEntry,
    #[serde(rename = "milestone")]
    Milestone,
    #[serde(rename = "organization")]
    Organization,
    #[serde(rename = "org_block")]
    OrgBlock,
    #[serde(rename = "page_build")]
    PageBuild,
    #[serde(rename = "project")]
    Project,
    #[serde(rename = "project_card")]
    ProjectCard,
    #[serde(rename = "project_column")]
    ProjectColumn,
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "pull_request")]
    PullRequest,
    #[serde(rename = "pull_request_review")]
    PullRequestReview,
    #[serde(rename = "pull_request_review_comment")]
    PullRequestReviewComment,
    #[serde(rename = "push")]
    Push,
    #[serde(rename = "registry_package")]
    RegistryPackage,
    #[serde(rename = "release")]
    Release,
    #[serde(rename = "repository")]
    Repository,
    #[serde(rename = "repository_dispatch")]
    RepositoryDispatch,
    #[serde(rename = "secret_scanning_alert")]
    SecretScanningAlert,
    #[serde(rename = "star")]
    Star,
    #[serde(rename = "status")]
    Status,
    #[serde(rename = "team")]
    Team,
    #[serde(rename = "team_add")]
    TeamAdd,
    #[serde(rename = "watch")]
    Watch,
    #[serde(rename = "workflow_dispatch")]
    WorkflowDispatch,
    #[serde(rename = "workflow_run")]
    WorkflowRun,
}
impl ToString for InstallationEventsItem {
    fn to_string(&self) -> String {
        match self {
            InstallationEventsItem::CheckRun => "check_run".to_string(),
            InstallationEventsItem::CheckSuite => "check_suite".to_string(),
            InstallationEventsItem::CodeScanningAlert => "code_scanning_alert".to_string(),
            InstallationEventsItem::CommitComment => "commit_comment".to_string(),
            InstallationEventsItem::ContentReference => "content_reference".to_string(),
            InstallationEventsItem::Create => "create".to_string(),
            InstallationEventsItem::Delete => "delete".to_string(),
            InstallationEventsItem::Deployment => "deployment".to_string(),
            InstallationEventsItem::DeploymentReview => "deployment_review".to_string(),
            InstallationEventsItem::DeploymentStatus => "deployment_status".to_string(),
            InstallationEventsItem::DeployKey => "deploy_key".to_string(),
            InstallationEventsItem::Discussion => "discussion".to_string(),
            InstallationEventsItem::DiscussionComment => "discussion_comment".to_string(),
            InstallationEventsItem::Fork => "fork".to_string(),
            InstallationEventsItem::Gollum => "gollum".to_string(),
            InstallationEventsItem::Issues => "issues".to_string(),
            InstallationEventsItem::IssueComment => "issue_comment".to_string(),
            InstallationEventsItem::Label => "label".to_string(),
            InstallationEventsItem::Member => "member".to_string(),
            InstallationEventsItem::Membership => "membership".to_string(),
            InstallationEventsItem::MergeQueueEntry => "merge_queue_entry".to_string(),
            InstallationEventsItem::Milestone => "milestone".to_string(),
            InstallationEventsItem::Organization => "organization".to_string(),
            InstallationEventsItem::OrgBlock => "org_block".to_string(),
            InstallationEventsItem::PageBuild => "page_build".to_string(),
            InstallationEventsItem::Project => "project".to_string(),
            InstallationEventsItem::ProjectCard => "project_card".to_string(),
            InstallationEventsItem::ProjectColumn => "project_column".to_string(),
            InstallationEventsItem::Public => "public".to_string(),
            InstallationEventsItem::PullRequest => "pull_request".to_string(),
            InstallationEventsItem::PullRequestReview => "pull_request_review".to_string(),
            InstallationEventsItem::PullRequestReviewComment => {
                "pull_request_review_comment".to_string()
            }
            InstallationEventsItem::Push => "push".to_string(),
            InstallationEventsItem::RegistryPackage => "registry_package".to_string(),
            InstallationEventsItem::Release => "release".to_string(),
            InstallationEventsItem::Repository => "repository".to_string(),
            InstallationEventsItem::RepositoryDispatch => "repository_dispatch".to_string(),
            InstallationEventsItem::SecretScanningAlert => "secret_scanning_alert".to_string(),
            InstallationEventsItem::Star => "star".to_string(),
            InstallationEventsItem::Status => "status".to_string(),
            InstallationEventsItem::Team => "team".to_string(),
            InstallationEventsItem::TeamAdd => "team_add".to_string(),
            InstallationEventsItem::Watch => "watch".to_string(),
            InstallationEventsItem::WorkflowDispatch => "workflow_dispatch".to_string(),
            InstallationEventsItem::WorkflowRun => "workflow_run".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsActions {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsActions {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsActions::Read => "read".to_string(),
            InstallationPermissionsActions::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsAdministration {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsAdministration {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsAdministration::Read => "read".to_string(),
            InstallationPermissionsAdministration::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsChecks {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsChecks {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsChecks::Read => "read".to_string(),
            InstallationPermissionsChecks::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsContentReferences {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsContentReferences {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsContentReferences::Read => "read".to_string(),
            InstallationPermissionsContentReferences::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsContents {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsContents {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsContents::Read => "read".to_string(),
            InstallationPermissionsContents::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsDeployments {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsDeployments {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsDeployments::Read => "read".to_string(),
            InstallationPermissionsDeployments::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsDiscussions {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsDiscussions {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsDiscussions::Read => "read".to_string(),
            InstallationPermissionsDiscussions::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsEmails {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsEmails {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsEmails::Read => "read".to_string(),
            InstallationPermissionsEmails::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsEnvironments {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsEnvironments {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsEnvironments::Read => "read".to_string(),
            InstallationPermissionsEnvironments::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsIssues {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsIssues {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsIssues::Read => "read".to_string(),
            InstallationPermissionsIssues::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsMembers {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsMembers {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsMembers::Read => "read".to_string(),
            InstallationPermissionsMembers::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsMetadata {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsMetadata {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsMetadata::Read => "read".to_string(),
            InstallationPermissionsMetadata::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsOrganizationAdministration {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsOrganizationAdministration {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsOrganizationAdministration::Read => "read".to_string(),
            InstallationPermissionsOrganizationAdministration::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsOrganizationEvents {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsOrganizationEvents {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsOrganizationEvents::Read => "read".to_string(),
            InstallationPermissionsOrganizationEvents::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsOrganizationHooks {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsOrganizationHooks {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsOrganizationHooks::Read => "read".to_string(),
            InstallationPermissionsOrganizationHooks::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsOrganizationPackages {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsOrganizationPackages {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsOrganizationPackages::Read => "read".to_string(),
            InstallationPermissionsOrganizationPackages::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsOrganizationPlan {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsOrganizationPlan {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsOrganizationPlan::Read => "read".to_string(),
            InstallationPermissionsOrganizationPlan::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsOrganizationProjects {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsOrganizationProjects {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsOrganizationProjects::Read => "read".to_string(),
            InstallationPermissionsOrganizationProjects::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsOrganizationSecrets {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsOrganizationSecrets {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsOrganizationSecrets::Read => "read".to_string(),
            InstallationPermissionsOrganizationSecrets::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsOrganizationSelfHostedRunners {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsOrganizationSelfHostedRunners {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsOrganizationSelfHostedRunners::Read => "read".to_string(),
            InstallationPermissionsOrganizationSelfHostedRunners::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsOrganizationUserBlocking {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsOrganizationUserBlocking {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsOrganizationUserBlocking::Read => "read".to_string(),
            InstallationPermissionsOrganizationUserBlocking::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsPackages {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsPackages {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsPackages::Read => "read".to_string(),
            InstallationPermissionsPackages::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsPages {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsPages {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsPages::Read => "read".to_string(),
            InstallationPermissionsPages::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsPullRequests {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsPullRequests {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsPullRequests::Read => "read".to_string(),
            InstallationPermissionsPullRequests::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsRepositoryHooks {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsRepositoryHooks {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsRepositoryHooks::Read => "read".to_string(),
            InstallationPermissionsRepositoryHooks::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsRepositoryProjects {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsRepositoryProjects {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsRepositoryProjects::Read => "read".to_string(),
            InstallationPermissionsRepositoryProjects::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsSecretScanningAlerts {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsSecretScanningAlerts {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsSecretScanningAlerts::Read => "read".to_string(),
            InstallationPermissionsSecretScanningAlerts::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsSecrets {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsSecrets {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsSecrets::Read => "read".to_string(),
            InstallationPermissionsSecrets::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsSecurityEvents {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsSecurityEvents {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsSecurityEvents::Read => "read".to_string(),
            InstallationPermissionsSecurityEvents::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsSecurityScanningAlert {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsSecurityScanningAlert {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsSecurityScanningAlert::Read => "read".to_string(),
            InstallationPermissionsSecurityScanningAlert::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsSingleFile {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsSingleFile {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsSingleFile::Read => "read".to_string(),
            InstallationPermissionsSingleFile::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsStatuses {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsStatuses {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsStatuses::Read => "read".to_string(),
            InstallationPermissionsStatuses::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsTeamDiscussions {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsTeamDiscussions {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsTeamDiscussions::Read => "read".to_string(),
            InstallationPermissionsTeamDiscussions::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsVulnerabilityAlerts {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsVulnerabilityAlerts {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsVulnerabilityAlerts::Read => "read".to_string(),
            InstallationPermissionsVulnerabilityAlerts::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationPermissionsWorkflows {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl ToString for InstallationPermissionsWorkflows {
    fn to_string(&self) -> String {
        match self {
            InstallationPermissionsWorkflows::Read => "read".to_string(),
            InstallationPermissionsWorkflows::Write => "write".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationPermissions {
    pub actions: Option<InstallationPermissionsActions>,
    pub administration: Option<InstallationPermissionsAdministration>,
    pub checks: Option<InstallationPermissionsChecks>,
    pub content_references: Option<InstallationPermissionsContentReferences>,
    pub contents: Option<InstallationPermissionsContents>,
    pub deployments: Option<InstallationPermissionsDeployments>,
    pub discussions: Option<InstallationPermissionsDiscussions>,
    pub emails: Option<InstallationPermissionsEmails>,
    pub environments: Option<InstallationPermissionsEnvironments>,
    pub issues: Option<InstallationPermissionsIssues>,
    pub members: Option<InstallationPermissionsMembers>,
    pub metadata: Option<InstallationPermissionsMetadata>,
    pub organization_administration: Option<InstallationPermissionsOrganizationAdministration>,
    pub organization_events: Option<InstallationPermissionsOrganizationEvents>,
    pub organization_hooks: Option<InstallationPermissionsOrganizationHooks>,
    pub organization_packages: Option<InstallationPermissionsOrganizationPackages>,
    pub organization_plan: Option<InstallationPermissionsOrganizationPlan>,
    pub organization_projects: Option<InstallationPermissionsOrganizationProjects>,
    pub organization_secrets: Option<InstallationPermissionsOrganizationSecrets>,
    pub organization_self_hosted_runners:
        Option<InstallationPermissionsOrganizationSelfHostedRunners>,
    pub organization_user_blocking: Option<InstallationPermissionsOrganizationUserBlocking>,
    pub packages: Option<InstallationPermissionsPackages>,
    pub pages: Option<InstallationPermissionsPages>,
    pub pull_requests: Option<InstallationPermissionsPullRequests>,
    pub repository_hooks: Option<InstallationPermissionsRepositoryHooks>,
    pub repository_projects: Option<InstallationPermissionsRepositoryProjects>,
    pub secret_scanning_alerts: Option<InstallationPermissionsSecretScanningAlerts>,
    pub secrets: Option<InstallationPermissionsSecrets>,
    pub security_events: Option<InstallationPermissionsSecurityEvents>,
    pub security_scanning_alert: Option<InstallationPermissionsSecurityScanningAlert>,
    pub single_file: Option<InstallationPermissionsSingleFile>,
    pub statuses: Option<InstallationPermissionsStatuses>,
    pub team_discussions: Option<InstallationPermissionsTeamDiscussions>,
    pub vulnerability_alerts: Option<InstallationPermissionsVulnerabilityAlerts>,
    pub workflows: Option<InstallationPermissionsWorkflows>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationRepositorySelection {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "selected")]
    Selected,
}
impl ToString for InstallationRepositorySelection {
    fn to_string(&self) -> String {
        match self {
            InstallationRepositorySelection::All => "all".to_string(),
            InstallationRepositorySelection::Selected => "selected".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationTargetType {
    User,
    Organization,
}
impl ToString for InstallationTargetType {
    fn to_string(&self) -> String {
        match self {
            InstallationTargetType::User => "User".to_string(),
            InstallationTargetType::Organization => "Organization".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum InstallationUpdatedAt {
    Variant0(chrono::DateTime<chrono::offset::Utc>),
    Variant1(u64),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for InstallationCreatedAction {
    fn to_string(&self) -> String {
        match self {
            InstallationCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationCreatedRepositoriesItem {
    pub full_name: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for InstallationDeletedAction {
    fn to_string(&self) -> String {
        match self {
            InstallationDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationDeletedRepositoriesItem {
    pub full_name: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationNewPermissionsAcceptedAction {
    #[serde(rename = "new_permissions_accepted")]
    NewPermissionsAccepted,
}
impl ToString for InstallationNewPermissionsAcceptedAction {
    fn to_string(&self) -> String {
        match self {
            InstallationNewPermissionsAcceptedAction::NewPermissionsAccepted => {
                "new_permissions_accepted".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationNewPermissionsAcceptedRepositoriesItem {
    pub full_name: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationSuspendAction {
    #[serde(rename = "suspend")]
    Suspend,
}
impl ToString for InstallationSuspendAction {
    fn to_string(&self) -> String {
        match self {
            InstallationSuspendAction::Suspend => "suspend".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationSuspendInstallation {
    #[serde(flatten)]
    pub installation: Installation,
    pub suspended_at: chrono::DateTime<chrono::offset::Utc>,
    pub suspended_by: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationSuspendRepositoriesItem {
    pub full_name: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationUnsuspendAction {
    #[serde(rename = "unsuspend")]
    Unsuspend,
}
impl ToString for InstallationUnsuspendAction {
    fn to_string(&self) -> String {
        match self {
            InstallationUnsuspendAction::Unsuspend => "unsuspend".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationUnsuspendInstallation {
    #[serde(flatten)]
    pub installation: Installation,
    pub suspended_at: (),
    pub suspended_by: (),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationUnsuspendRepositoriesItem {
    pub full_name: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationRepositoriesAddedAction {
    #[serde(rename = "added")]
    Added,
}
impl ToString for InstallationRepositoriesAddedAction {
    fn to_string(&self) -> String {
        match self {
            InstallationRepositoriesAddedAction::Added => "added".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationRepositoriesAddedRepositoriesAddedItem {
    pub full_name: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationRepositoriesAddedRepositoriesRemovedItem {
    pub full_name: Option<String>,
    #[doc = "Unique identifier of the repository"]
    pub id: Option<u64>,
    #[doc = "The name of the repository."]
    pub name: Option<String>,
    pub node_id: Option<String>,
    #[doc = "Whether the repository is private or public."]
    pub private: Option<bool>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationRepositoriesAddedRepositorySelection {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "selected")]
    Selected,
}
impl ToString for InstallationRepositoriesAddedRepositorySelection {
    fn to_string(&self) -> String {
        match self {
            InstallationRepositoriesAddedRepositorySelection::All => "all".to_string(),
            InstallationRepositoriesAddedRepositorySelection::Selected => "selected".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationRepositoriesRemovedAction {
    #[serde(rename = "removed")]
    Removed,
}
impl ToString for InstallationRepositoriesRemovedAction {
    fn to_string(&self) -> String {
        match self {
            InstallationRepositoriesRemovedAction::Removed => "removed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationRepositoriesRemovedRepositoriesAddedItem {
    pub full_name: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct InstallationRepositoriesRemovedRepositoriesRemovedItem {
    pub full_name: String,
    #[doc = "Unique identifier of the repository"]
    pub id: u64,
    #[doc = "The name of the repository."]
    pub name: String,
    pub node_id: String,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum InstallationRepositoriesRemovedRepositorySelection {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "selected")]
    Selected,
}
impl ToString for InstallationRepositoriesRemovedRepositorySelection {
    fn to_string(&self) -> String {
        match self {
            InstallationRepositoriesRemovedRepositorySelection::All => "all".to_string(),
            InstallationRepositoriesRemovedRepositorySelection::Selected => "selected".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueActiveLockReason {
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "off-topic")]
    OffTopic,
    #[serde(rename = "too heated")]
    TooHeated,
    #[serde(rename = "spam")]
    Spam,
}
impl ToString for IssueActiveLockReason {
    fn to_string(&self) -> String {
        match self {
            IssueActiveLockReason::Resolved => "resolved".to_string(),
            IssueActiveLockReason::OffTopic => "off-topic".to_string(),
            IssueActiveLockReason::TooHeated => "too heated".to_string(),
            IssueActiveLockReason::Spam => "spam".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuePullRequest {
    pub diff_url: Option<String>,
    pub html_url: Option<String>,
    pub patch_url: Option<String>,
    pub url: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for IssueState {
    fn to_string(&self) -> String {
        match self {
            IssueState::Open => "open".to_string(),
            IssueState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueCommentCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for IssueCommentCreatedAction {
    fn to_string(&self) -> String {
        match self {
            IssueCommentCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentCreatedIssuePullRequest {
    pub diff_url: String,
    pub html_url: String,
    pub patch_url: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueCommentCreatedIssueState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for IssueCommentCreatedIssueState {
    fn to_string(&self) -> String {
        match self {
            IssueCommentCreatedIssueState::Open => "open".to_string(),
            IssueCommentCreatedIssueState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentCreatedIssue {
    #[serde(flatten)]
    pub issue: Issue,
    pub assignee: Option<User>,
    pub labels: Vec<Label>,
    pub locked: bool,
    pub pull_request: Option<IssueCommentCreatedIssuePullRequest>,
    #[doc = "State of the issue; either 'open' or 'closed'"]
    pub state: IssueCommentCreatedIssueState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueCommentDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for IssueCommentDeletedAction {
    fn to_string(&self) -> String {
        match self {
            IssueCommentDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentDeletedIssuePullRequest {
    pub diff_url: String,
    pub html_url: String,
    pub patch_url: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueCommentDeletedIssueState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for IssueCommentDeletedIssueState {
    fn to_string(&self) -> String {
        match self {
            IssueCommentDeletedIssueState::Open => "open".to_string(),
            IssueCommentDeletedIssueState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentDeletedIssue {
    #[serde(flatten)]
    pub issue: Issue,
    pub assignee: Option<User>,
    pub labels: Vec<Label>,
    pub locked: bool,
    pub pull_request: Option<IssueCommentDeletedIssuePullRequest>,
    #[doc = "State of the issue; either 'open' or 'closed'"]
    pub state: IssueCommentDeletedIssueState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueCommentEditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for IssueCommentEditedAction {
    fn to_string(&self) -> String {
        match self {
            IssueCommentEditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentEditedChangesBody {
    #[doc = "The previous version of the body."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentEditedChanges {
    pub body: Option<IssueCommentEditedChangesBody>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentEditedIssuePullRequest {
    pub diff_url: String,
    pub html_url: String,
    pub patch_url: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssueCommentEditedIssueState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for IssueCommentEditedIssueState {
    fn to_string(&self) -> String {
        match self {
            IssueCommentEditedIssueState::Open => "open".to_string(),
            IssueCommentEditedIssueState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssueCommentEditedIssue {
    #[serde(flatten)]
    pub issue: Issue,
    pub assignee: Option<User>,
    pub labels: Vec<Label>,
    pub locked: bool,
    pub pull_request: Option<IssueCommentEditedIssuePullRequest>,
    #[doc = "State of the issue; either 'open' or 'closed'"]
    pub state: IssueCommentEditedIssueState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesAssignedAction {
    #[serde(rename = "assigned")]
    Assigned,
}
impl ToString for IssuesAssignedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesAssignedAction::Assigned => "assigned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesClosedAction {
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for IssuesClosedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesClosedAction::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesClosedIssueState {
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for IssuesClosedIssueState {
    fn to_string(&self) -> String {
        match self {
            IssuesClosedIssueState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesClosedIssue {
    #[serde(flatten)]
    pub issue: Issue,
    pub closed_at: String,
    pub state: IssuesClosedIssueState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for IssuesDeletedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesDemilestonedAction {
    #[serde(rename = "demilestoned")]
    Demilestoned,
}
impl ToString for IssuesDemilestonedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesDemilestonedAction::Demilestoned => "demilestoned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesDemilestonedIssue {
    #[serde(flatten)]
    pub issue: Issue,
    pub milestone: (),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesEditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for IssuesEditedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesEditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesEditedChangesBody {
    #[doc = "The previous version of the body."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesEditedChangesTitle {
    #[doc = "The previous version of the title."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesEditedChanges {
    pub body: Option<IssuesEditedChangesBody>,
    pub title: Option<IssuesEditedChangesTitle>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesLabeledAction {
    #[serde(rename = "labeled")]
    Labeled,
}
impl ToString for IssuesLabeledAction {
    fn to_string(&self) -> String {
        match self {
            IssuesLabeledAction::Labeled => "labeled".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesLockedAction {
    #[serde(rename = "locked")]
    Locked,
}
impl ToString for IssuesLockedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesLockedAction::Locked => "locked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesLockedIssueActiveLockReason {
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "off-topic")]
    OffTopic,
    #[serde(rename = "too heated")]
    TooHeated,
    #[serde(rename = "spam")]
    Spam,
}
impl ToString for IssuesLockedIssueActiveLockReason {
    fn to_string(&self) -> String {
        match self {
            IssuesLockedIssueActiveLockReason::Resolved => "resolved".to_string(),
            IssuesLockedIssueActiveLockReason::OffTopic => "off-topic".to_string(),
            IssuesLockedIssueActiveLockReason::TooHeated => "too heated".to_string(),
            IssuesLockedIssueActiveLockReason::Spam => "spam".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesLockedIssue {
    #[serde(flatten)]
    pub issue: Issue,
    pub active_lock_reason: Option<IssuesLockedIssueActiveLockReason>,
    pub locked: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesMilestonedAction {
    #[serde(rename = "milestoned")]
    Milestoned,
}
impl ToString for IssuesMilestonedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesMilestonedAction::Milestoned => "milestoned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesMilestonedIssue {
    #[serde(flatten)]
    pub issue: Issue,
    pub milestone: Milestone,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesOpenedAction {
    #[serde(rename = "opened")]
    Opened,
}
impl ToString for IssuesOpenedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesOpenedAction::Opened => "opened".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesOpenedChanges {
    pub old_issue: Issue,
    pub old_repository: Repository,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesOpenedIssueState {
    #[serde(rename = "open")]
    Open,
}
impl ToString for IssuesOpenedIssueState {
    fn to_string(&self) -> String {
        match self {
            IssuesOpenedIssueState::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesOpenedIssue {
    #[serde(flatten)]
    pub issue: Issue,
    pub closed_at: (),
    pub state: IssuesOpenedIssueState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesPinnedAction {
    #[serde(rename = "pinned")]
    Pinned,
}
impl ToString for IssuesPinnedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesPinnedAction::Pinned => "pinned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesReopenedAction {
    #[serde(rename = "reopened")]
    Reopened,
}
impl ToString for IssuesReopenedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesReopenedAction::Reopened => "reopened".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesReopenedIssueState {
    #[serde(rename = "open")]
    Open,
}
impl ToString for IssuesReopenedIssueState {
    fn to_string(&self) -> String {
        match self {
            IssuesReopenedIssueState::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesReopenedIssue {
    #[serde(flatten)]
    pub issue: Issue,
    pub state: IssuesReopenedIssueState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesTransferredAction {
    #[serde(rename = "transferred")]
    Transferred,
}
impl ToString for IssuesTransferredAction {
    fn to_string(&self) -> String {
        match self {
            IssuesTransferredAction::Transferred => "transferred".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesTransferredChanges {
    pub new_issue: Issue,
    pub new_repository: Repository,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesUnassignedAction {
    #[serde(rename = "unassigned")]
    Unassigned,
}
impl ToString for IssuesUnassignedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesUnassignedAction::Unassigned => "unassigned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesUnlabeledAction {
    #[serde(rename = "unlabeled")]
    Unlabeled,
}
impl ToString for IssuesUnlabeledAction {
    fn to_string(&self) -> String {
        match self {
            IssuesUnlabeledAction::Unlabeled => "unlabeled".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesUnlockedAction {
    #[serde(rename = "unlocked")]
    Unlocked,
}
impl ToString for IssuesUnlockedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesUnlockedAction::Unlocked => "unlocked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IssuesUnlockedIssue {
    #[serde(flatten)]
    pub issue: Issue,
    pub active_lock_reason: (),
    pub locked: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum IssuesUnpinnedAction {
    #[serde(rename = "unpinned")]
    Unpinned,
}
impl ToString for IssuesUnpinnedAction {
    fn to_string(&self) -> String {
        match self {
            IssuesUnpinnedAction::Unpinned => "unpinned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum LabelCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for LabelCreatedAction {
    fn to_string(&self) -> String {
        match self {
            LabelCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum LabelDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for LabelDeletedAction {
    fn to_string(&self) -> String {
        match self {
            LabelDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum LabelEditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for LabelEditedAction {
    fn to_string(&self) -> String {
        match self {
            LabelEditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct LabelEditedChangesColor {
    #[doc = "The previous version of the color if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct LabelEditedChangesDescription {
    #[doc = "The previous version of the description if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct LabelEditedChangesName {
    #[doc = "The previous version of the name if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct LabelEditedChanges {
    pub color: Option<LabelEditedChangesColor>,
    pub description: Option<LabelEditedChangesDescription>,
    pub name: Option<LabelEditedChangesName>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchaseAccount {
    pub id: u64,
    pub login: String,
    pub node_id: String,
    pub organization_billing_email: String,
    #[serde(rename = "type")]
    pub ttype: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasePlan {
    pub bullets: Vec<String>,
    pub description: String,
    pub has_free_trial: bool,
    pub id: u64,
    pub monthly_price_in_cents: u64,
    pub name: String,
    pub price_model: String,
    pub unit_name: Option<String>,
    pub yearly_price_in_cents: u64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MarketplacePurchaseCancelledAction {
    #[serde(rename = "cancelled")]
    Cancelled,
}
impl ToString for MarketplacePurchaseCancelledAction {
    fn to_string(&self) -> String {
        match self {
            MarketplacePurchaseCancelledAction::Cancelled => "cancelled".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchaseCancelledMarketplacePurchase {
    #[serde(flatten)]
    pub marketplace_purchase: MarketplacePurchase,
    pub next_billing_date: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchaseCancelledSender {
    pub avatar_url: String,
    pub email: String,
    pub events_url: String,
    pub followers_url: String,
    pub following_url: String,
    pub gists_url: String,
    pub gravatar_id: String,
    pub html_url: String,
    pub id: u64,
    pub login: String,
    pub organizations_url: String,
    pub received_events_url: String,
    pub repos_url: String,
    pub site_admin: bool,
    pub starred_url: String,
    pub subscriptions_url: String,
    #[serde(rename = "type")]
    pub ttype: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MarketplacePurchaseChangedAction {
    #[serde(rename = "changed")]
    Changed,
}
impl ToString for MarketplacePurchaseChangedAction {
    fn to_string(&self) -> String {
        match self {
            MarketplacePurchaseChangedAction::Changed => "changed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchaseChangedMarketplacePurchase {
    #[serde(flatten)]
    pub marketplace_purchase: MarketplacePurchase,
    pub next_billing_date: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchaseChangedSender {
    pub avatar_url: String,
    pub email: String,
    pub events_url: String,
    pub followers_url: String,
    pub following_url: String,
    pub gists_url: String,
    pub gravatar_id: String,
    pub html_url: String,
    pub id: u64,
    pub login: String,
    pub organizations_url: String,
    pub received_events_url: String,
    pub repos_url: String,
    pub site_admin: bool,
    pub starred_url: String,
    pub subscriptions_url: String,
    #[serde(rename = "type")]
    pub ttype: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MarketplacePurchasePendingChangeAction {
    #[serde(rename = "pending_change")]
    PendingChange,
}
impl ToString for MarketplacePurchasePendingChangeAction {
    fn to_string(&self) -> String {
        match self {
            MarketplacePurchasePendingChangeAction::PendingChange => "pending_change".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasePendingChangeMarketplacePurchase {
    #[serde(flatten)]
    pub marketplace_purchase: MarketplacePurchase,
    pub next_billing_date: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasePendingChangeSender {
    pub avatar_url: String,
    pub email: String,
    pub events_url: String,
    pub followers_url: String,
    pub following_url: String,
    pub gists_url: String,
    pub gravatar_id: String,
    pub html_url: String,
    pub id: u64,
    pub login: String,
    pub organizations_url: String,
    pub received_events_url: String,
    pub repos_url: String,
    pub site_admin: bool,
    pub starred_url: String,
    pub subscriptions_url: String,
    #[serde(rename = "type")]
    pub ttype: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MarketplacePurchasePendingChangeCancelledAction {
    #[serde(rename = "pending_change_cancelled")]
    PendingChangeCancelled,
}
impl ToString for MarketplacePurchasePendingChangeCancelledAction {
    fn to_string(&self) -> String {
        match self {
            MarketplacePurchasePendingChangeCancelledAction::PendingChangeCancelled => {
                "pending_change_cancelled".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasePendingChangeCancelledMarketplacePurchase {
    #[serde(flatten)]
    pub marketplace_purchase: MarketplacePurchase,
    pub next_billing_date: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasePendingChangeCancelledSender {
    pub avatar_url: String,
    pub email: String,
    pub events_url: String,
    pub followers_url: String,
    pub following_url: String,
    pub gists_url: String,
    pub gravatar_id: String,
    pub html_url: String,
    pub id: u64,
    pub login: String,
    pub organizations_url: String,
    pub received_events_url: String,
    pub repos_url: String,
    pub site_admin: bool,
    pub starred_url: String,
    pub subscriptions_url: String,
    #[serde(rename = "type")]
    pub ttype: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MarketplacePurchasePurchasedAction {
    #[serde(rename = "purchased")]
    Purchased,
}
impl ToString for MarketplacePurchasePurchasedAction {
    fn to_string(&self) -> String {
        match self {
            MarketplacePurchasePurchasedAction::Purchased => "purchased".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasePurchasedMarketplacePurchase {
    #[serde(flatten)]
    pub marketplace_purchase: MarketplacePurchase,
    pub next_billing_date: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MarketplacePurchasePurchasedSender {
    pub avatar_url: String,
    pub email: String,
    pub events_url: String,
    pub followers_url: String,
    pub following_url: String,
    pub gists_url: String,
    pub gravatar_id: String,
    pub html_url: String,
    pub id: u64,
    pub login: String,
    pub organizations_url: String,
    pub received_events_url: String,
    pub repos_url: String,
    pub site_admin: bool,
    pub starred_url: String,
    pub subscriptions_url: String,
    #[serde(rename = "type")]
    pub ttype: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MemberAddedAction {
    #[serde(rename = "added")]
    Added,
}
impl ToString for MemberAddedAction {
    fn to_string(&self) -> String {
        match self {
            MemberAddedAction::Added => "added".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MemberAddedChangesPermissionTo {
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "admin")]
    Admin,
}
impl ToString for MemberAddedChangesPermissionTo {
    fn to_string(&self) -> String {
        match self {
            MemberAddedChangesPermissionTo::Write => "write".to_string(),
            MemberAddedChangesPermissionTo::Admin => "admin".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MemberAddedChangesPermission {
    pub to: MemberAddedChangesPermissionTo,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MemberAddedChanges {
    pub permission: Option<MemberAddedChangesPermission>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MemberEditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for MemberEditedAction {
    fn to_string(&self) -> String {
        match self {
            MemberEditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MemberEditedChangesOldPermission {
    #[doc = "The previous permissions of the collaborator if the action was edited."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MemberEditedChanges {
    pub old_permission: MemberEditedChangesOldPermission,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MemberRemovedAction {
    #[serde(rename = "removed")]
    Removed,
}
impl ToString for MemberRemovedAction {
    fn to_string(&self) -> String {
        match self {
            MemberRemovedAction::Removed => "removed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MembershipAddedAction {
    #[serde(rename = "added")]
    Added,
}
impl ToString for MembershipAddedAction {
    fn to_string(&self) -> String {
        match self {
            MembershipAddedAction::Added => "added".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MembershipAddedScope {
    #[serde(rename = "team")]
    Team,
}
impl ToString for MembershipAddedScope {
    fn to_string(&self) -> String {
        match self {
            MembershipAddedScope::Team => "team".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MembershipRemovedAction {
    #[serde(rename = "removed")]
    Removed,
}
impl ToString for MembershipRemovedAction {
    fn to_string(&self) -> String {
        match self {
            MembershipRemovedAction::Removed => "removed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MembershipRemovedScope {
    #[serde(rename = "team")]
    Team,
    #[serde(rename = "organization")]
    Organization,
}
impl ToString for MembershipRemovedScope {
    fn to_string(&self) -> String {
        match self {
            MembershipRemovedScope::Team => "team".to_string(),
            MembershipRemovedScope::Organization => "organization".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum MembershipRemovedTeam {
    Variant0(Team),
    Variant1 {
        deleted: Option<bool>,
        id: u64,
        name: String,
    },
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MetaDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for MetaDeletedAction {
    fn to_string(&self) -> String {
        match self {
            MetaDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MetaDeletedHookConfigContentType {
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "form")]
    Form,
}
impl ToString for MetaDeletedHookConfigContentType {
    fn to_string(&self) -> String {
        match self {
            MetaDeletedHookConfigContentType::Json => "json".to_string(),
            MetaDeletedHookConfigContentType::Form => "form".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MetaDeletedHookConfig {
    pub content_type: MetaDeletedHookConfigContentType,
    pub insecure_ssl: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MetaDeletedHook {
    pub active: bool,
    pub config: MetaDeletedHookConfig,
    pub created_at: String,
    pub events: WebhookEvents,
    pub id: u64,
    pub name: String,
    #[serde(rename = "type")]
    pub ttype: String,
    pub updated_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MilestoneState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for MilestoneState {
    fn to_string(&self) -> String {
        match self {
            MilestoneState::Open => "open".to_string(),
            MilestoneState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MilestoneClosedAction {
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for MilestoneClosedAction {
    fn to_string(&self) -> String {
        match self {
            MilestoneClosedAction::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MilestoneClosedMilestoneState {
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for MilestoneClosedMilestoneState {
    fn to_string(&self) -> String {
        match self {
            MilestoneClosedMilestoneState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneClosedMilestone {
    #[serde(flatten)]
    pub milestone: Milestone,
    pub closed_at: String,
    pub state: MilestoneClosedMilestoneState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MilestoneCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for MilestoneCreatedAction {
    fn to_string(&self) -> String {
        match self {
            MilestoneCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MilestoneCreatedMilestoneState {
    #[serde(rename = "open")]
    Open,
}
impl ToString for MilestoneCreatedMilestoneState {
    fn to_string(&self) -> String {
        match self {
            MilestoneCreatedMilestoneState::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneCreatedMilestone {
    #[serde(flatten)]
    pub milestone: Milestone,
    pub closed_at: (),
    pub state: MilestoneCreatedMilestoneState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MilestoneDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for MilestoneDeletedAction {
    fn to_string(&self) -> String {
        match self {
            MilestoneDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MilestoneEditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for MilestoneEditedAction {
    fn to_string(&self) -> String {
        match self {
            MilestoneEditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneEditedChangesDescription {
    #[doc = "The previous version of the description if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneEditedChangesDueOn {
    #[doc = "The previous version of the due date if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneEditedChangesTitle {
    #[doc = "The previous version of the title if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneEditedChanges {
    pub description: Option<MilestoneEditedChangesDescription>,
    pub due_on: Option<MilestoneEditedChangesDueOn>,
    pub title: Option<MilestoneEditedChangesTitle>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MilestoneOpenedAction {
    #[serde(rename = "opened")]
    Opened,
}
impl ToString for MilestoneOpenedAction {
    fn to_string(&self) -> String {
        match self {
            MilestoneOpenedAction::Opened => "opened".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum MilestoneOpenedMilestoneState {
    #[serde(rename = "open")]
    Open,
}
impl ToString for MilestoneOpenedMilestoneState {
    fn to_string(&self) -> String {
        match self {
            MilestoneOpenedMilestoneState::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MilestoneOpenedMilestone {
    #[serde(flatten)]
    pub milestone: Milestone,
    pub closed_at: (),
    pub state: MilestoneOpenedMilestoneState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum OrgBlockBlockedAction {
    #[serde(rename = "blocked")]
    Blocked,
}
impl ToString for OrgBlockBlockedAction {
    fn to_string(&self) -> String {
        match self {
            OrgBlockBlockedAction::Blocked => "blocked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum OrgBlockUnblockedAction {
    #[serde(rename = "unblocked")]
    Unblocked,
}
impl ToString for OrgBlockUnblockedAction {
    fn to_string(&self) -> String {
        match self {
            OrgBlockUnblockedAction::Unblocked => "unblocked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum OrganizationDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for OrganizationDeletedAction {
    fn to_string(&self) -> String {
        match self {
            OrganizationDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum OrganizationMemberAddedAction {
    #[serde(rename = "member_added")]
    MemberAdded,
}
impl ToString for OrganizationMemberAddedAction {
    fn to_string(&self) -> String {
        match self {
            OrganizationMemberAddedAction::MemberAdded => "member_added".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum OrganizationMemberInvitedAction {
    #[serde(rename = "member_invited")]
    MemberInvited,
}
impl ToString for OrganizationMemberInvitedAction {
    fn to_string(&self) -> String {
        match self {
            OrganizationMemberInvitedAction::MemberInvited => "member_invited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OrganizationMemberInvitedInvitation {
    pub created_at: chrono::DateTime<chrono::offset::Utc>,
    pub email: Option<String>,
    pub failed_at: Option<chrono::DateTime<chrono::offset::Utc>>,
    pub failed_reason: Option<String>,
    pub id: f64,
    pub invitation_teams_url: String,
    pub inviter: User,
    pub login: String,
    pub node_id: String,
    pub role: String,
    pub team_count: f64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum OrganizationMemberRemovedAction {
    #[serde(rename = "member_removed")]
    MemberRemoved,
}
impl ToString for OrganizationMemberRemovedAction {
    fn to_string(&self) -> String {
        match self {
            OrganizationMemberRemovedAction::MemberRemoved => "member_removed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum OrganizationRenamedAction {
    #[serde(rename = "renamed")]
    Renamed,
}
impl ToString for OrganizationRenamedAction {
    fn to_string(&self) -> String {
        match self {
            OrganizationRenamedAction::Renamed => "renamed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PackagePublishedAction {
    #[serde(rename = "published")]
    Published,
}
impl ToString for PackagePublishedAction {
    fn to_string(&self) -> String {
        match self {
            PackagePublishedAction::Published => "published".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackagePublishedPackagePackageVersionPackageFilesItem {
    pub content_type: String,
    pub created_at: String,
    pub download_url: String,
    pub id: u64,
    #[serde(rename = "md5")]
    pub md_5: String,
    pub name: String,
    #[serde(rename = "sha1")]
    pub sha_1: String,
    #[serde(rename = "sha256")]
    pub sha_256: String,
    pub size: u64,
    pub state: String,
    pub updated_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackagePublishedPackagePackageVersionRelease {
    pub author: User,
    pub created_at: String,
    pub draft: bool,
    pub html_url: String,
    pub id: u64,
    pub name: String,
    pub prerelease: bool,
    pub published_at: String,
    pub tag_name: String,
    pub target_commitish: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackagePublishedPackagePackageVersion {
    pub author: User,
    pub body: String,
    pub body_html: String,
    pub created_at: String,
    pub description: String,
    pub docker_metadata: Vec<serde_json::Value>,
    pub draft: bool,
    pub html_url: String,
    pub id: u64,
    pub installation_command: String,
    pub manifest: String,
    pub metadata: Vec<serde_json::Value>,
    pub name: String,
    pub package_files: Vec<PackagePublishedPackagePackageVersionPackageFilesItem>,
    pub prerelease: bool,
    pub release: PackagePublishedPackagePackageVersionRelease,
    pub source_url: String,
    pub summary: String,
    pub tag_name: String,
    pub target_commitish: String,
    pub target_oid: String,
    pub updated_at: String,
    pub version: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackagePublishedPackageRegistry {
    pub about_url: String,
    pub name: String,
    #[serde(rename = "type")]
    pub ttype: String,
    pub url: String,
    pub vendor: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackagePublishedPackage {
    pub created_at: String,
    pub description: Option<String>,
    pub ecosystem: String,
    pub html_url: String,
    pub id: u64,
    pub name: String,
    pub namespace: String,
    pub owner: User,
    pub package_type: String,
    pub package_version: PackagePublishedPackagePackageVersion,
    pub registry: PackagePublishedPackageRegistry,
    pub updated_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PackageUpdatedAction {
    #[serde(rename = "updated")]
    Updated,
}
impl ToString for PackageUpdatedAction {
    fn to_string(&self) -> String {
        match self {
            PackageUpdatedAction::Updated => "updated".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackageUpdatedPackagePackageVersionPackageFilesItem {
    pub content_type: String,
    pub created_at: String,
    pub download_url: String,
    pub id: u64,
    #[serde(rename = "md5")]
    pub md_5: String,
    pub name: String,
    #[serde(rename = "sha1")]
    pub sha_1: String,
    #[serde(rename = "sha256")]
    pub sha_256: String,
    pub size: u64,
    pub state: String,
    pub updated_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackageUpdatedPackagePackageVersionRelease {
    pub author: User,
    pub created_at: String,
    pub draft: bool,
    pub html_url: String,
    pub id: u64,
    pub name: String,
    pub prerelease: bool,
    pub published_at: String,
    pub tag_name: String,
    pub target_commitish: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackageUpdatedPackagePackageVersion {
    pub author: User,
    pub body: String,
    pub body_html: String,
    pub created_at: String,
    pub description: String,
    pub docker_metadata: Vec<serde_json::Value>,
    pub draft: bool,
    pub html_url: String,
    pub id: u64,
    pub installation_command: String,
    pub manifest: String,
    pub metadata: Vec<serde_json::Value>,
    pub name: String,
    pub package_files: Vec<PackageUpdatedPackagePackageVersionPackageFilesItem>,
    pub prerelease: bool,
    pub release: PackageUpdatedPackagePackageVersionRelease,
    pub source_url: String,
    pub summary: String,
    pub tag_name: String,
    pub target_commitish: String,
    pub target_oid: String,
    pub updated_at: String,
    pub version: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackageUpdatedPackageRegistry {
    pub about_url: String,
    pub name: String,
    #[serde(rename = "type")]
    pub ttype: String,
    pub url: String,
    pub vendor: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackageUpdatedPackage {
    pub created_at: String,
    pub description: Option<String>,
    pub ecosystem: String,
    pub html_url: String,
    pub id: u64,
    pub name: String,
    pub namespace: String,
    pub owner: User,
    pub package_type: String,
    pub package_version: PackageUpdatedPackagePackageVersion,
    pub registry: PackageUpdatedPackageRegistry,
    pub updated_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PageBuildEventBuildError {
    pub message: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PageBuildEventBuild {
    pub commit: String,
    pub created_at: String,
    pub duration: u64,
    pub error: PageBuildEventBuildError,
    pub pusher: User,
    pub status: String,
    pub updated_at: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PingEventHookConfigContentType {
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "form")]
    Form,
}
impl ToString for PingEventHookConfigContentType {
    fn to_string(&self) -> String {
        match self {
            PingEventHookConfigContentType::Json => "json".to_string(),
            PingEventHookConfigContentType::Form => "form".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PingEventHookConfig {
    pub content_type: PingEventHookConfigContentType,
    pub insecure_ssl: String,
    pub secret: Option<String>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PingEventHookLastResponse {
    pub code: (),
    pub message: (),
    pub status: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PingEventHook {
    pub active: bool,
    #[doc = "When you register a new GitHub App, GitHub sends a ping event to the **webhook URL** you specified during registration. The event contains the `app_id`, which is required for [authenticating](https://docs.github.com/en/apps/building-integrations/setting-up-and-registering-github-apps/about-authentication-options-for-github-apps) an app."]
    pub app_id: Option<u64>,
    pub config: PingEventHookConfig,
    pub created_at: String,
    pub events: WebhookEvents,
    pub id: u64,
    pub last_response: Option<PingEventHookLastResponse>,
    pub name: String,
    pub ping_url: String,
    pub test_url: Option<String>,
    #[serde(rename = "type")]
    pub ttype: String,
    pub updated_at: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for ProjectState {
    fn to_string(&self) -> String {
        match self {
            ProjectState::Open => "open".to_string(),
            ProjectState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectClosedAction {
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for ProjectClosedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectClosedAction::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for ProjectCreatedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for ProjectDeletedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectEditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for ProjectEditedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectEditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectEditedChangesBody {
    #[doc = "The previous version of the body if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectEditedChangesName {
    #[doc = "The changes to the project if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectEditedChanges {
    pub body: Option<ProjectEditedChangesBody>,
    pub name: Option<ProjectEditedChangesName>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectReopenedAction {
    #[serde(rename = "reopened")]
    Reopened,
}
impl ToString for ProjectReopenedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectReopenedAction::Reopened => "reopened".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectCardConvertedAction {
    #[serde(rename = "converted")]
    Converted,
}
impl ToString for ProjectCardConvertedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectCardConvertedAction::Converted => "converted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardConvertedChangesNote {
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardConvertedChanges {
    pub note: ProjectCardConvertedChangesNote,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectCardCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for ProjectCardCreatedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectCardCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectCardDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for ProjectCardDeletedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectCardDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectCardEditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for ProjectCardEditedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectCardEditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardEditedChangesNote {
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardEditedChanges {
    pub note: ProjectCardEditedChangesNote,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectCardMovedAction {
    #[serde(rename = "moved")]
    Moved,
}
impl ToString for ProjectCardMovedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectCardMovedAction::Moved => "moved".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardMovedChangesColumnId {
    pub from: u64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardMovedChanges {
    pub column_id: ProjectCardMovedChangesColumnId,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectCardMovedProjectCard {
    #[serde(flatten)]
    pub project_card: ProjectCard,
    pub after_id: Option<f64>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectColumnCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for ProjectColumnCreatedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectColumnCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectColumnDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for ProjectColumnDeletedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectColumnDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectColumnEditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for ProjectColumnEditedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectColumnEditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectColumnEditedChangesName {
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProjectColumnEditedChanges {
    pub name: Option<ProjectColumnEditedChangesName>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ProjectColumnMovedAction {
    #[serde(rename = "moved")]
    Moved,
}
impl ToString for ProjectColumnMovedAction {
    fn to_string(&self) -> String {
        match self {
            ProjectColumnMovedAction::Moved => "moved".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PublicEventRepository {
    #[serde(flatten)]
    pub repository: Repository,
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestLinks {
    pub comments: Link,
    pub commits: Link,
    pub html: Link,
    pub issue: Link,
    pub review_comment: Link,
    pub review_comments: Link,
    #[serde(rename = "self")]
    pub sself: Link,
    pub statuses: Link,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestActiveLockReason {
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "off-topic")]
    OffTopic,
    #[serde(rename = "too heated")]
    TooHeated,
    #[serde(rename = "spam")]
    Spam,
}
impl ToString for PullRequestActiveLockReason {
    fn to_string(&self) -> String {
        match self {
            PullRequestActiveLockReason::Resolved => "resolved".to_string(),
            PullRequestActiveLockReason::OffTopic => "off-topic".to_string(),
            PullRequestActiveLockReason::TooHeated => "too heated".to_string(),
            PullRequestActiveLockReason::Spam => "spam".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestBase {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestHead {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestRequestedReviewersItem {
    User(User),
    Team(Team),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for PullRequestState {
    fn to_string(&self) -> String {
        match self {
            PullRequestState::Open => "open".to_string(),
            PullRequestState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentLinks {
    pub html: Link,
    pub pull_request: Link,
    #[serde(rename = "self")]
    pub sself: Link,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentSide {
    #[serde(rename = "LEFT")]
    Left,
    #[serde(rename = "RIGHT")]
    Right,
}
impl ToString for PullRequestReviewCommentSide {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentSide::Left => "LEFT".to_string(),
            PullRequestReviewCommentSide::Right => "RIGHT".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentStartSide {
    #[serde(rename = "LEFT")]
    Left,
    #[serde(rename = "RIGHT")]
    Right,
}
impl ToString for PullRequestReviewCommentStartSide {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentStartSide::Left => "LEFT".to_string(),
            PullRequestReviewCommentStartSide::Right => "RIGHT".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestAssignedAction {
    #[serde(rename = "assigned")]
    Assigned,
}
impl ToString for PullRequestAssignedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestAssignedAction::Assigned => "assigned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestAutoMergeDisabledAction {
    #[serde(rename = "auto_merge_disabled")]
    AutoMergeDisabled,
}
impl ToString for PullRequestAutoMergeDisabledAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestAutoMergeDisabledAction::AutoMergeDisabled => {
                "auto_merge_disabled".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestAutoMergeEnabledAction {
    #[serde(rename = "auto_merge_enabled")]
    AutoMergeEnabled,
}
impl ToString for PullRequestAutoMergeEnabledAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestAutoMergeEnabledAction::AutoMergeEnabled => "auto_merge_enabled".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestClosedAction {
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for PullRequestClosedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestClosedAction::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestClosedPullRequestState {
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for PullRequestClosedPullRequestState {
    fn to_string(&self) -> String {
        match self {
            PullRequestClosedPullRequestState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestClosedPullRequest {
    #[serde(flatten)]
    pub pull_request: PullRequest,
    pub closed_at: chrono::DateTime<chrono::offset::Utc>,
    pub merged: bool,
    #[doc = "State of this Pull Request. Either `open` or `closed`."]
    pub state: PullRequestClosedPullRequestState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestConvertedToDraftAction {
    #[serde(rename = "converted_to_draft")]
    ConvertedToDraft,
}
impl ToString for PullRequestConvertedToDraftAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestConvertedToDraftAction::ConvertedToDraft => "converted_to_draft".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestConvertedToDraftPullRequest {
    #[serde(flatten)]
    pub pull_request: PullRequest,
    pub closed_at: (),
    #[doc = "Indicates whether or not the pull request is a draft."]
    pub draft: bool,
    pub merged: bool,
    pub merged_at: (),
    pub merged_by: (),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestEditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for PullRequestEditedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestEditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestEditedChangesBody {
    #[doc = "The previous version of the body if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestEditedChangesTitle {
    #[doc = "The previous version of the title if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestEditedChanges {
    pub body: Option<PullRequestEditedChangesBody>,
    pub title: Option<PullRequestEditedChangesTitle>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestLabeledAction {
    #[serde(rename = "labeled")]
    Labeled,
}
impl ToString for PullRequestLabeledAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestLabeledAction::Labeled => "labeled".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestLockedAction {
    #[serde(rename = "locked")]
    Locked,
}
impl ToString for PullRequestLockedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestLockedAction::Locked => "locked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestOpenedAction {
    #[serde(rename = "opened")]
    Opened,
}
impl ToString for PullRequestOpenedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestOpenedAction::Opened => "opened".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestOpenedPullRequestState {
    #[serde(rename = "open")]
    Open,
}
impl ToString for PullRequestOpenedPullRequestState {
    fn to_string(&self) -> String {
        match self {
            PullRequestOpenedPullRequestState::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestOpenedPullRequest {
    #[serde(flatten)]
    pub pull_request: PullRequest,
    pub active_lock_reason: (),
    pub closed_at: (),
    pub merge_commit_sha: (),
    pub merged_at: (),
    pub merged_by: (),
    pub state: PullRequestOpenedPullRequestState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReadyForReviewAction {
    #[serde(rename = "ready_for_review")]
    ReadyForReview,
}
impl ToString for PullRequestReadyForReviewAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestReadyForReviewAction::ReadyForReview => "ready_for_review".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReadyForReviewPullRequestState {
    #[serde(rename = "open")]
    Open,
}
impl ToString for PullRequestReadyForReviewPullRequestState {
    fn to_string(&self) -> String {
        match self {
            PullRequestReadyForReviewPullRequestState::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReadyForReviewPullRequest {
    #[serde(flatten)]
    pub pull_request: PullRequest,
    pub closed_at: (),
    #[doc = "Indicates whether or not the pull request is a draft."]
    pub draft: bool,
    pub merged: bool,
    pub merged_at: (),
    pub merged_by: (),
    pub state: PullRequestReadyForReviewPullRequestState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReopenedAction {
    #[serde(rename = "reopened")]
    Reopened,
}
impl ToString for PullRequestReopenedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestReopenedAction::Reopened => "reopened".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReopenedPullRequestState {
    #[serde(rename = "open")]
    Open,
}
impl ToString for PullRequestReopenedPullRequestState {
    fn to_string(&self) -> String {
        match self {
            PullRequestReopenedPullRequestState::Open => "open".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReopenedPullRequest {
    #[serde(flatten)]
    pub pull_request: PullRequest,
    pub closed_at: (),
    pub merge_commit_sha: (),
    pub merged: bool,
    pub merged_at: (),
    pub merged_by: (),
    pub state: PullRequestReopenedPullRequestState,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewRequestRemovedVariant0Action {
    #[serde(rename = "review_request_removed")]
    ReviewRequestRemoved,
}
impl ToString for PullRequestReviewRequestRemovedVariant0Action {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewRequestRemovedVariant0Action::ReviewRequestRemoved => {
                "review_request_removed".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewRequestRemovedVariant1Action {
    #[serde(rename = "review_request_removed")]
    ReviewRequestRemoved,
}
impl ToString for PullRequestReviewRequestRemovedVariant1Action {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewRequestRemovedVariant1Action::ReviewRequestRemoved => {
                "review_request_removed".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewRequestedVariant0Action {
    #[serde(rename = "review_requested")]
    ReviewRequested,
}
impl ToString for PullRequestReviewRequestedVariant0Action {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewRequestedVariant0Action::ReviewRequested => {
                "review_requested".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewRequestedVariant1Action {
    #[serde(rename = "review_requested")]
    ReviewRequested,
}
impl ToString for PullRequestReviewRequestedVariant1Action {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewRequestedVariant1Action::ReviewRequested => {
                "review_requested".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestSynchronizeAction {
    #[serde(rename = "synchronize")]
    Synchronize,
}
impl ToString for PullRequestSynchronizeAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestSynchronizeAction::Synchronize => "synchronize".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestUnassignedAction {
    #[serde(rename = "unassigned")]
    Unassigned,
}
impl ToString for PullRequestUnassignedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestUnassignedAction::Unassigned => "unassigned".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestUnlabeledAction {
    #[serde(rename = "unlabeled")]
    Unlabeled,
}
impl ToString for PullRequestUnlabeledAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestUnlabeledAction::Unlabeled => "unlabeled".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestUnlockedAction {
    #[serde(rename = "unlocked")]
    Unlocked,
}
impl ToString for PullRequestUnlockedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestUnlockedAction::Unlocked => "unlocked".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewDismissedAction {
    #[serde(rename = "dismissed")]
    Dismissed,
}
impl ToString for PullRequestReviewDismissedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewDismissedAction::Dismissed => "dismissed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewDismissedReviewLinks {
    pub html: Link,
    pub pull_request: Link,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewDismissedReviewState {
    #[serde(rename = "dismissed")]
    Dismissed,
}
impl ToString for PullRequestReviewDismissedReviewState {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewDismissedReviewState::Dismissed => "dismissed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewDismissedReview {
    pub author_association: AuthorAssociation,
    #[doc = "The text of the review."]
    pub body: Option<String>,
    #[doc = "A commit SHA for the review."]
    pub commit_id: String,
    pub html_url: String,
    #[doc = "Unique identifier of the review"]
    pub id: u64,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewDismissedReviewLinks,
    pub node_id: String,
    pub pull_request_url: String,
    pub state: PullRequestReviewDismissedReviewState,
    pub submitted_at: chrono::DateTime<chrono::offset::Utc>,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewEditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for PullRequestReviewEditedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewEditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewEditedChangesBody {
    #[doc = "The previous version of the body if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewEditedChanges {
    pub body: Option<PullRequestReviewEditedChangesBody>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewEditedReviewLinks {
    pub html: Link,
    pub pull_request: Link,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewEditedReview {
    pub author_association: AuthorAssociation,
    #[doc = "The text of the review."]
    pub body: Option<String>,
    #[doc = "A commit SHA for the review."]
    pub commit_id: String,
    pub html_url: String,
    #[doc = "Unique identifier of the review"]
    pub id: u64,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewEditedReviewLinks,
    pub node_id: String,
    pub pull_request_url: String,
    pub state: String,
    pub submitted_at: chrono::DateTime<chrono::offset::Utc>,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewSubmittedAction {
    #[serde(rename = "submitted")]
    Submitted,
}
impl ToString for PullRequestReviewSubmittedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewSubmittedAction::Submitted => "submitted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewSubmittedReviewLinks {
    pub html: Link,
    pub pull_request: Link,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewSubmittedReview {
    pub author_association: AuthorAssociation,
    #[doc = "The text of the review."]
    pub body: Option<String>,
    #[doc = "A commit SHA for the review."]
    pub commit_id: String,
    pub html_url: String,
    #[doc = "Unique identifier of the review"]
    pub id: u64,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewSubmittedReviewLinks,
    pub node_id: String,
    pub pull_request_url: String,
    pub state: String,
    pub submitted_at: chrono::DateTime<chrono::offset::Utc>,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for PullRequestReviewCommentCreatedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentCreatedPullRequestLinks {
    pub comments: Link,
    pub commits: Link,
    pub html: Link,
    pub issue: Link,
    pub review_comment: Link,
    pub review_comments: Link,
    #[serde(rename = "self")]
    pub sself: Link,
    pub statuses: Link,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentCreatedPullRequestActiveLockReason {
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "off-topic")]
    OffTopic,
    #[serde(rename = "too heated")]
    TooHeated,
    #[serde(rename = "spam")]
    Spam,
}
impl ToString for PullRequestReviewCommentCreatedPullRequestActiveLockReason {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentCreatedPullRequestActiveLockReason::Resolved => {
                "resolved".to_string()
            }
            PullRequestReviewCommentCreatedPullRequestActiveLockReason::OffTopic => {
                "off-topic".to_string()
            }
            PullRequestReviewCommentCreatedPullRequestActiveLockReason::TooHeated => {
                "too heated".to_string()
            }
            PullRequestReviewCommentCreatedPullRequestActiveLockReason::Spam => "spam".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentCreatedPullRequestBase {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentCreatedPullRequestHead {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestReviewCommentCreatedPullRequestRequestedReviewersItem {
    User(User),
    Team(Team),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentCreatedPullRequestState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for PullRequestReviewCommentCreatedPullRequestState {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentCreatedPullRequestState::Open => "open".to_string(),
            PullRequestReviewCommentCreatedPullRequestState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentCreatedPullRequest {
    pub active_lock_reason: Option<PullRequestReviewCommentCreatedPullRequestActiveLockReason>,
    pub assignee: Option<User>,
    pub assignees: Vec<User>,
    pub author_association: AuthorAssociation,
    pub auto_merge: Option<()>,
    pub base: PullRequestReviewCommentCreatedPullRequestBase,
    pub body: String,
    pub closed_at: Option<String>,
    pub comments_url: String,
    pub commits_url: String,
    pub created_at: String,
    pub diff_url: String,
    pub draft: Option<bool>,
    pub head: PullRequestReviewCommentCreatedPullRequestHead,
    pub html_url: String,
    pub id: u64,
    pub issue_url: String,
    pub labels: Vec<Label>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    pub locked: bool,
    pub merge_commit_sha: Option<String>,
    pub merged_at: Option<String>,
    pub milestone: Option<Milestone>,
    pub node_id: String,
    pub number: u64,
    pub patch_url: String,
    pub requested_reviewers: Vec<PullRequestReviewCommentCreatedPullRequestRequestedReviewersItem>,
    pub requested_teams: Vec<Team>,
    pub review_comment_url: String,
    pub review_comments_url: String,
    pub state: PullRequestReviewCommentCreatedPullRequestState,
    pub statuses_url: String,
    pub title: String,
    pub updated_at: String,
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for PullRequestReviewCommentDeletedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentDeletedPullRequestLinks {
    pub comments: Link,
    pub commits: Link,
    pub html: Link,
    pub issue: Link,
    pub review_comment: Link,
    pub review_comments: Link,
    #[serde(rename = "self")]
    pub sself: Link,
    pub statuses: Link,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentDeletedPullRequestActiveLockReason {
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "off-topic")]
    OffTopic,
    #[serde(rename = "too heated")]
    TooHeated,
    #[serde(rename = "spam")]
    Spam,
}
impl ToString for PullRequestReviewCommentDeletedPullRequestActiveLockReason {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentDeletedPullRequestActiveLockReason::Resolved => {
                "resolved".to_string()
            }
            PullRequestReviewCommentDeletedPullRequestActiveLockReason::OffTopic => {
                "off-topic".to_string()
            }
            PullRequestReviewCommentDeletedPullRequestActiveLockReason::TooHeated => {
                "too heated".to_string()
            }
            PullRequestReviewCommentDeletedPullRequestActiveLockReason::Spam => "spam".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentDeletedPullRequestBase {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentDeletedPullRequestHead {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestReviewCommentDeletedPullRequestRequestedReviewersItem {
    User(User),
    Team(Team),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentDeletedPullRequestState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for PullRequestReviewCommentDeletedPullRequestState {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentDeletedPullRequestState::Open => "open".to_string(),
            PullRequestReviewCommentDeletedPullRequestState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentDeletedPullRequest {
    pub active_lock_reason: Option<PullRequestReviewCommentDeletedPullRequestActiveLockReason>,
    pub assignee: Option<User>,
    pub assignees: Vec<User>,
    pub author_association: AuthorAssociation,
    pub auto_merge: Option<()>,
    pub base: PullRequestReviewCommentDeletedPullRequestBase,
    pub body: String,
    pub closed_at: Option<String>,
    pub comments_url: String,
    pub commits_url: String,
    pub created_at: String,
    pub diff_url: String,
    pub draft: Option<bool>,
    pub head: PullRequestReviewCommentDeletedPullRequestHead,
    pub html_url: String,
    pub id: u64,
    pub issue_url: String,
    pub labels: Vec<Label>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentDeletedPullRequestLinks,
    pub locked: bool,
    pub merge_commit_sha: Option<String>,
    pub merged_at: Option<String>,
    pub milestone: Option<Milestone>,
    pub node_id: String,
    pub number: u64,
    pub patch_url: String,
    pub requested_reviewers: Vec<PullRequestReviewCommentDeletedPullRequestRequestedReviewersItem>,
    pub requested_teams: Vec<Team>,
    pub review_comment_url: String,
    pub review_comments_url: String,
    pub state: PullRequestReviewCommentDeletedPullRequestState,
    pub statuses_url: String,
    pub title: String,
    pub updated_at: String,
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentEditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for PullRequestReviewCommentEditedAction {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentEditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentEditedChangesBody {
    #[doc = "The previous version of the body."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentEditedChanges {
    pub body: Option<PullRequestReviewCommentEditedChangesBody>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentEditedPullRequestLinks {
    pub comments: Link,
    pub commits: Link,
    pub html: Link,
    pub issue: Link,
    pub review_comment: Link,
    pub review_comments: Link,
    #[serde(rename = "self")]
    pub sself: Link,
    pub statuses: Link,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentEditedPullRequestActiveLockReason {
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "off-topic")]
    OffTopic,
    #[serde(rename = "too heated")]
    TooHeated,
    #[serde(rename = "spam")]
    Spam,
}
impl ToString for PullRequestReviewCommentEditedPullRequestActiveLockReason {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentEditedPullRequestActiveLockReason::Resolved => {
                "resolved".to_string()
            }
            PullRequestReviewCommentEditedPullRequestActiveLockReason::OffTopic => {
                "off-topic".to_string()
            }
            PullRequestReviewCommentEditedPullRequestActiveLockReason::TooHeated => {
                "too heated".to_string()
            }
            PullRequestReviewCommentEditedPullRequestActiveLockReason::Spam => "spam".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentEditedPullRequestBase {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentEditedPullRequestHead {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum PullRequestReviewCommentEditedPullRequestRequestedReviewersItem {
    User(User),
    Team(Team),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum PullRequestReviewCommentEditedPullRequestState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for PullRequestReviewCommentEditedPullRequestState {
    fn to_string(&self) -> String {
        match self {
            PullRequestReviewCommentEditedPullRequestState::Open => "open".to_string(),
            PullRequestReviewCommentEditedPullRequestState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PullRequestReviewCommentEditedPullRequest {
    pub active_lock_reason: Option<PullRequestReviewCommentEditedPullRequestActiveLockReason>,
    pub assignee: Option<User>,
    pub assignees: Vec<User>,
    pub author_association: AuthorAssociation,
    pub auto_merge: Option<()>,
    pub base: PullRequestReviewCommentEditedPullRequestBase,
    pub body: String,
    pub closed_at: Option<String>,
    pub comments_url: String,
    pub commits_url: String,
    pub created_at: String,
    pub diff_url: String,
    pub draft: Option<bool>,
    pub head: PullRequestReviewCommentEditedPullRequestHead,
    pub html_url: String,
    pub id: u64,
    pub issue_url: String,
    pub labels: Vec<Label>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentEditedPullRequestLinks,
    pub locked: bool,
    pub merge_commit_sha: Option<String>,
    pub merged_at: Option<String>,
    pub milestone: Option<Milestone>,
    pub node_id: String,
    pub number: u64,
    pub patch_url: String,
    pub requested_reviewers: Vec<PullRequestReviewCommentEditedPullRequestRequestedReviewersItem>,
    pub requested_teams: Vec<Team>,
    pub review_comment_url: String,
    pub review_comments_url: String,
    pub state: PullRequestReviewCommentEditedPullRequestState,
    pub statuses_url: String,
    pub title: String,
    pub updated_at: String,
    pub url: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ReleaseCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for ReleaseCreatedAction {
    fn to_string(&self) -> String {
        match self {
            ReleaseCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ReleaseDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for ReleaseDeletedAction {
    fn to_string(&self) -> String {
        match self {
            ReleaseDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ReleaseEditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for ReleaseEditedAction {
    fn to_string(&self) -> String {
        match self {
            ReleaseEditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleaseEditedChangesBody {
    #[doc = "The previous version of the body if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleaseEditedChangesName {
    #[doc = "The previous version of the name if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleaseEditedChanges {
    pub body: Option<ReleaseEditedChangesBody>,
    pub name: Option<ReleaseEditedChangesName>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ReleasePrereleasedAction {
    #[serde(rename = "prereleased")]
    Prereleased,
}
impl ToString for ReleasePrereleasedAction {
    fn to_string(&self) -> String {
        match self {
            ReleasePrereleasedAction::Prereleased => "prereleased".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleasePrereleasedRelease {
    #[serde(flatten)]
    pub release: Release,
    #[doc = "Whether the release is identified as a prerelease or a full release."]
    pub prerelease: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ReleasePublishedAction {
    #[serde(rename = "published")]
    Published,
}
impl ToString for ReleasePublishedAction {
    fn to_string(&self) -> String {
        match self {
            ReleasePublishedAction::Published => "published".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleasePublishedRelease {
    #[serde(flatten)]
    pub release: Release,
    pub published_at: chrono::DateTime<chrono::offset::Utc>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ReleaseReleasedAction {
    #[serde(rename = "released")]
    Released,
}
impl ToString for ReleaseReleasedAction {
    fn to_string(&self) -> String {
        match self {
            ReleaseReleasedAction::Released => "released".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ReleaseUnpublishedAction {
    #[serde(rename = "unpublished")]
    Unpublished,
}
impl ToString for ReleaseUnpublishedAction {
    fn to_string(&self) -> String {
        match self {
            ReleaseUnpublishedAction::Unpublished => "unpublished".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ReleaseUnpublishedRelease {
    #[serde(flatten)]
    pub release: Release,
    pub published_at: (),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ReleaseAssetState {
    #[serde(rename = "uploaded")]
    Uploaded,
}
impl ToString for ReleaseAssetState {
    fn to_string(&self) -> String {
        match self {
            ReleaseAssetState::Uploaded => "uploaded".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum RepositoryCreatedAt {
    Variant0(u64),
    Variant1(chrono::DateTime<chrono::offset::Utc>),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryPermissions {
    pub admin: bool,
    pub maintain: Option<bool>,
    pub pull: bool,
    pub push: bool,
    pub triage: Option<bool>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum RepositoryPushedAt {
    Variant0(u64),
    Variant1(chrono::DateTime<chrono::offset::Utc>),
    Variant2,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryArchivedAction {
    #[serde(rename = "archived")]
    Archived,
}
impl ToString for RepositoryArchivedAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryArchivedAction::Archived => "archived".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryArchivedRepository {
    #[serde(flatten)]
    pub repository: Repository,
    #[doc = "Whether the repository is archived."]
    pub archived: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for RepositoryCreatedAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for RepositoryDeletedAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryEditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for RepositoryEditedAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryEditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryEditedChangesDefaultBranch {
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryEditedChangesDescription {
    pub from: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryEditedChangesHomepage {
    pub from: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryEditedChanges {
    pub default_branch: Option<RepositoryEditedChangesDefaultBranch>,
    pub description: Option<RepositoryEditedChangesDescription>,
    pub homepage: Option<RepositoryEditedChangesHomepage>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryPrivatizedAction {
    #[serde(rename = "privatized")]
    Privatized,
}
impl ToString for RepositoryPrivatizedAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryPrivatizedAction::Privatized => "privatized".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryPrivatizedRepository {
    #[serde(flatten)]
    pub repository: Repository,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryPublicizedAction {
    #[serde(rename = "publicized")]
    Publicized,
}
impl ToString for RepositoryPublicizedAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryPublicizedAction::Publicized => "publicized".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryPublicizedRepository {
    #[serde(flatten)]
    pub repository: Repository,
    #[doc = "Whether the repository is private or public."]
    pub private: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryRenamedAction {
    #[serde(rename = "renamed")]
    Renamed,
}
impl ToString for RepositoryRenamedAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryRenamedAction::Renamed => "renamed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryRenamedChangesRepositoryName {
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryRenamedChangesRepository {
    pub name: RepositoryRenamedChangesRepositoryName,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryRenamedChanges {
    pub repository: RepositoryRenamedChangesRepository,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryTransferredAction {
    #[serde(rename = "transferred")]
    Transferred,
}
impl ToString for RepositoryTransferredAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryTransferredAction::Transferred => "transferred".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryTransferredChangesOwnerFrom {
    pub user: Option<User>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryTransferredChangesOwner {
    pub from: RepositoryTransferredChangesOwnerFrom,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryTransferredChanges {
    pub owner: RepositoryTransferredChangesOwner,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryUnarchivedAction {
    #[serde(rename = "unarchived")]
    Unarchived,
}
impl ToString for RepositoryUnarchivedAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryUnarchivedAction::Unarchived => "unarchived".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryUnarchivedRepository {
    #[serde(flatten)]
    pub repository: Repository,
    #[doc = "Whether the repository is archived."]
    pub archived: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryDispatchOnDemandTestAction {
    #[serde(rename = "on-demand-test")]
    OnDemandTest,
}
impl ToString for RepositoryDispatchOnDemandTestAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryDispatchOnDemandTestAction::OnDemandTest => "on-demand-test".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryImportEventStatus {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "failure")]
    Failure,
}
impl ToString for RepositoryImportEventStatus {
    fn to_string(&self) -> String {
        match self {
            RepositoryImportEventStatus::Success => "success".to_string(),
            RepositoryImportEventStatus::Cancelled => "cancelled".to_string(),
            RepositoryImportEventStatus::Failure => "failure".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryVulnerabilityAlertCreateAction {
    #[serde(rename = "create")]
    Create,
}
impl ToString for RepositoryVulnerabilityAlertCreateAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryVulnerabilityAlertCreateAction::Create => "create".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryVulnerabilityAlertCreateAlert {
    pub affected_package_name: String,
    pub affected_range: String,
    pub created_at: Option<String>,
    pub dismiss_reason: Option<String>,
    pub dismissed_at: Option<String>,
    pub dismisser: Option<User>,
    pub external_identifier: String,
    pub external_reference: String,
    pub fixed_in: String,
    pub ghsa_id: Option<String>,
    pub id: u64,
    pub severity: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryVulnerabilityAlertDismissAction {
    #[serde(rename = "dismiss")]
    Dismiss,
}
impl ToString for RepositoryVulnerabilityAlertDismissAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryVulnerabilityAlertDismissAction::Dismiss => "dismiss".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryVulnerabilityAlertDismissAlert {
    pub affected_package_name: String,
    pub affected_range: String,
    pub created_at: Option<String>,
    pub dismiss_reason: String,
    pub dismissed_at: String,
    pub dismisser: User,
    pub external_identifier: String,
    pub external_reference: String,
    pub fixed_in: String,
    pub ghsa_id: Option<String>,
    pub id: u64,
    pub severity: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum RepositoryVulnerabilityAlertResolveAction {
    #[serde(rename = "resolve")]
    Resolve,
}
impl ToString for RepositoryVulnerabilityAlertResolveAction {
    fn to_string(&self) -> String {
        match self {
            RepositoryVulnerabilityAlertResolveAction::Resolve => "resolve".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RepositoryVulnerabilityAlertResolveAlert {
    pub affected_package_name: String,
    pub affected_range: String,
    pub created_at: Option<String>,
    pub dismiss_reason: Option<String>,
    pub dismissed_at: Option<String>,
    pub dismisser: Option<User>,
    pub external_identifier: String,
    pub external_reference: String,
    pub fixed_in: String,
    pub ghsa_id: Option<String>,
    pub id: u64,
    pub severity: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SecretScanningAlertCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for SecretScanningAlertCreatedAction {
    fn to_string(&self) -> String {
        match self {
            SecretScanningAlertCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecretScanningAlertCreatedAlert {
    pub number: u64,
    pub resolution: (),
    pub resolved_at: (),
    pub resolved_by: (),
    pub secret_type: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SecretScanningAlertReopenedAction {
    #[serde(rename = "reopened")]
    Reopened,
}
impl ToString for SecretScanningAlertReopenedAction {
    fn to_string(&self) -> String {
        match self {
            SecretScanningAlertReopenedAction::Reopened => "reopened".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecretScanningAlertReopenedAlert {
    pub number: u64,
    pub resolution: (),
    pub resolved_at: (),
    pub resolved_by: (),
    pub secret_type: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SecretScanningAlertResolvedAction {
    #[serde(rename = "resolved")]
    Resolved,
}
impl ToString for SecretScanningAlertResolvedAction {
    fn to_string(&self) -> String {
        match self {
            SecretScanningAlertResolvedAction::Resolved => "resolved".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SecretScanningAlertResolvedAlertResolution {
    #[serde(rename = "false_positive")]
    FalsePositive,
    #[serde(rename = "wontfix")]
    Wontfix,
    #[serde(rename = "revoked")]
    Revoked,
    #[serde(rename = "used_in_tests")]
    UsedInTests,
}
impl ToString for SecretScanningAlertResolvedAlertResolution {
    fn to_string(&self) -> String {
        match self {
            SecretScanningAlertResolvedAlertResolution::FalsePositive => {
                "false_positive".to_string()
            }
            SecretScanningAlertResolvedAlertResolution::Wontfix => "wontfix".to_string(),
            SecretScanningAlertResolvedAlertResolution::Revoked => "revoked".to_string(),
            SecretScanningAlertResolvedAlertResolution::UsedInTests => "used_in_tests".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecretScanningAlertResolvedAlert {
    pub number: u64,
    pub resolution: SecretScanningAlertResolvedAlertResolution,
    pub resolved_at: String,
    pub resolved_by: User,
    pub secret_type: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SecurityAdvisoryPerformedAction {
    #[serde(rename = "performed")]
    Performed,
}
impl ToString for SecurityAdvisoryPerformedAction {
    fn to_string(&self) -> String {
        match self {
            SecurityAdvisoryPerformedAction::Performed => "performed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryPerformedSecurityAdvisoryCvss {
    pub score: f64,
    pub vector_string: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryPerformedSecurityAdvisoryCwesItem {
    pub cwe_id: String,
    pub name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryPerformedSecurityAdvisoryIdentifiersItem {
    #[serde(rename = "type")]
    pub ttype: String,
    pub value: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryPerformedSecurityAdvisoryReferencesItem {
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryPerformedSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion {
    pub identifier: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryPerformedSecurityAdvisoryVulnerabilitiesItemPackage {
    pub ecosystem: String,
    pub name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryPerformedSecurityAdvisoryVulnerabilitiesItem {
    pub first_patched_version:
        Option<SecurityAdvisoryPerformedSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion>,
    pub package: SecurityAdvisoryPerformedSecurityAdvisoryVulnerabilitiesItemPackage,
    pub severity: String,
    pub vulnerable_version_range: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryPerformedSecurityAdvisory {
    pub cvss: SecurityAdvisoryPerformedSecurityAdvisoryCvss,
    pub cwes: Vec<SecurityAdvisoryPerformedSecurityAdvisoryCwesItem>,
    pub description: String,
    pub ghsa_id: String,
    pub identifiers: Vec<SecurityAdvisoryPerformedSecurityAdvisoryIdentifiersItem>,
    pub published_at: String,
    pub references: Vec<SecurityAdvisoryPerformedSecurityAdvisoryReferencesItem>,
    pub severity: String,
    pub summary: String,
    pub updated_at: String,
    pub vulnerabilities: Vec<SecurityAdvisoryPerformedSecurityAdvisoryVulnerabilitiesItem>,
    pub withdrawn_at: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SecurityAdvisoryPublishedAction {
    #[serde(rename = "published")]
    Published,
}
impl ToString for SecurityAdvisoryPublishedAction {
    fn to_string(&self) -> String {
        match self {
            SecurityAdvisoryPublishedAction::Published => "published".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryPublishedSecurityAdvisoryCvss {
    pub score: f64,
    pub vector_string: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryPublishedSecurityAdvisoryCwesItem {
    pub cwe_id: String,
    pub name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryPublishedSecurityAdvisoryIdentifiersItem {
    #[serde(rename = "type")]
    pub ttype: String,
    pub value: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryPublishedSecurityAdvisoryReferencesItem {
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion {
    pub identifier: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesItemPackage {
    pub ecosystem: String,
    pub name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesItem {
    pub first_patched_version:
        Option<SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion>,
    pub package: SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesItemPackage,
    pub severity: String,
    pub vulnerable_version_range: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryPublishedSecurityAdvisory {
    pub cvss: SecurityAdvisoryPublishedSecurityAdvisoryCvss,
    pub cwes: Vec<SecurityAdvisoryPublishedSecurityAdvisoryCwesItem>,
    pub description: String,
    pub ghsa_id: String,
    pub identifiers: Vec<SecurityAdvisoryPublishedSecurityAdvisoryIdentifiersItem>,
    pub published_at: String,
    pub references: Vec<SecurityAdvisoryPublishedSecurityAdvisoryReferencesItem>,
    pub severity: String,
    pub summary: String,
    pub updated_at: String,
    pub vulnerabilities: Vec<SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesItem>,
    pub withdrawn_at: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SecurityAdvisoryUpdatedAction {
    #[serde(rename = "updated")]
    Updated,
}
impl ToString for SecurityAdvisoryUpdatedAction {
    fn to_string(&self) -> String {
        match self {
            SecurityAdvisoryUpdatedAction::Updated => "updated".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryUpdatedSecurityAdvisoryCvss {
    pub score: f64,
    pub vector_string: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryUpdatedSecurityAdvisoryCwesItem {
    pub cwe_id: String,
    pub name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryUpdatedSecurityAdvisoryIdentifiersItem {
    #[serde(rename = "type")]
    pub ttype: String,
    pub value: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryUpdatedSecurityAdvisoryReferencesItem {
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion {
    pub identifier: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesItemPackage {
    pub ecosystem: String,
    pub name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesItem {
    pub first_patched_version:
        Option<SecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion>,
    pub package: SecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesItemPackage,
    pub severity: String,
    pub vulnerable_version_range: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryUpdatedSecurityAdvisory {
    pub cvss: SecurityAdvisoryUpdatedSecurityAdvisoryCvss,
    pub cwes: Vec<SecurityAdvisoryUpdatedSecurityAdvisoryCwesItem>,
    pub description: String,
    pub ghsa_id: String,
    pub identifiers: Vec<SecurityAdvisoryUpdatedSecurityAdvisoryIdentifiersItem>,
    pub published_at: String,
    pub references: Vec<SecurityAdvisoryUpdatedSecurityAdvisoryReferencesItem>,
    pub severity: String,
    pub summary: String,
    pub updated_at: String,
    pub vulnerabilities: Vec<SecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesItem>,
    pub withdrawn_at: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SecurityAdvisoryWithdrawnAction {
    #[serde(rename = "withdrawn")]
    Withdrawn,
}
impl ToString for SecurityAdvisoryWithdrawnAction {
    fn to_string(&self) -> String {
        match self {
            SecurityAdvisoryWithdrawnAction::Withdrawn => "withdrawn".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryWithdrawnSecurityAdvisoryCvss {
    pub score: f64,
    pub vector_string: Option<String>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryWithdrawnSecurityAdvisoryCwesItem {
    pub cwe_id: String,
    pub name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryWithdrawnSecurityAdvisoryIdentifiersItem {
    #[serde(rename = "type")]
    pub ttype: String,
    pub value: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryWithdrawnSecurityAdvisoryReferencesItem {
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion {
    pub identifier: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesItemPackage {
    pub ecosystem: String,
    pub name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesItem {
    pub first_patched_version:
        Option<SecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion>,
    pub package: SecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesItemPackage,
    pub severity: String,
    pub vulnerable_version_range: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecurityAdvisoryWithdrawnSecurityAdvisory {
    pub cvss: SecurityAdvisoryWithdrawnSecurityAdvisoryCvss,
    pub cwes: Vec<SecurityAdvisoryWithdrawnSecurityAdvisoryCwesItem>,
    pub description: String,
    pub ghsa_id: String,
    pub identifiers: Vec<SecurityAdvisoryWithdrawnSecurityAdvisoryIdentifiersItem>,
    pub published_at: String,
    pub references: Vec<SecurityAdvisoryWithdrawnSecurityAdvisoryReferencesItem>,
    pub severity: String,
    pub summary: String,
    pub updated_at: String,
    pub vulnerabilities: Vec<SecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesItem>,
    pub withdrawn_at: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SimplePullRequestLinks {
    pub comments: Link,
    pub commits: Link,
    pub html: Link,
    pub issue: Link,
    pub review_comment: Link,
    pub review_comments: Link,
    #[serde(rename = "self")]
    pub sself: Link,
    pub statuses: Link,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SimplePullRequestActiveLockReason {
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "off-topic")]
    OffTopic,
    #[serde(rename = "too heated")]
    TooHeated,
    #[serde(rename = "spam")]
    Spam,
}
impl ToString for SimplePullRequestActiveLockReason {
    fn to_string(&self) -> String {
        match self {
            SimplePullRequestActiveLockReason::Resolved => "resolved".to_string(),
            SimplePullRequestActiveLockReason::OffTopic => "off-topic".to_string(),
            SimplePullRequestActiveLockReason::TooHeated => "too heated".to_string(),
            SimplePullRequestActiveLockReason::Spam => "spam".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SimplePullRequestBase {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SimplePullRequestHead {
    pub label: String,
    pub repo: Repository,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
    pub user: User,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum SimplePullRequestRequestedReviewersItem {
    User(User),
    Team(Team),
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SimplePullRequestState {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}
impl ToString for SimplePullRequestState {
    fn to_string(&self) -> String {
        match self {
            SimplePullRequestState::Open => "open".to_string(),
            SimplePullRequestState::Closed => "closed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SponsorshipCancelledAction {
    #[serde(rename = "cancelled")]
    Cancelled,
}
impl ToString for SponsorshipCancelledAction {
    fn to_string(&self) -> String {
        match self {
            SponsorshipCancelledAction::Cancelled => "cancelled".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipCancelledSponsorship {
    pub created_at: String,
    pub node_id: String,
    pub privacy_level: String,
    pub sponsor: User,
    pub sponsorable: User,
    pub tier: SponsorshipTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SponsorshipCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for SponsorshipCreatedAction {
    fn to_string(&self) -> String {
        match self {
            SponsorshipCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipCreatedSponsorship {
    pub created_at: String,
    pub node_id: String,
    pub privacy_level: String,
    pub sponsor: User,
    pub sponsorable: User,
    pub tier: SponsorshipTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SponsorshipEditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for SponsorshipEditedAction {
    fn to_string(&self) -> String {
        match self {
            SponsorshipEditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipEditedChangesPrivacyLevel {
    #[doc = "The `edited` event types include the details about the change when someone edits a sponsorship to change the privacy."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipEditedChanges {
    pub privacy_level: Option<SponsorshipEditedChangesPrivacyLevel>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipEditedSponsorship {
    pub created_at: String,
    pub node_id: String,
    pub privacy_level: String,
    pub sponsor: User,
    pub sponsorable: User,
    pub tier: SponsorshipTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SponsorshipPendingCancellationAction {
    #[serde(rename = "pending_cancellation")]
    PendingCancellation,
}
impl ToString for SponsorshipPendingCancellationAction {
    fn to_string(&self) -> String {
        match self {
            SponsorshipPendingCancellationAction::PendingCancellation => {
                "pending_cancellation".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipPendingCancellationSponsorship {
    pub created_at: String,
    pub node_id: String,
    pub privacy_level: String,
    pub sponsor: User,
    pub sponsorable: User,
    pub tier: SponsorshipTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SponsorshipPendingTierChangeAction {
    #[serde(rename = "pending_tier_change")]
    PendingTierChange,
}
impl ToString for SponsorshipPendingTierChangeAction {
    fn to_string(&self) -> String {
        match self {
            SponsorshipPendingTierChangeAction::PendingTierChange => {
                "pending_tier_change".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipPendingTierChangeChangesTier {
    pub from: SponsorshipTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipPendingTierChangeChanges {
    pub tier: SponsorshipPendingTierChangeChangesTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipPendingTierChangeSponsorship {
    pub created_at: String,
    pub node_id: String,
    pub privacy_level: String,
    pub sponsor: User,
    pub sponsorable: User,
    pub tier: SponsorshipTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum SponsorshipTierChangedAction {
    #[serde(rename = "tier_changed")]
    TierChanged,
}
impl ToString for SponsorshipTierChangedAction {
    fn to_string(&self) -> String {
        match self {
            SponsorshipTierChangedAction::TierChanged => "tier_changed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipTierChangedChangesTier {
    pub from: SponsorshipTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipTierChangedChanges {
    pub tier: SponsorshipTierChangedChangesTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SponsorshipTierChangedSponsorship {
    pub created_at: String,
    pub node_id: String,
    pub privacy_level: String,
    pub sponsor: User,
    pub sponsorable: User,
    pub tier: SponsorshipTier,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum StarCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for StarCreatedAction {
    fn to_string(&self) -> String {
        match self {
            StarCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum StarDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for StarDeletedAction {
    fn to_string(&self) -> String {
        match self {
            StarDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatusEventBranchesItemCommit {
    pub sha: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatusEventBranchesItem {
    pub commit: StatusEventBranchesItemCommit,
    pub name: String,
    pub protected: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatusEventCommitCommitAuthor {
    #[serde(flatten)]
    pub committer: Committer,
    pub date: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatusEventCommitCommitCommitter {
    #[serde(flatten)]
    pub committer: Committer,
    pub date: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatusEventCommitCommitTree {
    pub sha: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum StatusEventCommitCommitVerificationReason {
    #[serde(rename = "expired_key")]
    ExpiredKey,
    #[serde(rename = "not_signing_key")]
    NotSigningKey,
    #[serde(rename = "gpgverify_error")]
    GpgverifyError,
    #[serde(rename = "gpgverify_unavailable")]
    GpgverifyUnavailable,
    #[serde(rename = "unsigned")]
    Unsigned,
    #[serde(rename = "unknown_signature_type")]
    UnknownSignatureType,
    #[serde(rename = "no_user")]
    NoUser,
    #[serde(rename = "unverified_email")]
    UnverifiedEmail,
    #[serde(rename = "bad_email")]
    BadEmail,
    #[serde(rename = "unknown_key")]
    UnknownKey,
    #[serde(rename = "malformed_signature")]
    MalformedSignature,
    #[serde(rename = "invalid")]
    Invalid,
    #[serde(rename = "valid")]
    Valid,
}
impl ToString for StatusEventCommitCommitVerificationReason {
    fn to_string(&self) -> String {
        match self {
            StatusEventCommitCommitVerificationReason::ExpiredKey => "expired_key".to_string(),
            StatusEventCommitCommitVerificationReason::NotSigningKey => {
                "not_signing_key".to_string()
            }
            StatusEventCommitCommitVerificationReason::GpgverifyError => {
                "gpgverify_error".to_string()
            }
            StatusEventCommitCommitVerificationReason::GpgverifyUnavailable => {
                "gpgverify_unavailable".to_string()
            }
            StatusEventCommitCommitVerificationReason::Unsigned => "unsigned".to_string(),
            StatusEventCommitCommitVerificationReason::UnknownSignatureType => {
                "unknown_signature_type".to_string()
            }
            StatusEventCommitCommitVerificationReason::NoUser => "no_user".to_string(),
            StatusEventCommitCommitVerificationReason::UnverifiedEmail => {
                "unverified_email".to_string()
            }
            StatusEventCommitCommitVerificationReason::BadEmail => "bad_email".to_string(),
            StatusEventCommitCommitVerificationReason::UnknownKey => "unknown_key".to_string(),
            StatusEventCommitCommitVerificationReason::MalformedSignature => {
                "malformed_signature".to_string()
            }
            StatusEventCommitCommitVerificationReason::Invalid => "invalid".to_string(),
            StatusEventCommitCommitVerificationReason::Valid => "valid".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatusEventCommitCommitVerification {
    pub payload: Option<String>,
    pub reason: StatusEventCommitCommitVerificationReason,
    pub signature: Option<String>,
    pub verified: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatusEventCommitCommit {
    pub author: StatusEventCommitCommitAuthor,
    pub comment_count: u64,
    pub committer: StatusEventCommitCommitCommitter,
    pub message: String,
    pub tree: StatusEventCommitCommitTree,
    pub url: String,
    pub verification: StatusEventCommitCommitVerification,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatusEventCommitParentsItem {
    pub html_url: String,
    pub sha: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StatusEventCommit {
    pub author: Option<User>,
    pub comments_url: String,
    pub commit: StatusEventCommitCommit,
    pub committer: Option<User>,
    pub html_url: String,
    pub node_id: String,
    pub parents: Vec<StatusEventCommitParentsItem>,
    pub sha: String,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum StatusEventState {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "error")]
    Error,
}
impl ToString for StatusEventState {
    fn to_string(&self) -> String {
        match self {
            StatusEventState::Pending => "pending".to_string(),
            StatusEventState::Success => "success".to_string(),
            StatusEventState::Failure => "failure".to_string(),
            StatusEventState::Error => "error".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum TeamParentPrivacy {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
    #[serde(rename = "secret")]
    Secret,
}
impl ToString for TeamParentPrivacy {
    fn to_string(&self) -> String {
        match self {
            TeamParentPrivacy::Open => "open".to_string(),
            TeamParentPrivacy::Closed => "closed".to_string(),
            TeamParentPrivacy::Secret => "secret".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeamParent {
    #[doc = "Description of the team"]
    pub description: Option<String>,
    pub html_url: String,
    #[doc = "Unique identifier of the team"]
    pub id: u64,
    pub members_url: String,
    #[doc = "Name of the team"]
    pub name: String,
    pub node_id: String,
    #[doc = "Permission that the team will have for its repositories"]
    pub permission: String,
    pub privacy: TeamParentPrivacy,
    pub repositories_url: String,
    pub slug: String,
    #[doc = "URL for the team"]
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum TeamPrivacy {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
    #[serde(rename = "secret")]
    Secret,
}
impl ToString for TeamPrivacy {
    fn to_string(&self) -> String {
        match self {
            TeamPrivacy::Open => "open".to_string(),
            TeamPrivacy::Closed => "closed".to_string(),
            TeamPrivacy::Secret => "secret".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum TeamAddedToRepositoryAction {
    #[serde(rename = "added_to_repository")]
    AddedToRepository,
}
impl ToString for TeamAddedToRepositoryAction {
    fn to_string(&self) -> String {
        match self {
            TeamAddedToRepositoryAction::AddedToRepository => "added_to_repository".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum TeamCreatedAction {
    #[serde(rename = "created")]
    Created,
}
impl ToString for TeamCreatedAction {
    fn to_string(&self) -> String {
        match self {
            TeamCreatedAction::Created => "created".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum TeamDeletedAction {
    #[serde(rename = "deleted")]
    Deleted,
}
impl ToString for TeamDeletedAction {
    fn to_string(&self) -> String {
        match self {
            TeamDeletedAction::Deleted => "deleted".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum TeamEditedAction {
    #[serde(rename = "edited")]
    Edited,
}
impl ToString for TeamEditedAction {
    fn to_string(&self) -> String {
        match self {
            TeamEditedAction::Edited => "edited".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeamEditedChangesDescription {
    #[doc = "The previous version of the description if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeamEditedChangesName {
    #[doc = "The previous version of the name if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeamEditedChangesPrivacy {
    #[doc = "The previous version of the team's privacy if the action was `edited`."]
    pub from: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeamEditedChangesRepositoryPermissionsFrom {
    #[doc = "The previous version of the team member's `admin` permission on a repository, if the action was `edited`."]
    pub admin: Option<bool>,
    #[doc = "The previous version of the team member's `pull` permission on a repository, if the action was `edited`."]
    pub pull: Option<bool>,
    #[doc = "The previous version of the team member's `push` permission on a repository, if the action was `edited`."]
    pub push: Option<bool>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeamEditedChangesRepositoryPermissions {
    pub from: TeamEditedChangesRepositoryPermissionsFrom,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeamEditedChangesRepository {
    pub permissions: TeamEditedChangesRepositoryPermissions,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TeamEditedChanges {
    pub description: Option<TeamEditedChangesDescription>,
    pub name: Option<TeamEditedChangesName>,
    pub privacy: Option<TeamEditedChangesPrivacy>,
    pub repository: Option<TeamEditedChangesRepository>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum TeamRemovedFromRepositoryAction {
    #[serde(rename = "removed_from_repository")]
    RemovedFromRepository,
}
impl ToString for TeamRemovedFromRepositoryAction {
    fn to_string(&self) -> String {
        match self {
            TeamRemovedFromRepositoryAction::RemovedFromRepository => {
                "removed_from_repository".to_string()
            }
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum UserType {
    Bot,
    User,
    Organization,
}
impl ToString for UserType {
    fn to_string(&self) -> String {
        match self {
            UserType::Bot => "Bot".to_string(),
            UserType::User => "User".to_string(),
            UserType::Organization => "Organization".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WatchStartedAction {
    #[serde(rename = "started")]
    Started,
}
impl ToString for WatchStartedAction {
    fn to_string(&self) -> String {
        match self {
            WatchStartedAction::Started => "started".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WebhookEventsVariant0Item {
    #[serde(rename = "check_run")]
    CheckRun,
    #[serde(rename = "check_suite")]
    CheckSuite,
    #[serde(rename = "code_scanning_alert")]
    CodeScanningAlert,
    #[serde(rename = "commit_comment")]
    CommitComment,
    #[serde(rename = "content_reference")]
    ContentReference,
    #[serde(rename = "create")]
    Create,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "deployment")]
    Deployment,
    #[serde(rename = "deployment_review")]
    DeploymentReview,
    #[serde(rename = "deployment_status")]
    DeploymentStatus,
    #[serde(rename = "deploy_key")]
    DeployKey,
    #[serde(rename = "discussion")]
    Discussion,
    #[serde(rename = "discussion_comment")]
    DiscussionComment,
    #[serde(rename = "fork")]
    Fork,
    #[serde(rename = "gollum")]
    Gollum,
    #[serde(rename = "issues")]
    Issues,
    #[serde(rename = "issue_comment")]
    IssueComment,
    #[serde(rename = "label")]
    Label,
    #[serde(rename = "member")]
    Member,
    #[serde(rename = "membership")]
    Membership,
    #[serde(rename = "meta")]
    Meta,
    #[serde(rename = "milestone")]
    Milestone,
    #[serde(rename = "organization")]
    Organization,
    #[serde(rename = "org_block")]
    OrgBlock,
    #[serde(rename = "page_build")]
    PageBuild,
    #[serde(rename = "project")]
    Project,
    #[serde(rename = "project_card")]
    ProjectCard,
    #[serde(rename = "project_column")]
    ProjectColumn,
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "pull_request")]
    PullRequest,
    #[serde(rename = "pull_request_review")]
    PullRequestReview,
    #[serde(rename = "pull_request_review_comment")]
    PullRequestReviewComment,
    #[serde(rename = "push")]
    Push,
    #[serde(rename = "registry_package")]
    RegistryPackage,
    #[serde(rename = "release")]
    Release,
    #[serde(rename = "repository")]
    Repository,
    #[serde(rename = "repository_dispatch")]
    RepositoryDispatch,
    #[serde(rename = "repository_import")]
    RepositoryImport,
    #[serde(rename = "repository_vulnerability_alert")]
    RepositoryVulnerabilityAlert,
    #[serde(rename = "secret_scanning_alert")]
    SecretScanningAlert,
    #[serde(rename = "star")]
    Star,
    #[serde(rename = "status")]
    Status,
    #[serde(rename = "team")]
    Team,
    #[serde(rename = "team_add")]
    TeamAdd,
    #[serde(rename = "watch")]
    Watch,
    #[serde(rename = "workflow_dispatch")]
    WorkflowDispatch,
    #[serde(rename = "workflow_run")]
    WorkflowRun,
}
impl ToString for WebhookEventsVariant0Item {
    fn to_string(&self) -> String {
        match self {
            WebhookEventsVariant0Item::CheckRun => "check_run".to_string(),
            WebhookEventsVariant0Item::CheckSuite => "check_suite".to_string(),
            WebhookEventsVariant0Item::CodeScanningAlert => "code_scanning_alert".to_string(),
            WebhookEventsVariant0Item::CommitComment => "commit_comment".to_string(),
            WebhookEventsVariant0Item::ContentReference => "content_reference".to_string(),
            WebhookEventsVariant0Item::Create => "create".to_string(),
            WebhookEventsVariant0Item::Delete => "delete".to_string(),
            WebhookEventsVariant0Item::Deployment => "deployment".to_string(),
            WebhookEventsVariant0Item::DeploymentReview => "deployment_review".to_string(),
            WebhookEventsVariant0Item::DeploymentStatus => "deployment_status".to_string(),
            WebhookEventsVariant0Item::DeployKey => "deploy_key".to_string(),
            WebhookEventsVariant0Item::Discussion => "discussion".to_string(),
            WebhookEventsVariant0Item::DiscussionComment => "discussion_comment".to_string(),
            WebhookEventsVariant0Item::Fork => "fork".to_string(),
            WebhookEventsVariant0Item::Gollum => "gollum".to_string(),
            WebhookEventsVariant0Item::Issues => "issues".to_string(),
            WebhookEventsVariant0Item::IssueComment => "issue_comment".to_string(),
            WebhookEventsVariant0Item::Label => "label".to_string(),
            WebhookEventsVariant0Item::Member => "member".to_string(),
            WebhookEventsVariant0Item::Membership => "membership".to_string(),
            WebhookEventsVariant0Item::Meta => "meta".to_string(),
            WebhookEventsVariant0Item::Milestone => "milestone".to_string(),
            WebhookEventsVariant0Item::Organization => "organization".to_string(),
            WebhookEventsVariant0Item::OrgBlock => "org_block".to_string(),
            WebhookEventsVariant0Item::PageBuild => "page_build".to_string(),
            WebhookEventsVariant0Item::Project => "project".to_string(),
            WebhookEventsVariant0Item::ProjectCard => "project_card".to_string(),
            WebhookEventsVariant0Item::ProjectColumn => "project_column".to_string(),
            WebhookEventsVariant0Item::Public => "public".to_string(),
            WebhookEventsVariant0Item::PullRequest => "pull_request".to_string(),
            WebhookEventsVariant0Item::PullRequestReview => "pull_request_review".to_string(),
            WebhookEventsVariant0Item::PullRequestReviewComment => {
                "pull_request_review_comment".to_string()
            }
            WebhookEventsVariant0Item::Push => "push".to_string(),
            WebhookEventsVariant0Item::RegistryPackage => "registry_package".to_string(),
            WebhookEventsVariant0Item::Release => "release".to_string(),
            WebhookEventsVariant0Item::Repository => "repository".to_string(),
            WebhookEventsVariant0Item::RepositoryDispatch => "repository_dispatch".to_string(),
            WebhookEventsVariant0Item::RepositoryImport => "repository_import".to_string(),
            WebhookEventsVariant0Item::RepositoryVulnerabilityAlert => {
                "repository_vulnerability_alert".to_string()
            }
            WebhookEventsVariant0Item::SecretScanningAlert => "secret_scanning_alert".to_string(),
            WebhookEventsVariant0Item::Star => "star".to_string(),
            WebhookEventsVariant0Item::Status => "status".to_string(),
            WebhookEventsVariant0Item::Team => "team".to_string(),
            WebhookEventsVariant0Item::TeamAdd => "team_add".to_string(),
            WebhookEventsVariant0Item::Watch => "watch".to_string(),
            WebhookEventsVariant0Item::WorkflowDispatch => "workflow_dispatch".to_string(),
            WebhookEventsVariant0Item::WorkflowRun => "workflow_run".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowJobConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
}
impl ToString for WorkflowJobConclusion {
    fn to_string(&self) -> String {
        match self {
            WorkflowJobConclusion::Success => "success".to_string(),
            WorkflowJobConclusion::Failure => "failure".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowJobStatus {
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for WorkflowJobStatus {
    fn to_string(&self) -> String {
        match self {
            WorkflowJobStatus::Queued => "queued".to_string(),
            WorkflowJobStatus::InProgress => "in_progress".to_string(),
            WorkflowJobStatus::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowRunConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
}
impl ToString for WorkflowRunConclusion {
    fn to_string(&self) -> String {
        match self {
            WorkflowRunConclusion::Success => "success".to_string(),
            WorkflowRunConclusion::Failure => "failure".to_string(),
            WorkflowRunConclusion::Neutral => "neutral".to_string(),
            WorkflowRunConclusion::Cancelled => "cancelled".to_string(),
            WorkflowRunConclusion::TimedOut => "timed_out".to_string(),
            WorkflowRunConclusion::ActionRequired => "action_required".to_string(),
            WorkflowRunConclusion::Stale => "stale".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowRunPullRequestsItemBase {
    pub repo: RepoRef,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowRunPullRequestsItemHead {
    pub repo: RepoRef,
    #[serde(rename = "ref")]
    pub rref: String,
    pub sha: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowRunPullRequestsItem {
    pub base: WorkflowRunPullRequestsItemBase,
    pub head: WorkflowRunPullRequestsItemHead,
    pub id: f64,
    pub number: f64,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowRunStatus {
    #[serde(rename = "requested")]
    Requested,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "queued")]
    Queued,
}
impl ToString for WorkflowRunStatus {
    fn to_string(&self) -> String {
        match self {
            WorkflowRunStatus::Requested => "requested".to_string(),
            WorkflowRunStatus::InProgress => "in_progress".to_string(),
            WorkflowRunStatus::Completed => "completed".to_string(),
            WorkflowRunStatus::Queued => "queued".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowStepCompletedConclusion {
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "skipped")]
    Skipped,
    #[serde(rename = "success")]
    Success,
}
impl ToString for WorkflowStepCompletedConclusion {
    fn to_string(&self) -> String {
        match self {
            WorkflowStepCompletedConclusion::Failure => "failure".to_string(),
            WorkflowStepCompletedConclusion::Skipped => "skipped".to_string(),
            WorkflowStepCompletedConclusion::Success => "success".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowStepCompletedStatus {
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for WorkflowStepCompletedStatus {
    fn to_string(&self) -> String {
        match self {
            WorkflowStepCompletedStatus::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowStepInProgressStatus {
    #[serde(rename = "in_progress")]
    InProgress,
}
impl ToString for WorkflowStepInProgressStatus {
    fn to_string(&self) -> String {
        match self {
            WorkflowStepInProgressStatus::InProgress => "in_progress".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowJobCompletedAction {
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for WorkflowJobCompletedAction {
    fn to_string(&self) -> String {
        match self {
            WorkflowJobCompletedAction::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowJobCompletedWorkflowJobConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
}
impl ToString for WorkflowJobCompletedWorkflowJobConclusion {
    fn to_string(&self) -> String {
        match self {
            WorkflowJobCompletedWorkflowJobConclusion::Success => "success".to_string(),
            WorkflowJobCompletedWorkflowJobConclusion::Failure => "failure".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowJobCompletedWorkflowJob {
    #[serde(flatten)]
    pub workflow_job: WorkflowJob,
    pub conclusion: WorkflowJobCompletedWorkflowJobConclusion,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowJobQueuedAction {
    #[serde(rename = "queued")]
    Queued,
}
impl ToString for WorkflowJobQueuedAction {
    fn to_string(&self) -> String {
        match self {
            WorkflowJobQueuedAction::Queued => "queued".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowJobQueuedWorkflowJobStatus {
    #[serde(rename = "queued")]
    Queued,
}
impl ToString for WorkflowJobQueuedWorkflowJobStatus {
    fn to_string(&self) -> String {
        match self {
            WorkflowJobQueuedWorkflowJobStatus::Queued => "queued".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowJobQueuedWorkflowJob {
    pub check_run_url: String,
    pub completed_at: (),
    pub conclusion: (),
    pub head_sha: String,
    pub html_url: String,
    pub id: u64,
    pub labels: Vec<String>,
    pub name: String,
    pub node_id: String,
    pub run_id: f64,
    pub run_url: String,
    pub started_at: chrono::DateTime<chrono::offset::Utc>,
    pub status: WorkflowJobQueuedWorkflowJobStatus,
    pub steps: Vec<WorkflowStep>,
    pub url: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowJobStartedAction {
    #[serde(rename = "started")]
    Started,
}
impl ToString for WorkflowJobStartedAction {
    fn to_string(&self) -> String {
        match self {
            WorkflowJobStartedAction::Started => "started".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowJobStartedWorkflowJob {
    #[serde(flatten)]
    pub workflow_job: WorkflowJob,
    pub completed_at: (),
    pub conclusion: (),
    pub steps: Vec<WorkflowStepInProgress>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowRunCompletedAction {
    #[serde(rename = "completed")]
    Completed,
}
impl ToString for WorkflowRunCompletedAction {
    fn to_string(&self) -> String {
        match self {
            WorkflowRunCompletedAction::Completed => "completed".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowRunCompletedWorkflowRunConclusion {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "stale")]
    Stale,
}
impl ToString for WorkflowRunCompletedWorkflowRunConclusion {
    fn to_string(&self) -> String {
        match self {
            WorkflowRunCompletedWorkflowRunConclusion::Success => "success".to_string(),
            WorkflowRunCompletedWorkflowRunConclusion::Failure => "failure".to_string(),
            WorkflowRunCompletedWorkflowRunConclusion::Neutral => "neutral".to_string(),
            WorkflowRunCompletedWorkflowRunConclusion::Cancelled => "cancelled".to_string(),
            WorkflowRunCompletedWorkflowRunConclusion::TimedOut => "timed_out".to_string(),
            WorkflowRunCompletedWorkflowRunConclusion::ActionRequired => {
                "action_required".to_string()
            }
            WorkflowRunCompletedWorkflowRunConclusion::Stale => "stale".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct WorkflowRunCompletedWorkflowRun {
    #[serde(flatten)]
    pub workflow_run: WorkflowRun,
    pub conclusion: WorkflowRunCompletedWorkflowRunConclusion,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum WorkflowRunRequestedAction {
    #[serde(rename = "requested")]
    Requested,
}
impl ToString for WorkflowRunRequestedAction {
    fn to_string(&self) -> String {
        match self {
            WorkflowRunRequestedAction::Requested => "requested".to_string(),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum Everything {
    BranchProtectionRuleEvent(BranchProtectionRuleEvent),
    CheckRunEvent(CheckRunEvent),
    CheckSuiteEvent(CheckSuiteEvent),
    CodeScanningAlertEvent(CodeScanningAlertEvent),
    CommitCommentEvent(CommitCommentEvent),
    ContentReferenceEvent(ContentReferenceEvent),
    CreateEvent(CreateEvent),
    DeleteEvent(DeleteEvent),
    DeployKeyEvent(DeployKeyEvent),
    DeploymentEvent(DeploymentEvent),
    DeploymentStatusEvent(DeploymentStatusEvent),
    DiscussionEvent(DiscussionEvent),
    DiscussionCommentEvent(DiscussionCommentEvent),
    ForkEvent(ForkEvent),
    GithubAppAuthorizationEvent(GithubAppAuthorizationEvent),
    GollumEvent(GollumEvent),
    InstallationEvent(InstallationEvent),
    InstallationRepositoriesEvent(InstallationRepositoriesEvent),
    IssueCommentEvent(IssueCommentEvent),
    IssuesEvent(IssuesEvent),
    LabelEvent(LabelEvent),
    MarketplacePurchaseEvent(MarketplacePurchaseEvent),
    MemberEvent(MemberEvent),
    MembershipEvent(MembershipEvent),
    MetaEvent(MetaEvent),
    MilestoneEvent(MilestoneEvent),
    OrgBlockEvent(OrgBlockEvent),
    OrganizationEvent(OrganizationEvent),
    PackageEvent(PackageEvent),
    PageBuildEvent(PageBuildEvent),
    PingEvent(PingEvent),
    ProjectEvent(ProjectEvent),
    ProjectCardEvent(ProjectCardEvent),
    ProjectColumnEvent(ProjectColumnEvent),
    PublicEvent(PublicEvent),
    PullRequestEvent(PullRequestEvent),
    PullRequestReviewEvent(PullRequestReviewEvent),
    PullRequestReviewCommentEvent(PullRequestReviewCommentEvent),
    PushEvent(PushEvent),
    ReleaseEvent(ReleaseEvent),
    RepositoryEvent(RepositoryEvent),
    RepositoryDispatchEvent(RepositoryDispatchEvent),
    RepositoryImportEvent(RepositoryImportEvent),
    RepositoryVulnerabilityAlertEvent(RepositoryVulnerabilityAlertEvent),
    SecretScanningAlertEvent(SecretScanningAlertEvent),
    SecurityAdvisoryEvent(SecurityAdvisoryEvent),
    SponsorshipEvent(SponsorshipEvent),
    StarEvent(StarEvent),
    StatusEvent(StatusEvent),
    TeamEvent(TeamEvent),
    TeamAddEvent(TeamAddEvent),
    WatchEvent(WatchEvent),
    WorkflowDispatchEvent(WorkflowDispatchEvent),
    WorkflowJobEvent(WorkflowJobEvent),
    WorkflowRunEvent(WorkflowRunEvent),
}
